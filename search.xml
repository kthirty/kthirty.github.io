<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PVE折腾日期-网络规划篇（二）</title>
      <link href="posts/Pve2/"/>
      <url>posts/Pve2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h2><p>由于我这个机器只有一个网口，而且运营商师傅改桥接有点麻烦。<br />所以整体采用了旁路由的方式，整体虚拟机与主路由在同一网段，维护比较舒服。</p><h2 id="网络架构图"><a class="markdownIt-Anchor" href="#网络架构图"></a> 网络架构图</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/202510171351.png" alt="网络架构图" /></p><h2 id="具体-ip-配置"><a class="markdownIt-Anchor" href="#具体-ip-配置"></a> 具体 IP 配置</h2><table><thead><tr><th>机器</th><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>PVE 主机</td><td>192.168.1.100</td><td>实体主机</td></tr><tr><td>OpenWRT</td><td>192.168.1.101</td><td>主要负责网络相关服务（科学上网、DNS、Lucky 服务转发）</td></tr><tr><td>Synology</td><td>192.168.1.102</td><td>文件同步与照片备份</td></tr><tr><td>FnOS</td><td>192.168.1.103</td><td>影视</td></tr><tr><td>Windows 11</td><td>192.168.1.199</td><td>临时远程主机</td></tr><tr><td>LXC Debian</td><td>192.168.1.201</td><td>Docker 服务专用容器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Pve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> PVE </tag>
            
            <tag> All In One </tag>
            
            <tag> Docker </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVE折腾日记-硬件篇（一）</title>
      <link href="posts/Pve1/"/>
      <url>posts/Pve1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>开个新坑，从零开始组建一个 PVE9 为基础的家庭 ALL IN BOOM。</p><h2 id="配置单"><a class="markdownIt-Anchor" href="#配置单"></a> 配置单</h2><table><thead><tr><th>硬件</th><th>型号</th><th>价格</th><th>购买渠道</th></tr></thead><tbody><tr><td>主板</td><td>昂达 H610-VH4</td><td>400</td><td>闲鱼</td></tr><tr><td>CPU</td><td>G6900</td><td>板 U 套</td><td>闲鱼</td></tr><tr><td>电源</td><td>捡垃圾 450W</td><td>30</td><td>闲鱼</td></tr><tr><td>硬盘</td><td>铠侠 M.2 PCIE4.0 512G</td><td>160</td><td>闲鱼</td></tr><tr><td>IO 挡板</td><td>-</td><td>12</td><td>闲鱼</td></tr><tr><td>PCIE 转 SATA 拓展卡 5 口</td><td>阿卡西斯</td><td>35</td><td>闲鱼</td></tr><tr><td>CPU 散热器</td><td>利民 AXP-90 X36</td><td>110</td><td>PDD</td></tr><tr><td>机箱 + 风扇 + SATA 线</td><td>御夫座</td><td>220</td><td>闲鱼</td></tr><tr><td>内存条</td><td>金百达黑爵 3200</td><td>180</td><td>京东</td></tr><tr><td>合计</td><td>-</td><td>1147</td><td>-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Pve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PVE </tag>
            
            <tag> All In One </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据恢复</title>
      <link href="posts/2GDB5A2/"/>
      <url>posts/2GDB5A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><blockquote><p>Oracle 突然断电后，无法启动，错误信息</p></blockquote><ul><li><code>end-of-file on communication channel</code></li><li><code>instance terminated by user , pid = &lt;pid&gt;</code></li><li><code>control filesequence number mismatch</code></li><li><code>file 1 needs more recovery to be consistent</code></li></ul><h2 id="问题排查"><a class="markdownIt-Anchor" href="#问题排查"></a> 问题排查</h2><h3 id="尝试启动-oracle"><a class="markdownIt-Anchor" href="#尝试启动-oracle"></a> 尝试启动 Oracle</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用dba登录</span></span><br><span class="line">sqlplus / as sysdba;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前实例状态 (状态分几步 nomount未挂载文件 mount已挂载数据文件 open已挂载并打开数据文件 shutdown 关闭状态)</span></span><br><span class="line">select status from v<span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试启动(完整启动)</span></span><br><span class="line">startup;</span><br><span class="line"><span class="comment"># 出现错误end-of-file on communication channel</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看-oracle-启动日志"><a class="markdownIt-Anchor" href="#查看-oracle-启动日志"></a> 查看 Oracle 启动日志</h3><blockquote><p>启动日志路径 <code>$ORACLE_BASE/diag/rdbms/&lt;db_name&gt;/&lt;instance_name&gt;/trace/alert_&lt;instance_name&gt;.log</code></p></blockquote><p>日志出现<code>instance terminated by user , pid = &lt;pid&gt;</code>， log 文件只有最初级的错误日志，下一步查看 trc 日志文件，在 log 文件的同目录下，会有一个<code>&lt;pid&gt;.trc</code> 文件，这里是更详细的 trace 日志，找到详细错误日志<code>kccpb_sanity_check_2 control filesequence number mismatch</code></p><h3 id="分析问题"><a class="markdownIt-Anchor" href="#分析问题"></a> 分析问题</h3><ol><li>问题根源是 <code>kccpb_sanity_check_2 control filesequence number mismatch</code></li><li>Oracle 在启动时会检查控制文件(*.ctl)的序列号</li><li>控制文件的作用是管理归档文件和数据文件(dbf)</li><li>由于强制断电，导致 Oracle 在写入控制文件过程中断开，出现控制文件与数据文件不对应的问题</li></ol><h2 id="问题处理"><a class="markdownIt-Anchor" href="#问题处理"></a> 问题处理</h2><h3 id="启动到数据库未挂载前"><a class="markdownIt-Anchor" href="#启动到数据库未挂载前"></a> 启动到数据库未挂载前</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba;</span><br><span class="line">startup nomount;</span><br></pre></td></tr></table></figure><h3 id="开始重建控制文件"><a class="markdownIt-Anchor" href="#开始重建控制文件"></a> 开始重建控制文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">-- db_name 一般为orcl</span></span><br><span class="line">   <span class="keyword">CREATE</span> CONTROLFILE REUSE DATABASE &quot;&lt;db_name&gt;&quot;</span><br><span class="line">   <span class="comment">-- 注意，这里是归档日志未备份的情况，如果可以不重建日志文件</span></span><br><span class="line">   RESETLOGS <span class="comment">-- 重建日志文件</span></span><br><span class="line">   NOARCHIVELOG <span class="comment">-- 无归档日志</span></span><br><span class="line">       MAXLOGFILES <span class="number">16</span></span><br><span class="line">       MAXLOGMEMBERS <span class="number">3</span></span><br><span class="line">       MAXDATAFILES <span class="number">100</span></span><br><span class="line">       MAXINSTANCES <span class="number">1</span></span><br><span class="line">       MAXLOGHISTORY <span class="number">292</span></span><br><span class="line">   LOGFILE</span><br><span class="line">   <span class="comment">-- 所有的REDO文件!!!!</span></span><br><span class="line">     <span class="keyword">GROUP</span> <span class="number">1</span> <span class="string">&#x27;/PATH/REDO01.LOG&#x27;</span> SIZE <span class="number">50</span>M,</span><br><span class="line">     <span class="keyword">GROUP</span> <span class="number">2</span> <span class="string">&#x27;/PATH/REDO02.log&#x27;</span> SIZE <span class="number">50</span>M,</span><br><span class="line">     <span class="keyword">GROUP</span> <span class="number">3</span> <span class="string">&#x27;/PATH/REDO03.log&#x27;</span> SIZE <span class="number">50</span>M</span><br><span class="line">   DATAFILE</span><br><span class="line">   <span class="comment">-- 这里一定要是所有的数据文件!!!!</span></span><br><span class="line">       <span class="string">&#x27;/PATH/SYSTEM01.DBF&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;/PATH/SYSTEM02.DBF&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;/PATH/USERS01.DBF&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;/PATH/UNDOTBS01.DBF&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;/PATH/SYSAUX01.DBF&#x27;</span></span><br><span class="line">   <span class="comment">-- 按照数据库实际的字符集</span></span><br><span class="line">   <span class="type">CHARACTER</span> <span class="keyword">SET</span> ZHS16GBK;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重建成功结果为 Control file created.</span></span><br></pre></td></tr></table></figure><h3 id="检查当前实例状态"><a class="markdownIt-Anchor" href="#检查当前实例状态"></a> 检查当前实例状态</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> status <span class="keyword">from</span> v$instance;</span><br><span class="line"><span class="comment">-- 此刻应该转为 mounted</span></span><br></pre></td></tr></table></figure><h3 id="启动数据库"><a class="markdownIt-Anchor" href="#启动数据库"></a> 启动数据库</h3><p><strong>这里我们已经将数据从无法挂载状态修复到了已挂载数据文件阶段</strong></p><p>尝试启动<code>alter database open resetlogs</code> （这里要根据上面重建时选项）</p><h3 id="数据文件损坏"><a class="markdownIt-Anchor" href="#数据文件损坏"></a> 数据文件损坏</h3><p><strong>恢复之前要慎重，慎重，一定要确保构建控制文件时的数据文件是完整的</strong></p><ul><li>上一步启动，出现文件损坏<code>file 1 needs more recovery to be consistent</code></li><li>修复数据库<code>recover database using backup controlfile;</code></li><li>出现提示<code>specify log (suggested filename auto cancel)</code>，这里是 recover 未找到归档文件，如果有归档文件可以填入归档文件，没有的话填写 REDO 文件</li></ul><h3 id="再次尝试启动数据库"><a class="markdownIt-Anchor" href="#再次尝试启动数据库"></a> 再次尝试启动数据库</h3><p><code>alter database open resetlogs;</code></p><p>这里应该可以启动成功</p><h3 id="检查数据文件状态"><a class="markdownIt-Anchor" href="#检查数据文件状态"></a> 检查数据文件状态</h3><p><code>select * from dba_data_files;</code></p><p><strong>此处文件应该都是 ONLINE 状态，如果出现 MISSING000*文件则说明在修复控制文件时，你的数据文件没有完全传入，通常情况下数据文件的后缀是 DBF，如果创建数据库表空间数据文件时没有按照规范，也可能是其他的后缀，一定一定要确认清楚</strong></p><h2 id="问题总结"><a class="markdownIt-Anchor" href="#问题总结"></a> 问题总结</h2><ol><li>查看<code>alert_</code>启动日志</li><li>查看更详细的<code>.trc</code>日志</li><li>找到问题<code>control filesequence number mismatch</code></li><li>重建控制文件<code>create controlfile reuse database &quot;&lt;db_name&gt;&quot;</code></li><li>修复数据库<code>recover database using backup controlfile</code></li><li>启动数据库 <code>alter database open resetlogs</code></li></ol><h2 id="附加"><a class="markdownIt-Anchor" href="#附加"></a> 附加</h2><p><strong>REDO 文件与归档日志文件对比</strong></p><table><thead><tr><th>特性</th><th>REDO 日志文件</th><th>归档日志文件</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>数据恢复、回滚、重做日志记录</td><td>数据恢复、时间点恢复和备份支持</td></tr><tr><td><strong>存储形式</strong></td><td>循环使用，可能被覆盖</td><td>不被覆盖，需手动清理</td></tr><tr><td><strong>写入方式</strong></td><td><code>LGWR</code>后台进程实时写入</td><td><code>ARCn</code>后台进程异步生成</td></tr><tr><td><strong>模式依赖</strong></td><td>无需归档模式</td><td>必须启用归档模式</td></tr><tr><td><strong>数据内容</strong></td><td>数据库事务的实时更改</td><td>REDO 日志文件的副本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql创建Schema与用户</title>
      <link href="posts/FNP8G0/"/>
      <url>posts/FNP8G0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="创建用户"><a class="markdownIt-Anchor" href="#创建用户"></a> 创建用户</h1><p><code>create user 用户名 identified by 'password';</code></p><h1 id="创建schema"><a class="markdownIt-Anchor" href="#创建schema"></a> 创建schema</h1><p><code>create schema 数据库名 default character set utf8mb4 collate utf8mb4_general_ci;</code></p><h1 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h1><p><code>grant all on 数据库名.* to '用户名'@'%';</code></p><h2 id="精细授权"><a class="markdownIt-Anchor" href="#精细授权"></a> 精细授权</h2><p><code>grant select,insert,update,delete on *.* to 用户名@'%' Identified by &quot;password&quot;;</code></p><h1 id="刷新授权"><a class="markdownIt-Anchor" href="#刷新授权"></a> 刷新授权</h1><p><code>flush privileges;</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot快捷打包与启动脚本</title>
      <link href="posts/1E4Y9VE/"/>
      <url>posts/1E4Y9VE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="pom添加打包插件"><a class="markdownIt-Anchor" href="#pom添加打包插件"></a> POM添加打包插件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!--名字任意 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span><span class="comment">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span>    </span><br><span class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="comment">&lt;!-- 只运行一次 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                     <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span> <span class="comment">&lt;!--描述文件路径--&gt;</span>  </span><br><span class="line">                          <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>描述文件路径/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h1 id="添加描述文件"><a class="markdownIt-Anchor" href="#添加描述文件"></a> 添加描述文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>full<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个id会出现在zip包名称的后面，zip的完整名是：pom.xml中的artifactId-version-id.zip --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--支持的打包格式有zip、tar、tar.gz (or tgz)、tar.bz2 (or tbz2)、jar、dir、war--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span> <span class="comment">&lt;!--放在哪--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--源目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  <span class="comment">&lt;!--代码的jar包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bin脚本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/../../docs/build/bin/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  <span class="comment">&lt;!--把shell脚本打进去--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--config目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/../../docs/build/config/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--deploy说明目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;deploy<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/../../docs/build/deploy/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.md<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动脚本"><a class="markdownIt-Anchor" href="#启动脚本"></a> 启动脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">JDK_HOME=&quot;java&quot;</span><br><span class="line">VM_OPTS=&quot;-Xms2048m -Xmx2048m&quot;</span><br><span class="line">SPB_OPTS=&quot;&quot;</span><br><span class="line">APP_LOCATION=&quot;&quot;</span><br><span class="line">APP_NAME=&quot;&quot;</span><br><span class="line">PID=&quot;&quot;</span><br><span class="line">LOG_PATH=&quot;&quot;</span><br><span class="line">APP_HOME=&quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化脚本所需信息</span></span><br><span class="line">init() &#123;</span><br><span class="line"> APP_HOME=$(cd `dirname $0`/../; pwd)</span><br><span class="line"> APP_NAME=$(basename &quot;$(find &quot;$APP_HOME&quot; -name &#x27;*.jar&#x27; | head -1 |awk &#x27; &#123;print $NF&#125;&#x27;)&quot;)</span><br><span class="line"> APP_LOCATION=$(readlink -f &quot;$APP_HOME/$APP_NAME&quot;)</span><br><span class="line"> LOG_PATH=&quot;$APP_HOME/logs/&quot;</span><br><span class="line"> if [ ! -f &quot;$APP_LOCATION&quot; ];</span><br><span class="line">  then</span><br><span class="line">    echo &quot;[Error] file not found $APP_LOCATION&quot;</span><br><span class="line">    exit 0</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载config目录下的startup.conf文件</span></span><br><span class="line">loadProp()&#123;</span><br><span class="line">  APP_HOME=$(cd `dirname $0`/../; pwd)</span><br><span class="line">  PROP_FILE=&quot;$APP_HOME/config/startup.properties&quot;</span><br><span class="line">  if [ -f &quot;$PROP_FILE&quot; ];</span><br><span class="line">  then</span><br><span class="line">    SPB_OPTS=$(echo `xargs &lt; $APP_HOME/config/startup.properties`|tr &#x27;\r&#x27; &#x27; &#x27;|tr &#x27;\n&#x27; &#x27; &#x27;)</span><br><span class="line">    echo &quot;load properties success $SPB_OPTS&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">loadProp</span><br><span class="line"></span><br><span class="line">confirm()&#123;</span><br><span class="line">  info</span><br><span class="line">  read -n1 -p &quot;Do you want to continue $1 [Y/N]? &quot; answer</span><br><span class="line">  case $answer in</span><br><span class="line">  Y|y)</span><br><span class="line">    echo &quot;start $1 &quot;;;</span><br><span class="line">  N|n)</span><br><span class="line">    echo &quot;cancel $1&quot;</span><br><span class="line">    exit 0</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;error choice&quot;;;</span><br><span class="line">  esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取PID</span></span><br><span class="line">getPid()&#123;</span><br><span class="line">  PID=$(ps -ef | grep &quot;$APP_LOCATION&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line"> echo &quot;=============================start==============================&quot;</span><br><span class="line"> getPid</span><br><span class="line"> if [[ -n $PID ]]; then</span><br><span class="line">    echo &quot;$APP_LOCATION is already running,PID is $PID&quot;</span><br><span class="line"> else</span><br><span class="line">    loadProp</span><br><span class="line">    if [ ! -e &quot;$LOG_PATH&quot; ]; then</span><br><span class="line">      mkdir &quot;$LOG_PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;Starting $APP_LOCATION  SPB_OPTS[$SPB_OPTS] ...&quot;</span><br><span class="line">    nohup $JDK_HOME -jar $SPB_OPTS $APP_LOCATION  &gt;$LOG_PATH/start.out 2&gt;&amp;1 &amp;</span><br><span class="line">    getPid</span><br><span class="line">    if [[ -n $PID ]]; then</span><br><span class="line">       echo &quot;Start $APP_LOCATION successfully,PID is $PID&quot;</span><br><span class="line">    else</span><br><span class="line">       echo &quot;Failed to start $APP_LOCATION !!!&quot;</span><br><span class="line">    fi</span><br><span class="line"> fi</span><br><span class="line"> echo &quot;=============================start==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line"> echo &quot;=============================stop==============================&quot;</span><br><span class="line"> getPid</span><br><span class="line"> if [[ -n $PID ]]; then</span><br><span class="line">    kill -15 &quot;$PID&quot;</span><br><span class="line">    sleep 5</span><br><span class="line">    getPid</span><br><span class="line">    if [[ -n $PID ]]; then</span><br><span class="line">      echo &quot;Stop $APP_LOCATION failed by kill -15 $PID,begin to kill -9 $PID&quot;</span><br><span class="line">      kill -9 &quot;$PID&quot;</span><br><span class="line">      sleep 1</span><br><span class="line">      echo &quot;Stop $APP_LOCATION successfully by kill -9 $PID&quot;</span><br><span class="line">    else</span><br><span class="line">      echo &quot;Stop $APP_LOCATION successfully by kill -15 $PID&quot;</span><br><span class="line">    fi</span><br><span class="line"> else</span><br><span class="line">    echo &quot;$APP_LOCATION is not running!!!&quot;</span><br><span class="line"> fi</span><br><span class="line"> echo &quot;=============================stop==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart() &#123;</span><br><span class="line">  echo &quot;=============================restart==============================&quot;</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  echo &quot;=============================restart==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deploy()&#123;</span><br><span class="line">  echo &quot;=============================deploy==============================&quot;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 检查当前运行状态</span></span><br><span class="line">  getPid</span><br><span class="line">  if [[ -n $PID ]]; then</span><br><span class="line">    echo &quot;app is running, stopping app $APP_LOCATION&quot;</span><br><span class="line">    stop</span><br><span class="line">  fi</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 检查待部署文件</span></span><br><span class="line">  DEPLOY_FILE=&quot;$APP_HOME/deploy/$APP_NAME&quot;</span><br><span class="line">  if [ -f &quot;$DEPLOY_FILE&quot; ]; then</span><br><span class="line">    # 开始备份APP</span><br><span class="line">    echo &quot;start to backup app $APP_LOCATION&quot;</span><br><span class="line">    BACKUP_DIR=&quot;$APP_HOME/backup/$(date &quot;+%Y/%m/%d/%H%M%S&quot;)/&quot;</span><br><span class="line">    mkdir -p &quot;$BACKUP_DIR&quot;</span><br><span class="line">    mv &quot;$APP_LOCATION&quot; &quot;$BACKUP_DIR&quot;</span><br><span class="line">    echo &quot;backup success , path : $BACKUP_DIR$APP_NAME&quot;</span><br><span class="line">    # 开始移动待部署文件</span><br><span class="line">    mv &quot;$DEPLOY_FILE&quot; &quot;$APP_LOCATION&quot;</span><br><span class="line">  fi</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 启动应用</span></span><br><span class="line">  start</span><br><span class="line">  echo &quot;=============================deploy==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status() &#123;</span><br><span class="line">  echo &quot;=============================status==============================&quot;</span><br><span class="line">  getPid</span><br><span class="line">  if [[ -n $PID ]]; then</span><br><span class="line">       echo &quot;$APP_LOCATION is running,PID is $PID&quot;</span><br><span class="line">  else</span><br><span class="line">       echo &quot;$APP_LOCATION is not running!!!&quot;</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;=============================status==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log()&#123;</span><br><span class="line">  tail -200f &quot;$LOG_PATH/start.out&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info() &#123;</span><br><span class="line">  echo &quot;=============================info==============================&quot;</span><br><span class="line">  echo &quot;APP_LOCATION: $APP_LOCATION&quot;</span><br><span class="line">  echo &quot;APP_NAME: $APP_NAME&quot;</span><br><span class="line">  echo &quot;JDK_HOME: $JDK_HOME&quot;</span><br><span class="line">  echo &quot;VM_OPTS: $VM_OPTS&quot;</span><br><span class="line">  echo &quot;SPB_OPTS: $SPB_OPTS&quot;</span><br><span class="line">  echo &quot;LOG_PATH: $LOG_PATH&quot;</span><br><span class="line">  echo &quot;=============================info==============================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">help() &#123;</span><br><span class="line">   echo &quot;start: start server&quot;</span><br><span class="line">   echo &quot;stop: shutdown server&quot;</span><br><span class="line">   echo &quot;restart: restart server&quot;</span><br><span class="line">   echo &quot;status: display status of server&quot;</span><br><span class="line">   echo &quot;info: display info of server&quot;</span><br><span class="line">   echo &quot;help: help info&quot;</span><br><span class="line">   echo &quot;deploy: stop|backup|start server&quot;</span><br><span class="line">   echo &quot;log: show log&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">  confirm &quot;$1&quot;</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">  confirm &quot;$1&quot;</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line">restart)</span><br><span class="line">  confirm &quot;$1&quot;</span><br><span class="line">  restart</span><br><span class="line">  ;;</span><br><span class="line">status)</span><br><span class="line">  status</span><br><span class="line">  ;;</span><br><span class="line">info)</span><br><span class="line">  info</span><br><span class="line">  ;;</span><br><span class="line">help)</span><br><span class="line">  help</span><br><span class="line">  ;;</span><br><span class="line">deploy)</span><br><span class="line">  confirm &quot;$1&quot;</span><br><span class="line">  deploy</span><br><span class="line">  ;;</span><br><span class="line">log)</span><br><span class="line">  log</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  help</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure><h1 id="步骤总结"><a class="markdownIt-Anchor" href="#步骤总结"></a> 步骤总结</h1><ol><li>引入assembly插件</li><li>指定assembly配置文件路径</li><li>assembly中指定bin脚本与Jar包，使得maven package时将文件打入压缩包内</li><li>创建要使用的bin脚本</li><li>后续maven package 时将自动打zip包</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java敏感词之DFA算法</title>
      <link href="posts/2MA9B8A/"/>
      <url>posts/2MA9B8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="敏感词之dfa算法"><a class="markdownIt-Anchor" href="#敏感词之dfa算法"></a> 敏感词之DFA算法</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>DFA 即 Deterministic Finite Automaton，也就是确定有穷自动机。根源在于建立树形词库模型，树形词库检索优于循环检索</p><h2 id="构建算法模型"><a class="markdownIt-Anchor" href="#构建算法模型"></a> 构建算法模型</h2><p>DFA需要创建一个词库模型，模型JSON如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;中&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;国&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;人&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;民&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;解&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;放&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;军&quot;</span>:&#123;</span><br><span class="line">                                <span class="attr">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;T&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;E&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;W&quot;</span>:<span class="number">1</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;解&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;放&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;军&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;T&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;E&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;W&quot;</span>:<span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;人&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;民&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;子&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;弟&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;兵&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;T&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;E&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;W&quot;</span>:<span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;解&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;放&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;军&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;C&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;T&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;E&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;W&quot;</span>:<span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建步骤说明"><a class="markdownIt-Anchor" href="#构建步骤说明"></a> 构建步骤说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">开始((开始)) --&gt; 读取当前字符</span><br><span class="line">读取当前字符 --&gt; 模型中是否存在当前字符&gt;模型中是否存在当前字符]</span><br><span class="line">    模型中是否存在当前字符 --存在--&gt; 设置当前词库上级为模型中已定义的信息</span><br><span class="line">    设置当前词库上级为模型中已定义的信息--&gt; 是否已读取结束</span><br><span class="line">    模型中是否存在当前字符 --不存在--&gt; 创建模型并添加</span><br><span class="line">    创建模型并添加--&gt; 设置当前词库上级为模型中已定义的信息</span><br><span class="line">    是否已读取结束 --是--&gt; 结束((结束))</span><br><span class="line">    是否已读取结束 --否--&gt; 读取当前字符</span><br></pre></td></tr></table></figure><h2 id="检索词"><a class="markdownIt-Anchor" href="#检索词"></a> 检索词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">START(开始) --&gt; READ_CAHRS(&quot;读取检索词char&quot;)</span><br><span class="line">READ_CAHRS --&gt; IS_EXISTS(模型中是否存在)</span><br><span class="line">IS_EXISTS --存在--&gt; 向下读取(记录当前下标并循环向下读取模型)</span><br><span class="line">IS_EXISTS --不存在--&gt; 结束(结束)</span><br><span class="line">向下读取 --&gt; WORD_END(模型中词结束,表示找到了词库中的词)</span><br><span class="line">WORD_END --&gt; 结束</span><br></pre></td></tr></table></figure><h2 id="完全代码"><a class="markdownIt-Anchor" href="#完全代码"></a> 完全代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.startx.http.wordfilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * DFA算法实现</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022/8/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DfaWordFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Character, Object&gt; wordMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DfaWordFilter <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DfaWordFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ignore</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(WordType wordType, String... words)</span> </span>&#123;</span><br><span class="line">        addWord(wordType, <span class="string">&quot;&quot;</span>, <span class="number">1</span>, words);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加词库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordType  词类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordClass 词性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight    权重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words     词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(WordType wordType, String wordClass, <span class="keyword">int</span> weight, String... words)</span> </span>&#123;</span><br><span class="line">        addWord(wordType, wordClass, weight, <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(words)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加词库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordType  词类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordClass 词性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight    权重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words     词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(WordType wordType, String wordClass, <span class="keyword">int</span> weight, Set&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上级Map</span></span><br><span class="line">        Map lastMap;</span><br><span class="line">        <span class="comment">// 文字不存在时用于创建新Map</span></span><br><span class="line">        Map newWordMap;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="comment">// 初始化上级为所有文字map</span></span><br><span class="line">            lastMap = wordMap;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> length = chars.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = chars[i];</span><br><span class="line">                <span class="comment">// 查看上级Map是否已存在该词</span></span><br><span class="line">                Object wordMap = lastMap.get(c);</span><br><span class="line">                <span class="comment">// 存在则使用本字符不处理，直接使用存在的map</span></span><br><span class="line">                <span class="keyword">if</span> (wordMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lastMap = (Map) wordMap;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 不存在则创建一个Map</span></span><br><span class="line">                    newWordMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">                    <span class="comment">// 默认当前字未结束，如果单字，下方的判断会重置为Yes</span></span><br><span class="line">                    <span class="comment">// newWordMap.put(Constants.IS_END, Constants.NO);</span></span><br><span class="line">                    <span class="comment">// 本级设置到上级Map中并开始下级</span></span><br><span class="line">                    lastMap.put(c, newWordMap);</span><br><span class="line">                    lastMap = newWordMap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 词结束时设置是否结束与词类型</span></span><br><span class="line">                <span class="keyword">if</span> (i == length - <span class="number">1</span>) &#123;</span><br><span class="line">                    lastMap.put(Constants.IS_END, Constants.YES);</span><br><span class="line">                    lastMap.put(Constants.WORD_TYPE, wordType.getValue());</span><br><span class="line">                    lastMap.put(Constants.WORD_CLASS, wordClass);</span><br><span class="line">                    lastMap.put(Constants.WORD_WEIGHT, weight);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">highlight</span><span class="params">(<span class="keyword">final</span> String word, <span class="keyword">final</span> <span class="keyword">int</span> skip, <span class="keyword">final</span> String prefix, <span class="keyword">final</span> String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">        List&lt;SearchResult&gt; search = search(word, skip, WordType.BLACK_WORD);</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (SearchResult searchResult : search) &#123;</span><br><span class="line">            <span class="comment">// 拼接区间原始数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = current; i &lt; searchResult.getWordStartIndex(); i++) &#123;</span><br><span class="line">                result.append(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 前缀</span></span><br><span class="line">            result.append(prefix);</span><br><span class="line">            <span class="comment">// 拼接原始数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = searchResult.getWordStartIndex(); i &lt;= searchResult.getWordEndIndex(); i++) &#123;</span><br><span class="line">                result.append(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 拼接后缀</span></span><br><span class="line">            result.append(suffix);</span><br><span class="line">            current = searchResult.getWordEndIndex() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = current; i &lt; chars.length; i++) &#123;</span><br><span class="line">            result.append(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SearchResult&gt; <span class="title">search</span><span class="params">(<span class="keyword">final</span> String word, <span class="keyword">final</span> <span class="keyword">int</span> skip, WordType... wordTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> word != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">assert</span> skip &gt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">assert</span> wordTypes != <span class="keyword">null</span> &amp;&amp; wordTypes.length &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">assert</span> !<span class="string">&quot;&quot;</span>.equals(word);</span><br><span class="line">        <span class="keyword">char</span>[] charArray = word.toCharArray();</span><br><span class="line">        List&lt;SearchResult&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 查询词</span></span><br><span class="line">            SearchResult searchResult = searchWord(charArray, i, skip);</span><br><span class="line">            <span class="comment">// 没找到跳过</span></span><br><span class="line">            <span class="keyword">if</span> (!searchResult.isFound()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 整理需要查询的词类型</span></span><br><span class="line">            Set&lt;String&gt; wordTypeSet = Arrays.stream(wordTypes).map(WordType::getValue).collect(Collectors.toSet());</span><br><span class="line">            <span class="comment">// 不包含当前词类型则跳过</span></span><br><span class="line">            <span class="keyword">if</span> (!wordTypeSet.contains(searchResult.getWordType())) &#123;</span><br><span class="line">                i = searchResult.getWordEndIndex();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            results.add(searchResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索词</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chars 词array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skip  模糊次数（skip=1时 中华人民 可以匹配 中华的人民）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 搜索结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchResult <span class="title">searchWord</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span>[] chars, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> skip)</span> </span>&#123;</span><br><span class="line">        SearchResult searchResult = <span class="keyword">new</span> SearchResult();</span><br><span class="line">        <span class="comment">// 跳跃次数</span></span><br><span class="line">        <span class="keyword">int</span> skipCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 上一个字的map</span></span><br><span class="line">        Map lastMap = wordMap;</span><br><span class="line">        <span class="comment">// 文字长度</span></span><br><span class="line">        <span class="keyword">int</span> length = chars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 已跳跃足够次数，未找到对应词</span></span><br><span class="line">            <span class="keyword">if</span> (skipCount &gt; skip) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> word = chars[i];</span><br><span class="line">            Map wordTree = (Map) lastMap.get(word);</span><br><span class="line">            <span class="comment">// 第一次查询，且未找到以首字符开头的词树，跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (i == start &amp;&amp; wordTree == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 未找到词树，跳过本次，开始下一个字</span></span><br><span class="line">            <span class="keyword">if</span> (wordTree == <span class="keyword">null</span>) &#123;</span><br><span class="line">                skipCount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 跳过次数重置</span></span><br><span class="line"><span class="comment">//            skipCount = 0;</span></span><br><span class="line">            <span class="comment">// 找到字树，开始查询下一个字</span></span><br><span class="line">            lastMap = wordTree;</span><br><span class="line">            <span class="comment">// 记录当前下标</span></span><br><span class="line">            searchResult.getWordIndex().add(i);</span><br><span class="line">            <span class="comment">// 词库中词已结束，视为找到词</span></span><br><span class="line">            <span class="comment">// 黑名单不可直接跳出，有可能在白名单中</span></span><br><span class="line">            <span class="keyword">if</span> (Constants.YES.equals(wordTree.get(Constants.IS_END))) &#123;</span><br><span class="line">                searchResult.setFound(<span class="keyword">true</span>);</span><br><span class="line">                searchResult.setWordClass((String) wordTree.get(Constants.WORD_CLASS));</span><br><span class="line">                searchResult.setWordWeight(Integer.valueOf((String) wordTree.get(Constants.WORD_WEIGHT)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 整理词类型</span></span><br><span class="line">            String wordType = (String) wordTree.get(Constants.WORD_TYPE);</span><br><span class="line">            <span class="comment">// 设置词类型</span></span><br><span class="line">            searchResult.setWordType((String) wordTree.get(Constants.WORD_TYPE));</span><br><span class="line">            <span class="comment">// 如果是白名单，直接跳出，不再查询，否则继续查询黑名单</span></span><br><span class="line">            <span class="keyword">if</span> (WordType.WHITE_WORD.getValue().equals(wordType)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> searchResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> String wordType;</span><br><span class="line">        <span class="keyword">private</span> String wordClass;</span><br><span class="line">        <span class="keyword">private</span> Integer wordWeight;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; wordIndex = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> found;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFound</span><span class="params">(<span class="keyword">boolean</span> found)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.found = found;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getWordType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wordType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWordType</span><span class="params">(String wordType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.wordType = wordType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getWordIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wordIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWordIndex</span><span class="params">(List&lt;Integer&gt; wordIndex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.wordIndex = wordIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getWordClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wordClass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SearchResult <span class="title">setWordClass</span><span class="params">(String wordClass)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.wordClass = wordClass;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getWordWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wordWeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SearchResult <span class="title">setWordWeight</span><span class="params">(Integer wordWeight)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.wordWeight = wordWeight;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWordStartIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (wordIndex != <span class="keyword">null</span> &amp;&amp; !wordIndex.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> wordIndex.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWordEndIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (wordIndex != <span class="keyword">null</span> &amp;&amp; !wordIndex.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> wordIndex.get(wordIndex.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">WordType</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 黑名单，白名单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLACK_WORD(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;黑名单&quot;</span>),</span><br><span class="line">        WHITE_WORD(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;白名单&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">        WordType(String value, String description) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.description = description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value.equals(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WordType <span class="title">fromValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (WordType type : WordType.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (type.getValue().equals(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> type;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line">        String YES = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        String NO = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 词类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">char</span> WORD_TYPE = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否结束</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">char</span> IS_END = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 词性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">char</span> WORD_CLASS = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 词权重</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">char</span> WORD_WEIGHT = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DfaWordFilter dfaWordFilter = DfaWordFilter.create();</span><br><span class="line">        dfaWordFilter.addWord(WordType.BLACK_WORD, <span class="string">&quot;中国解放军&quot;</span>, <span class="string">&quot;人民解放军&quot;</span>, <span class="string">&quot;人民子弟兵&quot;</span>);</span><br><span class="line">        dfaWordFilter.addWord(WordType.WHITE_WORD, <span class="string">&quot;中国人民解放军&quot;</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(dfaWordFilter.wordMap));</span><br><span class="line">        String word = <span class="string">&quot;省检察院召开第三季度院务会，回顾总结前三季度工作情况，深入分析工作中存在的突出问题和短板弱项，明确四季度的工作重点和要求，动员全体干警立足主责主业、聚焦改革创新、强势推进落实、奋力夺冠争先，确保年度工作任务高质量圆满完成。省检察院党组书记、检察长杨景海主持会议，听取了院领导对分管工作的总结点评，研究部署下一步工作。巡视员、厅级干部、二级高级检察官、各内设机构、院属事业单位负责人参加会议。&quot;</span>;</span><br><span class="line">        String highlight = dfaWordFilter.highlight(word, <span class="number">0</span>, <span class="string">&quot;&lt;span class=\&quot;highlight\&quot;&gt;&quot;</span>, <span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">        System.out.println(highlight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx平滑升级</title>
      <link href="posts/EV5CZH/"/>
      <url>posts/EV5CZH/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="nginx-不停机平滑升级方式"><a class="markdownIt-Anchor" href="#nginx-不停机平滑升级方式"></a> Nginx 不停机平滑升级方式</h1><h2 id="查看原版本安装使用参数"><a class="markdownIt-Anchor" href="#查看原版本安装使用参数"></a> 查看原版本安装使用参数</h2><p><code>nginx -V</code></p><h2 id="下载新版nginx"><a class="markdownIt-Anchor" href="#下载新版nginx"></a> 下载新版Nginx</h2><p><a href="http://nginx.org/en/download.html">官方下载链接</a></p><h2 id="编译新编nginx"><a class="markdownIt-Anchor" href="#编译新编nginx"></a> 编译新编Nginx</h2><ol><li>配置 <code>./configure 启动参数</code> 例如 <code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module</code></li><li>编译 <code>make -j 8</code></li></ol><h2 id="更换nginx版本"><a class="markdownIt-Anchor" href="#更换nginx版本"></a> 更换nginx版本</h2><ol><li>备份旧版本，进入nginx安装目录，一般为 /usr/local/nginx/bin <code>mv nginx nginx.oldbak</code></li><li>复制新版 <code>mv 新版nginx编译目录/objs/nginx /usr/local/nginx/bin</code></li></ol><h2 id="平滑重启"><a class="markdownIt-Anchor" href="#平滑重启"></a> 平滑重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">test</span> -f /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid.oldbin</span><br><span class="line"><span class="built_in">kill</span> -QUIT `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><h2 id="检查升级结果"><a class="markdownIt-Anchor" href="#检查升级结果"></a> 检查升级结果</h2><p><code>ps -ef|grep nginx</code>显示时间应为当前时间</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus实现数据权限</title>
      <link href="posts/3SEFA3R/"/>
      <url>posts/3SEFA3R/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="mybatisplus实现数据权限"><a class="markdownIt-Anchor" href="#mybatisplus实现数据权限"></a> MybatisPlus实现数据权限</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>在管理系统中，我们经常要做数据权限限制，当前登录用户可以看哪一部分数据（一般为当前归属部门及其下级部门），但是每次做这样的功能都需要熟悉整个系统的权限规划，还要做很多重复性工作，是否可以将此功能封装起来呢？</p><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><p>使用MybatisPlus的拦截器，拦截每一个查询方法，并根据执行方法判断是否包含自定义的注解，<br />如果包含则将当前执行的SQL添加上自定义的数据权限筛选条件<br />步骤如下</p><ol><li>创建自定义注解</li><li>创建自定义拦截器</li><li>创建通用处理器接口（支持自定义处理逻辑）</li><li>将拦截器注册到MybatisPlus</li><li>添加工具类配合MybatisPlus的默认Wrapper使用</li></ol><h3 id="创建注解"><a class="markdownIt-Anchor" href="#创建注解"></a> 创建注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataScope &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     数据归属机构ID字段名</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">orgIdColumnName</span><span class="params">()</span> <span class="keyword">default</span> &quot;org_id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据创建人ID字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">createByColumnName</span><span class="params">()</span> <span class="keyword">default</span> &quot;create_by&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends DataPermissionHandler&gt; handler() <span class="keyword">default</span> DefaultDataPermissionHandler.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建拦截器"><a class="markdownIt-Anchor" href="#创建拦截器"></a> 创建拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataPermissionInterceptor</span> <span class="keyword">extends</span> <span class="title">JsqlParserSupport</span> <span class="keyword">implements</span> <span class="title">InnerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, DataScope&gt; DATA_SCOPE_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Method&gt; DATA_SCOPE_METHOD_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查找过一次，且不包含注解的方法缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; IGNORE_METHOD_CACHE = <span class="keyword">new</span> ConcurrentHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeQuery</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 没有注解不进行操作</span></span><br><span class="line">        DataScope dataScope = getDataScope(ms.getId());</span><br><span class="line">        <span class="keyword">if</span> (dataScope == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用 processSelect 使用 jsql处理SQL</span></span><br><span class="line">        PluginUtils.MPBoundSql mpBs = PluginUtils.mpBoundSql(boundSql);</span><br><span class="line">        mpBs.sql(parserSingle(mpBs.sql(), ms.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 真实处理逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processSelect</span><span class="params">(Select select, <span class="keyword">int</span> index, Object obj)</span> </span>&#123;</span><br><span class="line">        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class="line">        Expression where = plainSelect.getWhere();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用handler的方法名</span></span><br><span class="line">            <span class="keyword">final</span> String methodName = <span class="string">&quot;getSqlSegment&quot;</span>;</span><br><span class="line">            <span class="comment">// 调用handler的参数类型</span></span><br><span class="line">            <span class="keyword">final</span> Class[] methodParmeters = &#123;Expression.class, String.class, DataScope.class, Method.class&#125;;</span><br><span class="line">            <span class="comment">// 此处obj为beforeQuery方法中传入的ms.getId()，即为 mappedStatementId</span></span><br><span class="line">            <span class="keyword">final</span> String mappedStatementId = Func.toStr(obj);</span><br><span class="line">            <span class="comment">// 获取注解，如果可以走到这里说明注解一定不为空</span></span><br><span class="line">            DataScope dataScope = getDataScope(mappedStatementId);</span><br><span class="line">            <span class="comment">// 获取处理器并调用处理方法</span></span><br><span class="line">            Class&lt;? extends DataPermissionHandler&gt; handler = Objects.requireNonNull(dataScope).handler();</span><br><span class="line">            <span class="comment">// 获取处理方法，强制与 DataPermissionHandler 方法对应</span></span><br><span class="line">            Method getSqlSegmentMethod = ClassUtil.getDeclaredMethod(handler, methodName, methodParmeters);</span><br><span class="line">            Assert.notNull(getSqlSegmentMethod, <span class="string">&quot;[%s]未找到处理方法[%s]&quot;</span>, handler.getName(), methodName);</span><br><span class="line">            <span class="comment">// 当前执行的mapper方法，方法在获取 getDataScope 获取注解成功后缓存的</span></span><br><span class="line">            Method method = DATA_SCOPE_METHOD_CACHE.get(mappedStatementId);</span><br><span class="line">            Object sqlSegment = ReflectUtil.invoke(Singleton.get(handler), getSqlSegmentMethod, where, mappedStatementId, dataScope, method);</span><br><span class="line">            <span class="keyword">if</span> (Func.isNotEmpty(sqlSegment)) &#123;</span><br><span class="line">                plainSelect.setWhere((Expression) sqlSegment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 调用处理方法出现任何错误时，创建一个不可能实现的Where条件表达式，使其不能查出任何数据，并抛出异常</span></span><br><span class="line">            EqualsTo equalsTo = <span class="keyword">new</span> EqualsTo();</span><br><span class="line">            equalsTo.setLeftExpression(<span class="keyword">new</span> LongValue(<span class="number">1</span>));</span><br><span class="line">            equalsTo.setRightExpression(<span class="keyword">new</span> LongValue(<span class="number">2</span>));</span><br><span class="line">            plainSelect.setWhere(equalsTo);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前class与其所有实现的接口上的所有方法（由于Mybatis的Mapper都是接口）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAllMethod</span><span class="params">(List&lt;Class&gt; clazzs, List&lt;Method&gt; allMethods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clazzs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clazzs.forEach(c -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                allMethods.addAll(Arrays.asList(c.getMethods()));</span><br><span class="line">                Class[] interfaces = c.getInterfaces();</span><br><span class="line">                addAllMethod(Arrays.asList(interfaces), allMethods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据mappedStatementId获取方法上的注解,并加入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedStatementId mybatis的mappedStatementId 示例 top.kthirty.mapper.UserMapper.list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取注解，找不到时返回Null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DataScope <span class="title">getDataScope</span><span class="params">(String mappedStatementId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找过一次，未发现注解，不再查找</span></span><br><span class="line">        <span class="keyword">if</span>(IGNORE_METHOD_CACHE.contains(mappedStatementId))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DATA_SCOPE_CACHE.containsKey(mappedStatementId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> DATA_SCOPE_CACHE.get(mappedStatementId);</span><br><span class="line">        &#125;</span><br><span class="line">        String className = StringUtil.subBefore(mappedStatementId, StringPool.DOT, <span class="keyword">true</span>);</span><br><span class="line">        String methodName = StringUtil.subAfter(mappedStatementId, StringPool.DOT, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (Func.isAnyBlank(className, methodName)) &#123;</span><br><span class="line">            IGNORE_METHOD_CACHE.add(mappedStatementId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; aClass = ClassLoaderUtil.loadClass(Objects.requireNonNull(className));</span><br><span class="line">        <span class="keyword">if</span> (Func.isEmpty(aClass)) &#123;</span><br><span class="line">            IGNORE_METHOD_CACHE.add(mappedStatementId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Method&gt; allMethods = Lists.newLinkedList();</span><br><span class="line">        addAllMethod(Lists.newArrayList(aClass),allMethods);</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method m : allMethods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Func.equals(m.getName(),methodName))&#123;</span><br><span class="line">                method = m;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Func.isEmpty(method)) &#123;</span><br><span class="line">            IGNORE_METHOD_CACHE.add(mappedStatementId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DataScope annotation = Func.getAnnotation(method, DataScope.class);</span><br><span class="line">        <span class="keyword">if</span>(annotation == <span class="keyword">null</span>)&#123;</span><br><span class="line">            IGNORE_METHOD_CACHE.add(mappedStatementId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DATA_SCOPE_CACHE.put(mappedStatementId, annotation);</span><br><span class="line">        DATA_SCOPE_METHOD_CACHE.put(mappedStatementId, method);</span><br><span class="line">        <span class="keyword">return</span> annotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建通用处理器接口"><a class="markdownIt-Anchor" href="#创建通用处理器接口"></a> 创建通用处理器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataPermissionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取处理之后的where条件表达式，返回null时忽略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where 待执行的sql Where条件表达式，可能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedStatementId 全类名.方法名 一定不为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataScope 注解，进入处理方法时一定不为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 当前执行的查询方法，进入处理方法时一定不为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取处理之后的where条件表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Expression <span class="title">getSqlSegment</span><span class="params">(Expression where, String mappedStatementId, DataScope dataScope, Method method)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建默认的处理器"><a class="markdownIt-Anchor" href="#创建默认的处理器"></a> 创建默认的处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDataPermissionHandler</span> <span class="keyword">implements</span> <span class="title">DataPermissionHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG_PREFIX = <span class="string">&quot;默认数据权限处理器===&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Expression <span class="title">getSqlSegment</span><span class="params">(Expression where, String mappedStatementId, DataScope dataScope, Method method)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个字段都为空，无需验证</span></span><br><span class="line">        <span class="keyword">if</span>(Func.isNoneBlank(dataScope.createByColumnName(),dataScope.orgIdColumnName()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前登陆人</span></span><br><span class="line">        String currentUserId = Func.toStr(SecureUtil.getUserId());</span><br><span class="line">        <span class="comment">// 获取当前登陆人可以管理的机构ID</span></span><br><span class="line">        Set&lt;String&gt; currentManageOrgIds = DataScopeUtil.getManageOrgIds();</span><br><span class="line">        EqualsTo createByExpression = <span class="keyword">null</span>;</span><br><span class="line">        InExpression orgExpression = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 字段名不为空时处理</span></span><br><span class="line">        <span class="keyword">if</span>(Func.isNotBlank(dataScope.createByColumnName()))&#123;</span><br><span class="line">            createByExpression = <span class="keyword">new</span> EqualsTo();</span><br><span class="line">            createByExpression.setLeftExpression(<span class="keyword">new</span> Column(dataScope.createByColumnName()));</span><br><span class="line">            createByExpression.setRightExpression(<span class="keyword">new</span> StringValue(currentUserId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字段名不为空时处理</span></span><br><span class="line">        <span class="keyword">if</span>(Func.isNotBlank(dataScope.orgIdColumnName()))&#123;</span><br><span class="line">            orgExpression = <span class="keyword">new</span> InExpression(<span class="keyword">new</span> Column(dataScope.orgIdColumnName())</span><br><span class="line">                    ,<span class="keyword">new</span> ExpressionList(currentManageOrgIds.stream().map(LongValue::<span class="keyword">new</span>).collect(Collectors.toList())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两种都存在</span></span><br><span class="line">        <span class="keyword">if</span>(createByExpression != <span class="keyword">null</span> &amp;&amp; orgExpression != <span class="keyword">null</span>)&#123;</span><br><span class="line">            OrExpression dataPermission = <span class="keyword">new</span> OrExpression(createByExpression,orgExpression);</span><br><span class="line">            <span class="keyword">return</span> Func.isNull(where)?dataPermission:<span class="keyword">new</span> AndExpression(where,dataPermission);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有创建人</span></span><br><span class="line">        <span class="keyword">if</span>(createByExpression != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Func.isNull(where)?createByExpression:<span class="keyword">new</span> AndExpression(where,createByExpression);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有机构</span></span><br><span class="line">        <span class="keyword">if</span>(orgExpression != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Func.isNull(where)?orgExpression:<span class="keyword">new</span> AndExpression(where,orgExpression);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(LOG_PREFIX+<span class="string">&quot;系统逻辑处理异常，请检查&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将拦截器注册到mybatisplus"><a class="markdownIt-Anchor" href="#将拦截器注册到mybatisplus"></a> 将拦截器注册到MybatisPlus</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(MybatisPlusInterceptor.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">    <span class="comment">// 添加数据权限拦截器(数据权限拦截器必须在分页之前)</span></span><br><span class="line">    mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> DataPermissionInterceptor());</span><br><span class="line">    <span class="comment">// 新版分页插件必须指定数据库方言 V3.5.1</span></span><br><span class="line">    mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据权限工具类"><a class="markdownIt-Anchor" href="#数据权限工具类"></a> 数据权限工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataScopeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    使用方法 ： orgService.list(DataScopeUtil.getDataScopeQuery(null,Org::getId))</span></span><br><span class="line"><span class="comment">     * 获取加入数据权限的query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createByColumn 创建人字段 , 传入null不做筛选</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orgIdColumn 机构ID字段 ，传入null不做筛选</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 当前查询的实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取包含数据权限的query</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">LambdaQueryWrapper&lt;T&gt; <span class="title">getDataScopeQuery</span><span class="params">(SFunction&lt;T,?&gt; createByColumn,SFunction&lt;T,?&gt; orgIdColumn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SecureUtil.isAdministrator())&#123;</span><br><span class="line">            <span class="keyword">return</span> Wrappers.lambdaQuery();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Wrappers.&lt;T&gt;lambdaQuery()</span><br><span class="line">                .eq(Func.notNull(createByColumn),createByColumn, SecureUtil.getUserId())</span><br><span class="line">                .or()</span><br><span class="line">                .in(Func.notNull(orgIdColumn),orgIdColumn, getManageOrgIds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 架构 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合Dubbo常见错误</title>
      <link href="posts/1130Q4/"/>
      <url>posts/1130Q4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="dubbo整合常见错误"><a class="markdownIt-Anchor" href="#dubbo整合常见错误"></a> Dubbo整合常见错误</h1><h2 id="本地ip获取失败"><a class="markdownIt-Anchor" href="#本地ip获取失败"></a> 本地IP获取失败</h2><h3 id="错误详情"><a class="markdownIt-Anchor" href="#错误详情"></a> 错误详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-05-16 17:10:42.915  INFO 26664 --- [           main] org.apache.dubbo.config.ServiceConfig    :  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.8, current host: 192.168.125.116</span><br></pre></td></tr></table></figure><h3 id="错误原因"><a class="markdownIt-Anchor" href="#错误原因"></a> 错误原因</h3><p>org.apache.dubbo.config.ServiceConfig#findConfigedHosts方法中hostToBind = provider.getHost();获取生产者IP失败，该问题只出现于Dubbo程序与Nacos服务端Ip不一致的情况下</p><h3 id="解决方式"><a class="markdownIt-Anchor" href="#解决方式"></a> 解决方式</h3><p>在配置文件中添加<br />dubbo.protocol.host=本机IP</p><h2 id="本机注册ip失败"><a class="markdownIt-Anchor" href="#本机注册ip失败"></a> 本机注册IP失败</h2><p>由于多网卡原因，可能会导致获取IP错误，请禁用无用网卡，或将正确联网网卡顺序调整为第一位。</p><h2 id="消费者启动时找不到对应的生产者"><a class="markdownIt-Anchor" href="#消费者启动时找不到对应的生产者"></a> 消费者启动时找不到对应的生产者</h2><h3 id="错误详情-2"><a class="markdownIt-Anchor" href="#错误详情-2"></a> 错误详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No provider available for the service top.kthirty.demo.alibaba.dubbo.provider.service.IEchoService:1.0.0 from the url registry:&#x2F;&#x2F;localhost:9090&#x2F;org.apache.dubbo.registry</span><br></pre></td></tr></table></figure><h3 id="错误原因-2"><a class="markdownIt-Anchor" href="#错误原因-2"></a> 错误原因</h3><p>消费者在生产者之前启动时会出现这个问题，由于消费者启动时默认检查服务有效性</p><h3 id="解决方式-2"><a class="markdownIt-Anchor" href="#解决方式-2"></a> 解决方式</h3><p>添加<code>dubbo.consumer.check=false</code>禁用检查，生产者启动后可以正常使用</p><h2 id="订阅多services警告"><a class="markdownIt-Anchor" href="#订阅多services警告"></a> 订阅多Services警告</h2><h3 id="警告详情"><a class="markdownIt-Anchor" href="#警告详情"></a> 警告详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Current application will subscribe all services(size:0) in registry</span><br></pre></td></tr></table></figure><h3 id="出现原因"><a class="markdownIt-Anchor" href="#出现原因"></a> 出现原因</h3><p>由于应用未指定订阅的应用，dubbo会自动订阅所有应用</p><h3 id="解决方式-3"><a class="markdownIt-Anchor" href="#解决方式-3"></a> 解决方式</h3><p>添加<code>dubbo.cloud.subscribed-services</code>配置（该警告不会影响正常使用）</p><h2 id="随机端口失败"><a class="markdownIt-Anchor" href="#随机端口失败"></a> 随机端口失败</h2><h3 id="错误详情-3"><a class="markdownIt-Anchor" href="#错误详情-3"></a> 错误详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to bind NettyServer on &#x2F;192.168.125.116:20880, cause: Address already in use</span><br></pre></td></tr></table></figure><h3 id="错误原因-3"><a class="markdownIt-Anchor" href="#错误原因-3"></a> 错误原因</h3><p>由于多网卡原因可能会导致随机IP失败，20880端口在程序测试时永远未被占用</p><h3 id="解决方式-4"><a class="markdownIt-Anchor" href="#解决方式-4"></a> 解决方式</h3><p>添加<code>dubbo.protocol.port</code>配置，不要使用-1，使用正确未被占用的端口</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 架构 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KTHIRTY </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Netty</title>
      <link href="posts/09PV7W/"/>
      <url>posts/09PV7W/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初识netty"><a class="markdownIt-Anchor" href="#初识netty"></a> 初识Netty</h1><p>本篇简单介绍一下Netty，使用Netty简单做一个实例程序。</p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>官方的介绍：<br />Netty is an asynchronous event-driven network application framework<br />for rapid development of maintainable high performance protocol servers &amp; clients.<br />Netty是 一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p><h1 id="创建maven项目"><a class="markdownIt-Anchor" href="#创建maven项目"></a> 创建Maven项目</h1><h2 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.63.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建服务端"><a class="markdownIt-Anchor" href="#创建服务端"></a> 创建服务端</h2><h3 id="创建服务端启动类"><a class="markdownIt-Anchor" href="#创建服务端启动类"></a> 创建服务端启动类</h3><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRA(创建线程组)--&gt;B(创建ServerBootstrap)B--&gt;C(为Bootstrap设置线程组)C--&gt;D(设置通道实现类型)D--&gt;E(设置option参数)E(设置option参数)--&gt;F(设置自定义Handler流水线)F--&gt;G(绑定端口)G--&gt;H(启动服务端)H--&gt;I(等待通讯结束关闭线程组)  </pre></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建服务端所需的两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务端启动对象并设置所需参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">// 设置两个线程组，bossGroup和workerGroup </span></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    <span class="comment">// 设置服务端通道实现类型</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    <span class="comment">// 设置线程队列链接数</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    <span class="comment">// 这是保持活动链接状态</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    <span class="comment">// 使用匿名内部类初始化通道对象</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// 设置自定义信息处理器</span></span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Netty服务端准备就绪---&quot;</span>);</span><br><span class="line">            <span class="comment">// 绑定端口号并启动</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">5555</span>).sync();</span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建服务端信息处理器"><a class="markdownIt-Anchor" href="#创建服务端信息处理器"></a> 创建服务端信息处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到消息处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 通道上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端发送过来的消息</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端收到客户端&quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;发送的消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息处理结束方法，相应给客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 通道上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送消息给客户端</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;服务端已收到消息&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件出发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</span><br><span class="line">            IdleStateEvent event=(IdleStateEvent) evt;</span><br><span class="line">            System.out.println(event.state());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出现异常后的处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 回收通道上下文</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建客户端"><a class="markdownIt-Anchor" href="#创建客户端"></a> 创建客户端</h2><h3 id="创建客户端启动类"><a class="markdownIt-Anchor" href="#创建客户端启动类"></a> 创建客户端启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建所需线程组</span></span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 创建bootstrap对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">// 设置线程组</span></span><br><span class="line">            bootstrap.group(eventExecutors)</span><br><span class="line">                    <span class="comment">// 客户端消息实现类</span></span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    <span class="comment">// 构建消息处理器</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// 设置自定义消息处理器</span></span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;=====客户端准备就绪=====&quot;</span>);</span><br><span class="line">            <span class="comment">// 链接服务端</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">5555</span>).sync();</span><br><span class="line">            <span class="comment">// 监听通道关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭线程组</span></span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端消息处理器"><a class="markdownIt-Anchor" href="#创建客户端消息处理器"></a> 创建客户端消息处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渠道准备就绪后触发--自动发送一条消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;这里是来自客户端的消息&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到消息后的处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端收到服务端&quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;的消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bootstrap启动流程图"><a class="markdownIt-Anchor" href="#bootstrap启动流程图"></a> Bootstrap启动流程图</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRA(创建线程组)--&gt;B(创建ServerBootstrap)B--&gt;C(为Bootstrap设置线程组)C--&gt;D(设置通道实现类型)D--&gt;E(设置option参数)E(设置option参数)--&gt;F(设置自定义Handler流水线)F--&gt;G(绑定端口)G--&gt;H(启动服务端)H--&gt;I(等待通讯结束关闭线程组)  </pre></div><h1 id="netty的特性与重要组件"><a class="markdownIt-Anchor" href="#netty的特性与重要组件"></a> Netty的特性与重要组件</h1><h2 id="taskqueue任务队列"><a class="markdownIt-Anchor" href="#taskqueue任务队列"></a> TaskQueue任务队列</h2><p>如果Handler处理器有长时间的业务处理，可以使用TaskQueue异步处理。</p><h1 id="测试-结果"><a class="markdownIt-Anchor" href="#测试-结果"></a> 测试 &amp; 结果</h1><ol><li>MyServer启动后，启动MyServer的控制台会输出<code>----Netty服务端准备就绪---</code></li><li>MyClient启动后<ol><li>MyClient控制台打印<code>=====客户端准备就绪=====</code></li><li>MyServer控制台打印<code>服务端收到客户端/127.0.0.1:53000发送的消息：这里是来自客户端的消息</code> (由于客户端通道就绪后自动发送消息，故服务端收到了客户端的消息)</li><li>MyClient控制台打印<code>客户端收到服务端/127.0.0.1:5555的消息：服务端已收到消息</code> (此消息为服务端收到消息之后的响应)</li></ol></li></ol><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><a href="https://netty.io/index.html">Netty官网</a></li><li><a href="https://github.com/kthirty/JavaProject/tree/master/netty/netty-hello-world">本篇源码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目规划</title>
      <link href="posts/37RKQXY/"/>
      <url>posts/37RKQXY/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="微服务springcloudalibaba-项目规划"><a class="markdownIt-Anchor" href="#微服务springcloudalibaba-项目规划"></a> 微服务SpringCloudAlibaba-项目规划</h1><p>本篇持续更新，列举系统中所用到的模块，项目整体规划等…</p><h2 id="技术选型"><a class="markdownIt-Anchor" href="#技术选型"></a> 技术选型</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">组件</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">注册中心</td><td style="text-align:left">Nacos</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">链路调用</td><td style="text-align:left">Dubbo</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">链路追踪</td><td style="text-align:left">Sentinel</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">分布式事务</td><td style="text-align:left">Seata</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">消息</td><td style="text-align:left">RocketMQ</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">网关</td><td style="text-align:left">Gateway</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">部署</td><td style="text-align:left">Docker、Docker-Compose</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">任务调度</td><td style="text-align:left">XXL-JOB</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">鉴权</td><td style="text-align:left">Spring Security</td><td style="text-align:left"></td></tr></tbody></table><h2 id="需要部署的组件"><a class="markdownIt-Anchor" href="#需要部署的组件"></a> 需要部署的组件</h2><ul><li>Nacos</li><li>Sentinel</li><li>RocketMQ</li><li>Nexus</li><li>Nginx</li></ul><h2 id="项目目录"><a class="markdownIt-Anchor" href="#项目目录"></a> 项目目录</h2><ul><li>docs<ul><li>bin: 项目脚本</li><li>docker: 项目中需要部署的组件DockerCompose文件</li><li>readme：项目文档</li></ul></li><li>kthirty-common：项目基础用来统一设置项目环境变量，项目基础运行枚举，集成必须组件作为业务代码的父项目</li><li>kthirty-core:  项目核心封装<ul><li>kthirty-core-auto: 使用Google Auto Service解决核心包与主项目包名不同导致核心包中Bean、Configuration无法扫描问题（生成spring.factories利用Spring的Starter机制）</li><li>kthirty-core-boot: 应用启动必须要使用的组件封装以及基础项目配置信息，包括组件有：Nacos服务注册与发现、Sentinel链路追踪与流控、actuator健康检查、Dubbo服务调用</li><li>kthirty-core-tool: 应用工具类整合hutool、commons-lang3</li><li>kthirty-core-db: 应用数据库访问包</li></ul></li><li>kthirty-dependencies: 应用依赖管理</li><li>kthirty-parent: 应用统一父pom，不使用根目录下的pom作为父pom而创建parent项目是为了方便后期做项目拆分处理与开发人员权限管理。</li><li>kthirty-demo: 应用demo与结构搭建测试历程<ul><li>kthirty-demo-boot: 微服务原生启动与服务注册</li><li>kthirty-demo-boot-with-core: 使用核心包后的启动</li><li>kthirty-demo-sentinel: Sentinel测试</li><li>kthirty-demo-alibaba-dubbo-provider: Dubbo 调用生产者</li><li>kthirty-demo-alibaba-dubbo-consumer: Dubbo 调用消费者</li><li>kthirty-demo-alibaba-dubbo-provider-api: Dubbo 生产者api（service与entity）</li><li>kthirty-demo-alibaba-dubbo-provider-with-core: 使用核心包的生产者</li><li>kthirty-demo-alibaba-dubbo-consumer-with-core: 使用核心包的消费者</li><li>kthirty-demo-db: 数据库访问常规版</li><li>kthirty-demo-db-with-core: 数据库访问核心包版</li></ul></li></ul><h2 id="端口规划"><a class="markdownIt-Anchor" href="#端口规划"></a> 端口规划</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">组件</th><th style="text-align:left">端口</th></tr></thead><tbody><tr><td style="text-align:left">Nginx</td><td style="text-align:left">Nginx</td><td style="text-align:left">30</td></tr><tr><td style="text-align:left">注册中心</td><td style="text-align:left">Nacos</td><td style="text-align:left">10101</td></tr><tr><td style="text-align:left">链路追踪</td><td style="text-align:left">Sentinel</td><td style="text-align:left">10102</td></tr><tr><td style="text-align:left">Maven私服</td><td style="text-align:left">Nexus</td><td style="text-align:left">10103</td></tr><tr><td style="text-align:left">数据库</td><td style="text-align:left">Mysql</td><td style="text-align:left">10104</td></tr></tbody></table><h2 id="系统返回码规划"><a class="markdownIt-Anchor" href="#系统返回码规划"></a> 系统返回码规划</h2><p>返回码长度为6位，前两位为系统归属模块，后四位为0000-9999数字</p><ul><li>AA： 系统通用基础模块</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 架构 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开篇</title>
      <link href="posts/1FF1ZV9/"/>
      <url>posts/1FF1ZV9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="微服务springcloudalibaba-开篇"><a class="markdownIt-Anchor" href="#微服务springcloudalibaba-开篇"></a> 微服务SpringCloudAlibaba-开篇</h1><h2 id="这个项目是做什么的"><a class="markdownIt-Anchor" href="#这个项目是做什么的"></a> 这个项目是做什么的？</h2><p>其实是想做一个微服务架构的脚手架，只关注架构设计，不实现具体业务。大概涉及一下几点：</p><ol><li>技术选型</li><li>二次封装</li><li>代码分层</li><li>统一异常处理</li><li>统一响应风格</li><li>统一MQ</li><li>统一熔断、提示、日志存储</li><li>分布式事务</li><li>链路追踪</li><li>Oath2？</li><li>网关（流控、降级、削峰、认证？）</li><li>API接口文档</li><li>restful 接口规范</li></ol><h2 id="为什么要做这个项目"><a class="markdownIt-Anchor" href="#为什么要做这个项目"></a> 为什么要做这个项目？</h2><p>现在微服务大致分为三种：</p><ol><li>SpringCloud: Eureka、Feign、Hystrix…：全套生态，但是restful调用方式略弱于RPC，且部分组件已不再维护</li><li>Dubbo、Zookeeper : RPC调用，但非完整生态，需要东拼西凑出一套完整的微服务生态。</li><li>SpringCloudAlibaba: Nacos、Sentinel、Seata、Dubbo: 完整生态且更新正常，但是当前正在上升期尚未稳定，感觉前景还不错。</li></ol><p>目的其实为了整和出一个可拔插式的项目架构，允许后期变更，SpringCloudAlibaba构建一个完整的微服务生态，且兼容RPC和restful风格的调用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 架构 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的交换两个变量的数值</title>
      <link href="posts/G2YRVZ/"/>
      <url>posts/G2YRVZ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何优雅的交换两个变量的数值"><a class="markdownIt-Anchor" href="#如何优雅的交换两个变量的数值"></a> 如何优雅的交换两个变量的数值</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>今天说一个很常见的算法题，如何交换两个数字的数值。题目如下：</p><blockquote><p>现有两个变量，int a = 1,int b = 3;<br />如果交换两个变量使得 a = 3,b = 1;<br /><strong>说明: a1表示第一步结束后的a变量,a2表示第二步，依次类推，本篇全文适用</strong></p></blockquote><h2 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h2><h3 id="普通常用法"><a class="markdownIt-Anchor" href="#普通常用法"></a> 普通常用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br></pre></td></tr></table></figure><p>这种方法没什么说的，创建临时变量存储a值，将b值赋值给a变量，再从临时变量中将原a值赋值给b变量。交换完成。</p><h3 id="加减法"><a class="markdownIt-Anchor" href="#加减法"></a> 加减法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a+b;</span><br><span class="line">b = a-b;</span><br><span class="line">a = a-b;</span><br></pre></td></tr></table></figure><p>步骤分析:</p><ol><li>a1 = a+b</li><li>b2 = a1-b<br />b2 = a+b-b<br />b2 = a</li><li>a3 = a1-b2<br />a3 = a+b-a<br />a3 = b<br />利用两数之和减去其中一个等于另一个。但是这种方法容易越界。</li></ol><h3 id="乘除法"><a class="markdownIt-Anchor" href="#乘除法"></a> 乘除法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a*b;</span><br><span class="line">b = a/b;</span><br><span class="line">a = a/b;</span><br></pre></td></tr></table></figure><p>原理与加减法一致</p><h3 id="异或法"><a class="markdownIt-Anchor" href="#异或法"></a> 异或法</h3><p>主角来了！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a^=b;</span><br><span class="line">b^=a;</span><br><span class="line">a^=b;</span><br></pre></td></tr></table></figure><p>解析：<br />首先要了解异或的算法。</p><ol><li>任意一个变量X与其自身进行异或运算，结果为0，即X^X=0。</li><li>任意一个变量X与0进行异或运算，结果不变，即X^0=X</li><li>异或运算具有可结合性，即a<sup>b</sup>c=（a<sup>b）</sup>c=a<sup>（b</sup>c）</li><li>异或运算具有可交换性，即a<sup>b=b</sup>a<br />现在来分析运算步骤：</li><li>a^=b<ol><li>a1 = a^b;</li></ol></li><li>b^=a<ol><li>b2 = b^a1;</li><li>b2 = b<sup>a</sup>b;</li><li>b2 = a;(b<sup>b等于0且0</sup>a等于a)</li></ol></li><li>a^=b<ol><li>a3 = a1^b2;</li><li>a3 = a<sup>b</sup>a;</li><li>a3 = b;(a<sup>a=0且0</sup>b=b)</li></ol></li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>加减法与乘除法易越界、异或法效率最高。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题Butterfly升级记录</title>
      <link href="posts/52781/"/>
      <url>posts/52781/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hexo主题Butterfly版本升级到3.2.0</p><h1 id="更新方式"><a class="markdownIt-Anchor" href="#更新方式"></a> 更新方式</h1><p>由于想要由github的方式更换为npm插件方式，所以需要先清除旧版本，再安装新版本。<br />原来github的方式如果想要把博客源文件提交到github的话，git根目录下的子文件也存在git，会出现冲突，已经被困扰了很久。</p><h1 id="卸载旧版"><a class="markdownIt-Anchor" href="#卸载旧版"></a> 卸载旧版</h1><p>直接删除themes文件夹下的对应主题即可。注意<strong>记得先备份_data文件夹下的配置文件（_config.yml）</strong></p><h1 id="安装新版"><a class="markdownIt-Anchor" href="#安装新版"></a> 安装新版</h1><p>在博客根目录运行<code>npm i hexo-theme-butterfly --save</code> 安装插件并保存到<code>package.json</code>文件<br />（如需卸载请使用<code>npm uninstall hexo-theme-butterfly --save</code>）</p><h1 id="迁移配置"><a class="markdownIt-Anchor" href="#迁移配置"></a> 迁移配置</h1><p>在博客根目录添加<code>_config.butterfly.yml</code>文件，将旧配置文件<code>_config.yml</code>，删除无用项（与默认项相同的配置可以直接删除，默认项为插件主题文件夹下的_config.yml）</p><h1 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h1><ol><li>警告 <code>Deprecated config detected: &quot;use_date_for_updated&quot; is deprecated, please use &quot;updated_option&quot; instead. See https://hexo.io/docs/configuration for more details.</code> ， 因为<code>use_date_for_updated</code>项已废弃，请参阅<a href="https://hexo.io/zh-cn/docs/configuration#%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F">官方文档说明</a>，删除配置项即可</li><li>错误</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ERROR &#123;</span><br><span class="line">  err: D:\Develop\mine\Project\testblog\node_modules\hexo-theme-butterfly\package.json:2</span><br><span class="line">    &quot;_from&quot;: &quot;hexo-theme-butterfly&quot;,</span><br><span class="line">           ^</span><br><span class="line">  SyntaxError: Unexpected token &#39;:&#39;</span><br><span class="line">      at new Script (node:vm:100:7)</span><br><span class="line">      at createScript (node:vm:261:10)</span><br><span class="line">      at runInThisContext (node:vm:309:10)</span><br><span class="line">      at D:\Develop\mine\Project\testblog\node_modules\hexo\lib\hexo\index.js:303:18</span><br><span class="line">      at tryCatcher (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">      at Promise._settlePromiseFromHandler (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">      at Promise._settlePromise (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">      at Promise._settlePromise0 (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">      at Promise._settlePromises (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">      at _drainQueueStep (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">      at _drainQueue (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">      at Async._drainQueues (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">      at Immediate.Async.drainQueues [as _onImmediate] (D:\Develop\mine\Project\testblog\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">      at processImmediate (node:internal&#x2F;timers:462:21)</span><br><span class="line">&#125; Plugin load failed: %s hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>由于之前github方式安装的主题可以使用大写字母开头<code>Butterfly</code>，改为npm后如果使用<code>Butterfly</code>就会报错，请改为<code>butterfly</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo版本更新记录</title>
      <link href="posts/1VWF5B3/"/>
      <url>posts/1VWF5B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一次Hexo版本更新的记录，Hexo官方并无相关文档，实际很简单。</p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>Hexo是由npm管理的，熟练使用npm的没必要看这篇文章了。</p><h1 id="更新步骤"><a class="markdownIt-Anchor" href="#更新步骤"></a> 更新步骤</h1><p><strong>以下所有步骤，请在hexo根目录下操作</strong></p><ol><li><code>npm update -g</code> 更新全局安装的软件包（<code>hexo-cli</code>）</li><li><code>npm install -g npm-upgrade</code> 安装更新工具</li><li><code>npm-upgrade</code>执行更新，安装提示操作即可。<br />成功提示如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  These packages will be updated:</span><br><span class="line">  hexo                   ^4.2.1   →   ^5.2.0</span><br><span class="line">  hexo-generator-index   ^1.0.0   →   ^2.0.0</span><br><span class="line">  hexo-renderer-stylus   ^1.1.0   →   ^2.0.1</span><br><span class="line">  hexo-server            ^1.0.0   →   ^2.0.0</span><br><span class="line">? Update package.json? Yes</span><br></pre></td></tr></table></figure></li><li><code>npm update --save</code> 更新软件包并写入package.json</li><li><code>hexo version</code>查看版本验证结果。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minio文件服务器</title>
      <link href="posts/1ZMHFYY/"/>
      <url>posts/1ZMHFYY/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="minio"><a class="markdownIt-Anchor" href="#minio"></a> Minio</h1><h2 id="minio是什么"><a class="markdownIt-Anchor" href="#minio是什么"></a> Minio是什么？</h2><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。<br />分布式的文件存储系统，类似FastDFS、七牛云对象存储、阿里云对象存储…等等，可用于存储文件。</p><h2 id="为什么使用minio"><a class="markdownIt-Anchor" href="#为什么使用minio"></a> 为什么使用Minio？</h2><ol><li>支持分布式（多盘、多机）。</li><li>部署简单<code>docker run -p 9000:9000 minio/minio server /data</code>即可，比FastDFS简单多了。</li><li>MinIO存储桶通知功能：存储桶（Bucket）如果发生改变,比如上传对象和删除对象，可以使用存储桶事件通知机制进行监控。</li><li>支持多租户。</li><li>全面文档支持。</li></ol><h2 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>本篇采用Docker部署的方式，命令: <code>docker run -p 9000:9000 minio/minio server /data</code><br />访问ip:9000即可访问minio可视化界面，MINIO_ACCESS_KEY默认minioadmin，MINIO_SECRET_KEY默认minioadmin。</p><h3 id="java集成"><a class="markdownIt-Anchor" href="#java集成"></a> Java集成</h3><h4 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本使用方式"><a class="markdownIt-Anchor" href="#基本使用方式"></a> 基本使用方式</h3><h4 id="创建连接"><a class="markdownIt-Anchor" href="#创建连接"></a> 创建连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MinioClient instance = MinioClient.builder().endpoint(<span class="string">&quot;http://ip:port&quot;</span>).credentials(<span class="string">&quot;minioadmin&quot;</span>,<span class="string">&quot;minioadmin&quot;</span>).build();</span><br></pre></td></tr></table></figure><h4 id="桶操作"><a class="markdownIt-Anchor" href="#桶操作"></a> 桶操作</h4><h5 id="判断桶是否存在"><a class="markdownIt-Anchor" href="#判断桶是否存在"></a> 判断桶是否存在</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入桶名称</span></span><br><span class="line">instance.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build())</span><br></pre></td></tr></table></figure><h5 id="创建桶"><a class="markdownIt-Anchor" href="#创建桶"></a> 创建桶</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入桶名称，需要先判断桶是否存在，如果创建已存在的桶会报错</span></span><br><span class="line">instance.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br></pre></td></tr></table></figure><h5 id="删除桶"><a class="markdownIt-Anchor" href="#删除桶"></a> 删除桶</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入桶名称，需要先判断桶是否存在，如果删除不存在的桶会报错， removeBucket不会删除存储桶里的对象，删除非空桶报错</span></span><br><span class="line"> instance.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());</span><br></pre></td></tr></table></figure><h4 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h4><h5 id="本地文件上传"><a class="markdownIt-Anchor" href="#本地文件上传"></a> 本地文件上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">instance.uploadObject(UploadObjectArgs.builder().</span><br><span class="line">                bucket(bucket)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .filename(fileName).build());</span><br></pre></td></tr></table></figure><h5 id="流文件上传"><a class="markdownIt-Anchor" href="#流文件上传"></a> 流文件上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\\\Users\\\\G006648\\\\Pictures\\\\lufei.gif&quot;</span>);</span><br><span class="line">        InputStream out = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">instance.putObject(PutObjectArgs.builder()</span><br><span class="line">    .bucket(bucket)</span><br><span class="line">    .object(objectName)</span><br><span class="line">    .stream(out,file.length(),<span class="number">1024L</span>*<span class="number">10</span>*<span class="number">1024</span>) <span class="comment">//流、总大小、分次，每次上传文件大小</span></span><br><span class="line">    .contentType(contentType).build());</span><br></pre></td></tr></table></figure><h5 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件"></a> 删除文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.removeObject(RemoveObjectArgs.builder().bucket(bucket).object(object).build());</span><br></pre></td></tr></table></figure><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><a href="https://docs.min.io/cn/">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 文件存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minio </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星际蜗牛Nas折腾记录（二）</title>
      <link href="posts/46576/"/>
      <url>posts/46576/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一次星际蜗牛上群辉Nas折腾(二)</p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>经过上一篇（<a href="/posts/9610">星际蜗牛Nas折腾记录（一）</a>）之后，基础环境就算是完成了，使用域名已经可以访问nas服务器了。</p><h1 id="安装硬盘"><a class="markdownIt-Anchor" href="#安装硬盘"></a> 安装硬盘</h1><ol><li>拔出硬盘槽</li><li>螺丝固定硬盘（3.5英寸，2.5的好像需要硬盘架）</li><li>插回硬盘槽，固定硬盘</li><li>存储空间管理员添加插入的硬盘</li></ol><h1 id="安装套件"><a class="markdownIt-Anchor" href="#安装套件"></a> 安装套件</h1><p>群辉支持很多套件，下面推荐几个常用的。</p><ul><li>文本编辑器</li><li>Docker</li><li>Surveillance Station: 将移动设备变成摄像头并同步数据到Nas</li><li>Note Station : 云笔记</li><li>Download Station: 下载助手</li><li>Cloud Station Server： 同步工具，在电脑或者手机上下载客户端即可同步。</li></ul><h1 id="终端登录"><a class="markdownIt-Anchor" href="#终端登录"></a> 终端登录</h1><p>需要在控制面板-》终端机和SNMP中打开“启用SSH功能”，并设置端口，不要使用22端口，推荐配合“自动封锁”功能使用。更加安全。</p><p>登录命令<code>ssh &#123;nas登录用户名&#125;@&#123;nasIP或域名&#125; -p &#123;端口号&#125;</code>输入{nas登录密码}，登录成功后使用<code>sudo -i</code>再次输入密码可使用root用户执行命令。</p><h1 id="docker镜像"><a class="markdownIt-Anchor" href="#docker镜像"></a> Docker镜像</h1><h2 id="ddns"><a class="markdownIt-Anchor" href="#ddns"></a> ddns</h2><p>镜像用于同步阿里云解析设置，将nas公网ip设置到云解析中。</p><ul><li>镜像名称：newfuture-ddns</li><li>配置信息：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://ddns.newfuture.cc/schema/v2.8.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;dns&quot;</span>: <span class="string">&quot;alidns&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;index4&quot;</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;index6&quot;</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ipv4&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;nas.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nacos.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sentinel.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nexus.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;music.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gogs.kthirty.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nav.kthirty.top&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;ipv6&quot;</span>: [</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;secure&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ttl&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码托管"><a class="markdownIt-Anchor" href="#代码托管"></a> 代码托管</h2><p>gogs / gitea / gitlab<br />推荐gogs和gitea，这两个功能差不多，内存占用大概100M左右，都是开源go语言开发。</p><h2 id="在线音乐"><a class="markdownIt-Anchor" href="#在线音乐"></a> 在线音乐</h2><p>oldiy-music-player-docker<br />页面版播放器，公司网络不支持听歌的可以试试这个。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>Mysql、Nacos、sentinel（kthirty/sentinel自己上传的，更改密码）、nexus（可以使用内存限制功能，否则占用内存太高）、seata-server、nginx</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Nas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Nas </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星际蜗牛Nas折腾记录（一）</title>
      <link href="posts/9610/"/>
      <url>posts/9610/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一次星际蜗牛上群辉Nas折腾。</p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>好久没有更新博客了，并不是忘记了，最近一直在搭建一个架构，原本是开源的，结果后来弄外网后涉及很多个人的密码信息，选择了闭源，并将代码托管仓库由GitHub更换到个人搭建的Gogs，毕竟有了自己的服务器。此系列想记录一下本次折腾，本意想弄一个破电脑当成个人服务器的，租用的话配置一下挺麻烦的，自己弄虽说耗电，但是配置总比租的好一些。（还不是因为穷）</p><h2 id="配置选购"><a class="markdownIt-Anchor" href="#配置选购"></a> 配置选购</h2><p>原本想要组装一个台式长时间开机做内网穿透当做自己的服务器的。结果看了好久，需求也很明确，就是想要一个尺寸小的ITX，耗电量低一些，但是看了好久，消费最低也要500以上，尺寸也并不满意。无意间发现了星际蜗牛这个矿渣，所以开始在闲鱼上选购，起初买了一个380软妹币的星际蜗牛D款，批发商随机发货，成色太差，退货了，然后又看到一个周边的可自提的星际蜗牛B款双网口。430软妹币，不过好在电源跟风扇都改过了，也省的自己折腾了。（星际蜗牛的原装电源易烧硬盘，风扇声音大）系统也装了洗全白的群辉DS918，原本打算装Centos做服务的，发现群辉也有Docker组件，而且可以做个人文件同步，所以暂时不修改系统。另外需要买硬盘，因为星际蜗牛只有一个16G的系统盘，星际蜗牛安装硬盘也很简单，拔出硬盘插槽螺丝拧上螺丝插进去就可以了。群辉需要在“存储空间管理员”中添加存储。</p><h2 id="群辉配置"><a class="markdownIt-Anchor" href="#群辉配置"></a> 群辉配置</h2><ol><li>群辉是连电自启的，插上网线与路由器相连就可以使用了。（当然我这个是装好系统的，空机器需要装黑群晖，我没经历，暂时不写了）</li><li>下载群辉助手就可以扫描到局域网的群辉主机内网IP，双击IP即可访问群辉的管理界面。<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200926230901.png" alt="群辉助手截图" /></li><li>域名映射：<br />如果是洗全白的可以使用QuickConnect，但是需要注册账号并登陆，而且网速一般。<br />否则则需要公网IP和个人域名，<strong>这里推荐腾讯云的域名</strong>，可以使用群辉自带的DDNS设置就能实现外网访问。<br />步骤也很简单，开通腾讯云的DDNS服务，并在群辉的“控制面板-&gt;外部访问”设置即可。<br />由于我只有阿里云买的域名，所以需要用另一种方式，使用开源DDNS服务，推荐<a href="https://github.com/NewFuture/DDNS">NewFuture/DDNS</a>，<br />支持多域名支持多平台，配置步骤也很简单的，依照GitHub的Readme即可配置完成。申请阿里云子账号，开通解析权限，使用docker部署ddns服务，添加配置文件即可。</li><li>端口映射：登陆路由器管理界面找到端口映射并添加端口转发至主机的内网IP即可。</li><li>内网IP固定：由于默认情况下路由器会自动分配IP，这样会导致主机IP变动，导致内网端口映射失败，找到群辉“控制面板-&gt;网络-&gt;网络界面-&gt;右键编辑已联机的网络并设置固定IP。</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>花费430星际蜗牛+15硬盘组成自己的长期Nas加服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Nas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> Nas </tag>
            
            <tag> Docker </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-MapperScan注解扫描启动类所在包出现Warning</title>
      <link href="posts/16898/"/>
      <url>posts/16898/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当MybatisAutoConfiguration使用AutoService加载时出现“No MyBatis mapper was found in ‘[启动类]’ package. Please check your configuration”警告</p><h1 id="问题说明"><a class="markdownIt-Anchor" href="#问题说明"></a> 问题说明</h1><p>最近在做一个环境底层包，使用core-db模块jar包封装数据访问相关的默认配置，包含MybatisPlus，由于各工程路径不一致，所以MapperScan的basePackages一定是需要通配符的，配置大概如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.kthirty.**.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfiguration</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在META-INF中添加<code>spring.factories</code>文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">top.kthirty.core.db.config.MybatisPlusConfiguration</span><br></pre></td></tr></table></figure><p>利用Spring的装载机制导入Config类（由于包路径不同，Spring无法扫描到该类，故需要使用<code>spring.factories</code>）<br />但是启动时会出现一个警告<code>No MyBatis mapper was found in '[启动类所在包]' package. Please check your configuration.</code></p><h1 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h1><p>因为只是警告，并没有影响正常的功能使用，说明我自定义的<code>MybatisPlusConfiguration</code>生效了，只不过在生效之前出现了警告。<br />说明该类的加载时在<code>com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration</code>之后的<br />所以只需要保证自定义的Config在MybatisPlus定义的Config之前加载就可以了，正好有一个注解<code>@AutoConfigureBefore</code>可以保证此顺序。</p><h1 id="最终结果"><a class="markdownIt-Anchor" href="#最终结果"></a> 最终结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.kthirty.**.mapper&quot;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(MybatisPlusAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>当使用spring.factories加载配置类时，无法保证顺序的话，可能会重复装载或装载无用类，导致出现警告或无法启动，只要注意装载顺序就可以了</p><h1 id="灵感来源"><a class="markdownIt-Anchor" href="#灵感来源"></a> 灵感来源</h1><ul><li><a href="https://www.cnblogs.com/yangshaoxiang/p/12974555.html">https://www.cnblogs.com/yangshaoxiang/p/12974555.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8-Docker容器无法访问网络问题解决</title>
      <link href="posts/20196/"/>
      <url>posts/20196/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Centos8默认情况下Docker容器无法访问网络问题解决</p><h2 id="防火墙禁止转发流量"><a class="markdownIt-Anchor" href="#防火墙禁止转发流量"></a> 防火墙禁止转发流量</h2><h3 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h3><p>Centos8默认情况下firewalld会禁止转发流量</p><h3 id="解决步骤"><a class="markdownIt-Anchor" href="#解决步骤"></a> 解决步骤</h3><p><strong>防火墙操作需要root权限，普通用户请使用sudo</strong></p><ol><li>执行<code>firewall-cmd --query-masquerade</code> 可以查看状态，如果为<code>no</code>说明未开启，则需要开启后方可上网。</li><li>执行<code>firewall-cmd --add-masquerade --permanent</code> 永久开启IP地址转发</li><li>执行<code>firewall-cmd --reload</code> 重启防火墙规则</li></ol><p>后续发现其他原因造成将持续更新本文</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown速查表</title>
      <link href="posts/3713/"/>
      <url>posts/3713/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>常用Markdown速查表</p><h1 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">.... </span><br></pre></td></tr></table></figure><h1 id="段落"><a class="markdownIt-Anchor" href="#段落"></a> 段落</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***粗斜体***</span><br><span class="line">--- 分割线</span><br><span class="line">~~删除线~~</span><br><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br><span class="line">[^脚注]</span><br></pre></td></tr></table></figure><h1 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br><span class="line">有序列表</span><br><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br><span class="line">嵌套列表</span><br><span class="line">- 第一项</span><br><span class="line">  1. 第1项</span><br><span class="line">  2. 第2项</span><br><span class="line">- 第二项</span><br></pre></td></tr></table></figure><h1 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&#96;单行代码&#96;</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">多行代码</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">连接</span><br><span class="line">[链接名称](链接地址)  可以直接使用#标题使用本文锚点</span><br><span class="line">图片</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a class="markdownIt-Anchor" href="#高级技巧"></a> 高级技巧</h1><ul><li>markdown支持部分html标签 <code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code></li><li>使用<code>\</code>转义特殊字符，例如<code># * _ + -</code></li><li><code>&amp;#96;</code> 代替反引号</li></ul><h1 id="mermaid绘图"><a class="markdownIt-Anchor" href="#mermaid绘图"></a> mermaid绘图</h1><h2 id="流程图"><a class="markdownIt-Anchor" href="#流程图"></a> 流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">%% 这里LR表示方向，TB(从上到下)、BT(从下到上)、RL(从右到左)、LR(从左到右)</span><br><span class="line">graph LR</span><br><span class="line">    id1[矩形]</span><br><span class="line">    id2(圆角矩形)</span><br><span class="line">    id3(&#123;体育场形状&#125;)</span><br><span class="line">    id4[[子例程形状]]</span><br><span class="line">    id5[(圆柱形)]</span><br><span class="line">    id6((圆形))</span><br><span class="line">    id7&gt;不对称图形]</span><br><span class="line">    id8&#123;菱形&#125;</span><br><span class="line">    id9&#123;&#123;六边形&#125;&#125;</span><br><span class="line">    id10[&#x2F;平行四边形&#x2F;]</span><br><span class="line">    id11[\反向平行四边形\]</span><br><span class="line">    id12[&#x2F;梯形\]</span><br><span class="line">    id13[\反梯形&#x2F;]</span><br><span class="line">%%连线模式</span><br><span class="line">A---B 实线</span><br><span class="line">A-- This is the text! ---B 带说明实线</span><br><span class="line">A--&gt;B 带箭头实线</span><br><span class="line">A--描述--&gt;B 带描述箭头实线</span><br><span class="line">A-.-B 虚线</span><br><span class="line">A-.描述.-B 带描述</span><br><span class="line">A-.-&gt;B 箭头虚线</span><br><span class="line"></span><br><span class="line">subgraph 子流程标题</span><br><span class="line">    流程定义</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">style id1 fill:#f9f,stroke:#333,stroke-width:4px; 自定义节点样式</span><br><span class="line">classDef className fill:#f9f,stroke:#333,stroke-width:4px; 定义类名样式</span><br><span class="line">也可以在主题css修改对应元素css</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><h2 id="序列图"><a class="markdownIt-Anchor" href="#序列图"></a> 序列图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><a href="https://mermaid-js.github.io/mermaid/">mermaid相关的官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化配置</title>
      <link href="posts/58769/"/>
      <url>posts/58769/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本篇主要讲一下Redis的持久化方式，以及其配置步骤。</p><h1 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz <span class="comment"># 下载</span></span><br><span class="line">tar xzf redis-5.0.5.tar.gz  <span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.5 <span class="comment"># </span></span><br><span class="line">make <span class="comment"># 编译</span></span><br><span class="line">src/redis-server <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，Redis默认是不支持远程访问的。<br />修改redis.conf 中的bind项为 0.0.0.0<br />需要在启动redis时指定配置文件路径(修改启动命令为./src/redis-server ./redis.conf)</p></blockquote><p>以上命令均来源于<a href="http://www.redis.cn/download.html">中文官网</a>  <strong>强烈建议按照官网教程安装</strong></p><h2 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>Redis 提供了不同级别的持久化方式:</p><ul><li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储.</li><li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.</li><li><strong>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</strong></li></ul><h3 id="rdb"><a class="markdownIt-Anchor" href="#rdb"></a> RDB</h3><h4 id="rdb配置方式"><a class="markdownIt-Anchor" href="#rdb配置方式"></a> RDB配置方式</h4><p>修改redis.conf文件，添加以下配置即可开启快照存储。(<strong>使用官方配置文件的话默认就是开启的</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h4 id="rdb工作方式"><a class="markdownIt-Anchor" href="#rdb工作方式"></a> RDB工作方式</h4><p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p><ul><li>Redis 调用forks. 同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。<br />这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。</li></ul><h4 id="rdb的优点"><a class="markdownIt-Anchor" href="#rdb的优点"></a> RDB的优点</h4><ul><li>单一文件方便灾难恢复。</li><li>单一文件方便数据迁移。</li><li>数据量较大时，恢复速度相对AOF更快一些。</li></ul><h4 id="rdb的缺点"><a class="markdownIt-Anchor" href="#rdb的缺点"></a> RDB的缺点</h4><ul><li>不是实时备份，如果出现意外停止，可能会丢失周期内的部分数据。</li><li>由于是全量备份，备份速度相对于AOF方式较慢。</li></ul><h4 id="rdb测试步骤"><a class="markdownIt-Anchor" href="#rdb测试步骤"></a> RDB测试步骤</h4><ol><li>修改配置（参照#配置方式）</li><li>重启Redis</li><li>修改Redis中的数据</li><li>重启Redis</li><li>对比数据一致性</li><li>查看dump.rdb文件日期，可以查看备份时间</li></ol><h3 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> AOF</h3><h4 id="aof配置方式"><a class="markdownIt-Anchor" href="#aof配置方式"></a> AOF配置方式</h4><p>修改配置文件，将<code>appendonly</code>项改为<code>yes</code>，默认为<code>no</code></p><h4 id="aof工作原理"><a class="markdownIt-Anchor" href="#aof工作原理"></a> AOF工作原理</h4><p>每执行一条语句将语句存储到<code>appendonly.aof</code>文件中。</p><h4 id="aof的优点"><a class="markdownIt-Anchor" href="#aof的优点"></a> AOF的优点</h4><ul><li>实时备份，数据不会丢失。</li><li>相比RDB而言备份速度较快。</li></ul><h4 id="aof的缺点"><a class="markdownIt-Anchor" href="#aof的缺点"></a> AOF的缺点</h4><ul><li>由于每次执行命令都要记录命令，影响性能。</li><li>同数据量下，AOF的备份文件要比RDB文件大。</li><li>相比RDB而言，恢复速度略慢</li></ul><h4 id="测试步骤"><a class="markdownIt-Anchor" href="#测试步骤"></a> 测试步骤</h4><ol><li>修改配置（参照#配置方式）</li><li>重启Redis</li><li>修改Redis中的数据</li><li>重启Redis</li><li>对比数据一致性</li><li>查看appendonly.aof文件日期，可以查看备份时间</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>Redis有两种持久化方式</p><ol><li>RDB: 快照模式，默认开启，不是实时备份，配置格式为 <code>save 60 1000(60 秒内有至少有 1000 个键被改动)</code></li><li>AOF模式，保存命令，实时备份，配置格式我为<code>appendonly yes</code><br />两者可以同时开启，同时开启时, 优先使用AOF恢复数据。</li></ol><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><ul><li><a href="http://www.redis.cn/">中文官网</a></li><li>个人推荐的客户端<a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker开启远程访问</title>
      <link href="posts/12641/"/>
      <url>posts/12641/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="环境与版本"><a class="markdownIt-Anchor" href="#环境与版本"></a> 环境与版本</h1><p>本文适用于Centos7 和 Centos8</p><h1 id="完全开放有安全隐患"><a class="markdownIt-Anchor" href="#完全开放有安全隐患"></a> 完全开放（有安全隐患）</h1><p>此方法不需要安全验证，网络可以访问就可以操作Docker。不安全，适用于虚拟机或内网环境。</p><ol><li>修改<code>vim /lib/systemd/system/docker.service</code> 文件，在<code>ExecStart</code> 项后添加<code>-H tcp://0.0.0.0:2375</code></li><li>systemctl daemon-reload</li><li>service docker restart</li></ol><h1 id="证书访问安全"><a class="markdownIt-Anchor" href="#证书访问安全"></a> 证书访问（安全）</h1><p>此方法需要使用证书才能访问，适用所有场景。</p><p>附上脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># docker-tls.sh</span></span><br><span class="line"><span class="comment"># 环境centos 7 ,root</span></span><br><span class="line"><span class="comment"># 创建 Docker TLS 证书</span></span><br><span class="line"><span class="comment"># 配置Docker远程访问</span></span><br><span class="line"><span class="comment">##########配置信息</span></span><br><span class="line"></span><br><span class="line">Port=2376</span><br><span class="line">Node=$(hostname)</span><br><span class="line">IP=xx.xx.xx.xx</span><br><span class="line">PASSWORD=<span class="string">&quot;88888888&quot;</span></span><br><span class="line">COUNTRY=<span class="string">&quot;CN&quot;</span></span><br><span class="line">STATE=<span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">CITY=<span class="string">&quot;Shanghai&quot;</span></span><br><span class="line">ORGANIZATION=<span class="string">&quot;Elven&quot;</span></span><br><span class="line">ORGANIZATIONAL_UNIT=<span class="string">&quot;Dev&quot;</span></span><br><span class="line">COMMON_NAME=<span class="string">&quot;<span class="variable">$IP</span>&quot;</span></span><br><span class="line">EMAIL=<span class="string">&quot;5264thirty@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########生成证书</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate CA key</span></span><br><span class="line">openssl genrsa -aes256 -passout <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -out <span class="string">&quot;ca-key_<span class="variable">$Node</span>.pem&quot;</span> 4096  &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># Generate CA</span></span><br><span class="line">openssl req -new -x509 -days 730 -key <span class="string">&quot;ca-key_<span class="variable">$Node</span>.pem&quot;</span> -sha256 -out <span class="string">&quot;ca_<span class="variable">$Node</span>.pem&quot;</span> -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -subj <span class="string">&quot;/C=<span class="variable">$COUNTRY</span>/ST=<span class="variable">$STATE</span>/L=<span class="variable">$CITY</span>/O=<span class="variable">$ORGANIZATION</span>/OU=<span class="variable">$ORGANIZATIONAL_UNIT</span>/CN=<span class="variable">$COMMON_NAME</span>/emailAddress=<span class="variable">$EMAIL</span>&quot;</span>  &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#Server&quot;</span></span><br><span class="line"><span class="comment"># Generate Server key</span></span><br><span class="line">openssl genrsa -out <span class="string">&quot;server-key_<span class="variable">$Node</span>.pem&quot;</span> 4096  &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># Generate Server Certs.</span></span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=<span class="variable">$COMMON_NAME</span>&quot;</span> -sha256 -new -key <span class="string">&quot;server-key_<span class="variable">$Node</span>.pem&quot;</span> -out server.csr</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;subjectAltName = IP:<span class="variable">$IP</span>,IP:127.0.0.1&quot;</span> &gt;&gt; extfile.cnf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;extendedKeyUsage = serverAuth&quot;</span> &gt;&gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 730 -sha256 -<span class="keyword">in</span> server.csr -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -CA <span class="string">&quot;ca_<span class="variable">$Node</span>.pem&quot;</span> -CAkey <span class="string">&quot;ca-key_<span class="variable">$Node</span>.pem&quot;</span> -CAcreateserial -out <span class="string">&quot;server-cert_<span class="variable">$Node</span>.pem&quot;</span> -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#Client&quot;</span></span><br><span class="line">openssl genrsa -out <span class="string">&quot;client-key_<span class="variable">$Node</span>.pem&quot;</span> 4096  &amp;&gt;/dev/null</span><br><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key <span class="string">&quot;client-key_<span class="variable">$Node</span>.pem&quot;</span> -out client.csr</span><br><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 730 -sha256 -<span class="keyword">in</span> client.csr -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -CA <span class="string">&quot;ca_<span class="variable">$Node</span>.pem&quot;</span> -CAkey <span class="string">&quot;ca-key_<span class="variable">$Node</span>.pem&quot;</span> -CAcreateserial -out <span class="string">&quot;client-cert_<span class="variable">$Node</span>.pem&quot;</span> -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line">chmod  0400  <span class="string">&quot;client-key_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;server-key_<span class="variable">$Node</span>.pem&quot;</span></span><br><span class="line">chmod  0444 <span class="string">&quot;ca_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;server-cert_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;client-cert_<span class="variable">$Node</span>.pem&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########docker配置</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#拷贝证书&quot;</span></span><br><span class="line"><span class="comment">#服务端证书</span></span><br><span class="line">mkdir -p ~/.docker</span><br><span class="line">cp -avf <span class="string">&quot;ca_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;server-cert_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;server-key_<span class="variable">$Node</span>.pem&quot;</span> ~/.docker</span><br><span class="line"><span class="comment">#客户端证书文件</span></span><br><span class="line">cp -avf <span class="string">&quot;client-cert_<span class="variable">$Node</span>.pem&quot;</span> <span class="string">&quot;client-key_<span class="variable">$Node</span>.pem&quot;</span> ~/.docker/</span><br><span class="line"><span class="comment"># 打包客户端证书</span></span><br><span class="line">tar -zcf docker-tls-client_<span class="variable">$Node</span>.tar.gz ca_<span class="variable">$Node</span>.pem client-cert_<span class="variable">$Node</span>.pem client-key_<span class="variable">$Node</span>.pem</span><br><span class="line">cp -af docker-tls-client_<span class="variable">$Node</span>.tar.gz  ~/.docker/</span><br><span class="line">ls -hl $(<span class="built_in">pwd</span>)/docker-tls*</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#修改docker启动项 /lib/systemd/system/docker.service&quot;</span></span><br><span class="line">SetOPTS=<span class="string">&quot; --tls \</span></span><br><span class="line"><span class="string">--tlscacert=<span class="variable">$HOME</span>/.docker/ca_<span class="variable">$&#123;Node&#125;</span>.pem \</span></span><br><span class="line"><span class="string">--tlscert=<span class="variable">$HOME</span>/.docker/server-cert_<span class="variable">$&#123;Node&#125;</span>.pem  \</span></span><br><span class="line"><span class="string">--tlskey=<span class="variable">$HOME</span>/.docker/server-key_<span class="variable">$&#123;Node&#125;</span>.pem \</span></span><br><span class="line"><span class="string">-H 0.0.0.0:<span class="variable">$&#123;Port&#125;</span> &quot;</span></span><br><span class="line">sed  -i <span class="string">&quot;s#^ExecStart.*#&amp; <span class="variable">$SetOPTS</span> #&quot;</span> /lib/systemd/system/docker.service</span><br><span class="line">grep <span class="string">&#x27;^ExecStart&#x27;</span> /lib/systemd/system/docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#客户端远程连接&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;docker -H <span class="variable">$IP</span>:<span class="variable">$&#123;Port&#125;</span> --tlsverify --tlscacert ~/.docker/ca_<span class="variable">$Node</span>.pem --tlscert ~/.docker/client-cert_<span class="variable">$Node</span>.pem --tlskey ~/.docker/client-key_<span class="variable">$Node</span>.pem ps -a&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#客户端使用curl连接&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;curl --cacert ~/.docker/ca_<span class="variable">$Node</span>.pem --cert ~/.docker/client-cert_<span class="variable">$Node</span>.pem --key ~/.docker/client-key_<span class="variable">$Node</span>.pem https://<span class="variable">$IP</span>:<span class="variable">$&#123;Port&#125;</span>/containers/json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------Idea 特殊说明-----------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;如果使用idea连接docker需要&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;将ca_<span class="variable">$&#123;Node&#125;</span>.pem 文件名修改为ca.pem&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;将server-cert_<span class="variable">$&#123;Node&#125;</span>.pem 文件名修改为cert.pem&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;将server-key_<span class="variable">$&#123;Node&#125;</span>.pem 文件名修改为key.pem&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------Idea 特殊说明-----------------&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#clean</span></span><br><span class="line">rm -f ca*.srl *.pem *.cnf *.csr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[1;32m#重启docker生效</span></span><br><span class="line"><span class="string">systemctl restart  docker</span></span><br><span class="line"><span class="string">\e[0m&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="脚本注意事项"><a class="markdownIt-Anchor" href="#脚本注意事项"></a> 脚本注意事项</h2><ol><li>运行前修改配置文件中的IP项为Docker服务器的IP。</li><li>Idea远程使用的话，证书文件名需要修改，详情查看脚本输出。</li><li>端口为2375。</li></ol><h1 id="测试查看"><a class="markdownIt-Anchor" href="#测试查看"></a> 测试查看</h1><p>使用<code>netstat -tunlp</code> 查看当前服务器开启并监听的端口，如果有2375或2376 ，则表示开始成功，如果无法访问请检查防火墙和白名单（云服务器）。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纪念在Intellij-Idea-Maven-Setting配置上浪费的半天时间</title>
      <link href="posts/5293/"/>
      <url>posts/5293/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="场景介绍"><a class="markdownIt-Anchor" href="#场景介绍"></a> 场景介绍</h1><p>Idea Maven的一个坑<br />现在开发同时开发两个项目，且项目的nexus不同。打算在conf目录复制一个setting.xml 文件然后Idea中设置一下。</p><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>在<code>File | Settings | Build, Execution, Deployment | Build Tools | Maven</code> 选项下配置的User settings file 根本没用，运行<code>maven install -X</code> 可以看到详细输出，发现setting文件是根据相对路径找到的</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Idea中指定Setting文件并不会生效，如果需要多个nexus环境，则需要复制出一个maven环境，然后修改setting文件，然后两个项目选择不同的Maven</p><p>问题出现时间： <code>2020-07-07</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找树</title>
      <link href="posts/855AWY/"/>
      <url>posts/855AWY/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是二叉查找树"><a class="markdownIt-Anchor" href="#什么是二叉查找树"></a> 什么是二叉查找树</h1><p>二叉排序树（Binary Sort Tree），又称二叉查找树（Binary Search Tree），亦称二叉搜索树。是数据结构中的一类。在一般情况下，查询效率比链表结构要高。</p><h1 id="二叉树定义"><a class="markdownIt-Anchor" href="#二叉树定义"></a> 二叉树定义</h1><ol><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>左、右子树也分别为二叉排序树；</li><li>没有键值相等的结点。</li></ol><p>最主要的特点为：<strong>左子节点必然小于父节点，右子节点必然大于父节点。</strong></p><h1 id="图示"><a class="markdownIt-Anchor" href="#图示"></a> 图示</h1><p><img src="https://img-blog.csdnimg.cn/20190619233653505.png" alt="" /></p><h1 id="有什么缺点"><a class="markdownIt-Anchor" href="#有什么缺点"></a> 有什么缺点</h1><p>可能会出现极限情况，造成二叉树变为链表，影响效率。</p><p>如下:</p><p><img src="https://img-blog.csdnimg.cn/20181221112216158.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉查找树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下Nginx安装与卸载</title>
      <link href="posts/43816/"/>
      <url>posts/43816/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Nginx 在Centos7系统上的安装步骤</p><h1 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止</span></span><br><span class="line">service nginx stop</span><br><span class="line"><span class="comment"># 删除自启</span></span><br><span class="line">chkconfig nginx off</span><br><span class="line"><span class="comment"># 删除Nginx 文件</span></span><br><span class="line">rm -rf /usr/sbin/nginx</span><br><span class="line">rm -rf /etc/nginx</span><br><span class="line">rm -rf /etc/init.d/nginx</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/nginx</span><br><span class="line"><span class="comment"># yum 卸载nginx</span></span><br><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><h1 id="软件包安装"><a class="markdownIt-Anchor" href="#软件包安装"></a> 软件包安装</h1><p>本方法参照<a href="https://nginx.org/en/linux_packages.html">官方文档</a></p><h2 id="先决条件"><a class="markdownIt-Anchor" href="#先决条件"></a> 先决条件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils <span class="comment"># 安装yum 工具</span></span><br></pre></td></tr></table></figure><h2 id="添加nginx的yum仓库"><a class="markdownIt-Anchor" href="#添加nginx的yum仓库"></a> 添加Nginx的yum仓库</h2><p>添加<code>/etc/yum.repos.d/nginx.repo</code> 文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><h2 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h2 id="检查"><a class="markdownIt-Anchor" href="#检查"></a> 检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpt | grep nginx <span class="comment"># 出现Nginx监听端口为成功</span></span><br></pre></td></tr></table></figure><h1 id="源码构建安装"><a class="markdownIt-Anchor" href="#源码构建安装"></a> 源码构建安装</h1><h2 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h2><p>去<a href="http://nginx.org/en/download.html">官方下载地址</a> 稳定版本源码并上传到服务器</p><p>也可以使用wget 下载  <code>wget https://nginx.org/download/nginx-1.18.0.tar.gz</code></p><h2 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.18.0.tar.gz <span class="comment"># 解压</span></span><br></pre></td></tr></table></figure><h2 id="先决条件-2"><a class="markdownIt-Anchor" href="#先决条件-2"></a> 先决条件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake zlib zlib-devel openssl openssl--devel pcre pcre-devel</span><br></pre></td></tr></table></figure><h2 id="编译与安装"><a class="markdownIt-Anchor" href="#编译与安装"></a> 编译与安装</h2><p><strong>以下操作必须要在nginx源码解压后的文件夹下操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成Makefile</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="启动-2"><a class="markdownIt-Anchor" href="#启动-2"></a> 启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="检查-2"><a class="markdownIt-Anchor" href="#检查-2"></a> 检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpt | grep nginx</span><br></pre></td></tr></table></figure><h1 id="docker-compose安装"><a class="markdownIt-Anchor" href="#docker-compose安装"></a> Docker-Compose安装</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span> <span class="comment"># </span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span> <span class="comment"># ssl 端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf.d:/etc/nginx/conf.d</span> <span class="comment"># 配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./_log:/var/log/nginx</span> <span class="comment"># 日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/var/www</span> <span class="comment"># 静态网站</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/letsencrypt:/etc/letsencrypt</span> <span class="comment"># 证书(注意，绝对路径)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx常用配置</title>
      <link href="posts/51539/"/>
      <url>posts/51539/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本篇整理一下Nginx常用的配置，并使用测试案例说明配置文件用法。</p><h1 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h1><ul><li>文中①②…对应问题出现的位置</li><li>nginx修改或添加配置文件需要使用<code>/usr/local/nginx/sbin/nginx -s reload</code> 命令重新加载配置文件才能生效</li><li>修改主配置文件运行用户需要重启nginx，停止命令<code>/usr/local/nginx/sbin/nginx -s stop</code>，启动命令<code>/usr/local/nginx/sbin/nginx -s</code></li><li>本篇除nginx配置文件（nginx.conf、server/*.conf）以外，其他均为测试需要</li></ul><h1 id="nginx主配置"><a class="markdownIt-Anchor" href="#nginx主配置"></a> Nginx主配置</h1><p><strong>主配置文件中只是加入一些通用配置，详细设置区分管理至单独文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 指定运行用户</span><br><span class="line">user root;  # ①</span><br><span class="line"># 工作进程数量</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    # 每个进程的连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    # 引入mime.types 文件</span><br><span class="line">    include       mime.types;</span><br><span class="line">    # 默认类型为二进制流</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    #sendfile参数用于开启高效文件传输模式 </span><br><span class="line">    sendfile        on;</span><br><span class="line">    # keepalive_timeout设置客户端连接保持活动的超时时间</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # 引入当前文件相对路径 server 文件夹下所有已conf 结尾的文件，方便区分管理</span><br><span class="line">    include server&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前端"><a class="markdownIt-Anchor" href="#前端"></a> 前端</h1><h2 id="站点访问"><a class="markdownIt-Anchor" href="#站点访问"></a> 站点访问</h2><p>为方便测试，需要完成以下几点</p><ol><li><p>在hosts中添加 <code>本机ip www.test.com</code>（将<code>www.test.com</code> 解析到本地）</p></li><li><p>在<code>/root/www/www.test.com</code>文件夹下添加<code>index.html</code>文件</p></li><li><p><code>index.html</code>文件内容<code>&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;这里是www.test.com&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</code></p></li><li><p>在server文件夹下添加<code>www.test.com.conf</code>（文件名可任意设置）配置文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 虚拟主机</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.test.com; # 浏览器访问域名</span><br><span class="line">    charset utf-8; # 指定字符集</span><br><span class="line">    root   &#x2F;root&#x2F;www&#x2F;www.test.com; # 访问根目录</span><br><span class="line">    # 路由</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index  index.html; # 入口文件</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html; &#x2F; 默认访问文件夹下的index.html , 例如访问&#x2F;user 会自动尝试访问&#x2F;user&#x2F;index.html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问<code>www.test.com</code>测试是否可以访问页面</p></li></ol><h2 id="静态资源缓存"><a class="markdownIt-Anchor" href="#静态资源缓存"></a> 静态资源缓存</h2><ol><li><p>在hosts中添加 <code>本机ip cache.test.com</code>（将<code>cache.test.com</code> 解析到本地）</p></li><li><p>在<code>/root/www/cache.test.com</code>文件夹下添加<code>index.html</code>文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;h2&gt;这里是www.test.com&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>同路径下添加<code>index.js</code>文件测试js缓存，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">  alert(&quot;a&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在server文件夹下添加<code>cache.test.com.conf</code>（文件名可任意设置）配置文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 虚拟主机</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  cache.test.com; # 浏览器访问域名</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root   &#x2F;root&#x2F;www&#x2F;cache.test.com; # 访问根目录</span><br><span class="line">    # 路由</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index  index.html index.htm; # 入口文件</span><br><span class="line">       # try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    # 设置js缓存为30天</span><br><span class="line">    location ~ .*\.js$ &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问<code>cache.test.com</code>，查看<code>F12</code>中js文件的请求信息，出现<code>(memory cache)</code>为成功，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200618111826.jpg" alt="image-20200618111751768" /></p></li></ol><h2 id="防盗链"><a class="markdownIt-Anchor" href="#防盗链"></a> 防盗链</h2><p>防止其他ip请求资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png)$ &#123;</span><br><span class="line">    # 只允许 192.168.0.1 请求资源</span><br><span class="line">    valid_referers none blocked 192.168.0.1;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">       rewrite ^&#x2F; http:&#x2F;&#x2F;$host&#x2F;logo.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态文件压缩"><a class="markdownIt-Anchor" href="#静态文件压缩"></a> 静态文件压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 开启gzip 压缩</span><br><span class="line">    gzip on;</span><br><span class="line">    # 设置gzip所需的http协议最低版本 （HTTP&#x2F;1.1, HTTP&#x2F;1.0）</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    # 设置压缩级别，压缩级别越高压缩时间越长  （1-9）</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    # 设置压缩的最小字节数， 页面Content-Length获取</span><br><span class="line">    gzip_min_length 1000;</span><br><span class="line">    # 设置压缩文件的类型  （text&#x2F;html)</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;javascript text&#x2F;css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁止文件缓存"><a class="markdownIt-Anchor" href="#禁止文件缓存"></a> 禁止文件缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(js|css|png|jpg|gif)$ &#123;</span><br><span class="line">    add_header Cache-Control no-store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h1><h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2><p>为方便测试，需要完成以下几点</p><ol><li><p>在hosts中添加 <code>本机ip api.test.com</code>（将<code>api.test.com</code> 解析到本地）</p></li><li><p>添加<code>/root/www/api.test.com/test.py</code> 文件用来测试，内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入框架</span></span><br><span class="line"><span class="keyword">import</span> flask,json</span><br><span class="line"><span class="comment"># 将本文件当做一个服务</span></span><br><span class="line">server = flask.Flask(__name__)</span><br><span class="line"><span class="comment"># 制定一个测试接口</span></span><br><span class="line"><span class="meta">@server.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">   res = &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;测试接口&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">   <span class="keyword">return</span> json.dumps(res,ensure_ascii=<span class="literal">False</span>) <span class="comment"># json转换并取消ascii转码</span></span><br><span class="line"><span class="comment"># 运行并监听8000端口</span></span><br><span class="line">server.run(port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></li><li><p>在server文件夹下添加<code>api.test.com.conf</code>（文件名可任意设置）配置文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen       80;</span><br><span class="line">   server_name  api.test.com; # 域名</span><br><span class="line">   location &#x2F; &#123;</span><br><span class="line">       proxy_pass   http:&#x2F;&#x2F;localhost:8000; # 代理地址</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>python test.py</code> 命令运行python并监听8000端口 ②</p></li><li><p>访问<code>api.test.com/index</code>测试</p></li></ol><h2 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h2><ol><li><p>在hosts中添加 <code>本机ip load.test.com</code>（将<code>load.test.com</code> 解析到本地）</p></li><li><p>添加<code>/root/www/load.test.com/test_8100.py</code> 文件用来测试，内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入框架</span></span><br><span class="line"><span class="keyword">import</span> flask,json</span><br><span class="line"><span class="comment"># 将本文件当做一个服务</span></span><br><span class="line">server = flask.Flask(__name__)</span><br><span class="line"><span class="comment"># 制定一个测试接口</span></span><br><span class="line"><span class="meta">@server.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">   res = &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;测试接口,端口为8100&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">   <span class="keyword">return</span> json.dumps(res,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 运行并监听8000端口</span></span><br><span class="line">server.run(port=<span class="number">8100</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加<code>/root/www/load.test.com/test_8101.py</code> 文件用来测试，内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入框架</span></span><br><span class="line"><span class="keyword">import</span> flask,json</span><br><span class="line"><span class="comment"># 将本文件当做一个服务</span></span><br><span class="line">server = flask.Flask(__name__)</span><br><span class="line"><span class="comment"># 制定一个测试接口</span></span><br><span class="line"><span class="meta">@server.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">   res = &#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;测试接口,端口为8101&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">   <span class="keyword">return</span> json.dumps(res,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 运行并监听8000端口</span></span><br><span class="line">server.run(port=<span class="number">8101</span>)</span><br></pre></td></tr></table></figure></li><li><p>在server文件夹下添加<code>load.test.com.conf</code>（文件名可任意设置）配置文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream loadapi &#123;</span><br><span class="line">    # 负载均衡，配置权重</span><br><span class="line">    server localhost:8100 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;3s;</span><br><span class="line">    server localhost:8101 weight&#x3D;3 max_fails&#x3D;2 fail_timeout&#x3D;3s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  load.test.com;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass   http:&#x2F;&#x2F;loadapi; # 这里对应上面的 upstream loadapi</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>python test_8100.py</code>和<code>python test_8101.py</code> 运行两个python文件</p></li><li><p>访问<code>load.test.com/index</code> , 多次访问会出现<code>&#123;&quot;msg&quot;: &quot;测试接口,端口为8100&quot;, &quot;code&quot;: 0&#125;</code> 与 <code>&#123;&quot;msg&quot;: &quot;测试接口,端口为8101&quot;, &quot;code&quot;: 0&#125;</code>结果。</p></li></ol><h2 id="代理nexus"><a class="markdownIt-Anchor" href="#代理nexus"></a> 代理Nexus</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen       10100;</span><br><span class="line">   server_name  nexus.kthirty.top; # 域名</span><br><span class="line">   location &#x2F; &#123;</span><br><span class="line">       proxy_pass   http:&#x2F;&#x2F;localhost:10103; # 代理地址</span><br><span class="line">       proxy_redirect  off; </span><br><span class="line">       proxy_set_header Host $host:10100; # 如果nginx不是80端口这里需要添加nginx端口号</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">       proxy_set_header X-Forwarded-For </span><br><span class="line">       $proxy_add_x_forwarded_for; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="https"><a class="markdownIt-Anchor" href="#https"></a> HTTPS</h2><ol><li><p>在hosts中添加 <code>本机ip ssl.test.com</code>（将<code>ssl.test.com</code> 解析到本地）</p></li><li><p>使用<a href="https://keymanager.org/">keymanager</a> 生成一个测试证书（已有证书请忽略）</p></li><li><p>上传证书文件至 <code>/etc/ssl/ssl.test.com</code>，路径可以自定义</p></li><li><p>在server文件夹下添加<code>ssl.test.com.conf</code>（文件名可任意设置）配置文件，内容如下 ③</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    #ssl参数</span><br><span class="line">    listen              443 ssl;</span><br><span class="line">    server_name         ssl.test.com;</span><br><span class="line">    root   &#x2F;root&#x2F;www&#x2F;www.test.com; # 访问根目录（这里主要测试https复用www的文件）</span><br><span class="line">    #证书文件路径</span><br><span class="line">    ssl_certificate     &#x2F;etc&#x2F;ssl&#x2F;ssl.test.com&#x2F;ssl.test.com_chain.crt;</span><br><span class="line">    #私钥文件路径</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;ssl&#x2F;ssl.test.com&#x2F;ssl.test.com_key.key;</span><br><span class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line">    # 路由</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index  index.html index.htm; # 入口文件</span><br><span class="line">       # try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问 <code>https://ssl.test.com</code> 可以正常访问就是成功，出现不安全是以为测试证书浏览器不信任。</p></li></ol><h1 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h1><ul><li><p>对应①，可能会出现<code>403 forbidden</code> 错误，原因是未指定运行用户，主配置文件添加 <code>user root</code>即可。<em>保证nginx的运行用户有权限访问文件路径即可</em></p></li><li><p>对应②，使用Python监听测试接口出现<code>Python“Non-ASCII character 'xe5' in file”</code>错误，原因为Python文件未指定字符集，文件第一行添加<code>*# -\*- coding: UTF-8 -\*-*</code>即可。</p></li><li><p>对应②，python运行时出现<code>ImportError: No module named flask</code> , 缺少flask，运行<code>yum install python-flask</code>即可</p></li><li><p>对应③，<code>the &quot;ssl&quot; parameter requires ngx_http_ssl_module</code>，原因是因为源码编译安装为开启<code>ngx_http_ssl_module</code>,解决步骤如下</p><ul><li><p>进入nginx源码目录 <code>cd /root/soft/nginx/nginx-1.18.0</code> <strong>根据自己的情况进入</strong></p></li><li><p>运行<code>/usr/local/nginx/sbin/nginx -V</code>查看并复制<code>configure arguments:</code>后面的值（<strong>路径可能不一致，未安装插件的情况下后面一般为空</strong>）</p></li><li><p>运行<code>/usr/local/nginx/sbin/nginx -s stop</code>停止当前nginx，如果出现<code>the &quot;ssl&quot; parameter requires ngx_http_ssl_module</code>，暂时把包含的配置文件删除即可。</p></li><li><p>在 <strong>nginx源码目录</strong>下运行<code>./configure --原来有的模块（如果有的话） --with-http_ssl_module</code></p><p>这里可能会出现<code>/configure: error: SSL modules require the OpenSSL library</code></p><p>Centos需要安装openssl-devel  <code>yum install openssl openssl-devel</code></p><p>Ubuntu则需要安装:sudo apt-get install libssl-dev</p></li><li><p>编译<code>make</code></p></li><li><p>备份原有nginx <code>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</code></p></li><li><p>复制新编译的nginx <code>cp ./objs/nginx /usr/local/nginx/sbin/</code></p></li><li><p>启动Nginx <code>/usr/local/nginx/sbin/nginx</code></p></li><li><p>验证查看<code>/usr/local/nginx/sbin/nginx -V</code> 出现<code>with-http_ssl_module</code>为成功</p></li></ul></li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li>Nginx配置文件在线生成<a href="https://www.digitalocean.com/community/tools/nginx">网站</a> <a href="https://github.com/digitalocean/nginxconfig.io">GitHub</a></li><li><a href="https://docs.nginx.com/nginx/admin-guide">Nginx官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Nginx </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot启动流程源码分析（二）</title>
      <link href="posts/39138/"/>
      <url>posts/39138/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>‘SpringBoot启动流程源码分析第二篇之 SpringApplication.run(XXX.class, args); 做了什么’<br />此篇承接<a href="/posts/2200/">SpringBoot启动流程源码分析（一）</a> 试图分析SpringBoot启动原理，本篇主要分析<code>SpringApplication.run(XXX.class, args);</code>到底做了什么</p><h1 id="代码链路"><a class="markdownIt-Anchor" href="#代码链路"></a> 代码链路</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line">SpringApplication.run(SpringbootStartApplication.class, args);</span><br><span class="line"><span class="comment">//run方法源码 org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String...)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重载run方法源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SpringApplication构造函数源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可以看出<code>SpringApplication.run(SpringbootStartApplication.class, args);</code><br />等同于<code>new SpringApplication(null,new Class[]&#123;SpringbootStartApplication.class&#125;).run(args);</code></p><h1 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h1><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处resourceLoader为null，primarySources为应用主类(SpringbootStartApplication.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证赋值</span></span><br><span class="line">   <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">   Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 获取应用类型</span></span><br><span class="line">   <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 设置启动器</span></span><br><span class="line">   setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 设置应用状态监听器</span></span><br><span class="line">   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 推断出mainClass</span></span><br><span class="line">   <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="推断应用类型"><a class="markdownIt-Anchor" href="#推断应用类型"></a> 推断应用类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.WebApplicationType#deduceFromClasspath</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     存在org.springframework.web.reactive.DispatcherHandler </span></span><br><span class="line"><span class="comment">     不存在org.springframework.web.servlet.DispatcherServlet</span></span><br><span class="line"><span class="comment">     不存在org.glassfish.jersey.servlet.ServletContainer</span></span><br><span class="line"><span class="comment">     说明类型为REACTIVE WEB</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">         &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">         &amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果不存在javax.servlet.Servlet 或者 org.springframework.web.context.ConfigurableWebApplicationContext 说明为非WEB程序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line">         <span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 默认为SERVLET WEB</span></span><br><span class="line">   <span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取实现类getspringfactoriesinstances"><a class="markdownIt-Anchor" href="#获取实现类getspringfactoriesinstances"></a> 获取实现类(getSpringFactoriesInstances)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;[], java.lang.Object...)</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 获取自定义类加载器或者默认加载器</span></span><br><span class="line">    ClassLoader classLoader = getClassLoader();</span><br><span class="line">   <span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">   <span class="comment">// 获取指定类在META-INF/spring.factories 配置文件下配置的实现类 </span></span><br><span class="line">   Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">    <span class="comment">// 加载类</span></span><br><span class="line">   List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,classLoader, args, names);</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">   AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">   <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面可以看一下配置文件中的详细配置信息</p><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200617112758.png" alt="" /></p><h2 id="推断mainclass"><a class="markdownIt-Anchor" href="#推断mainclass"></a> 推断MainClass</h2><p>创建一个异常，通过异常堆栈信息找到main方法的主类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      StackTraceElement[] stackTrace &#x3D; new RuntimeException().getStackTrace();</span><br><span class="line">      for (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">         if (&quot;main&quot;.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">            return Class.forName(stackTraceElement.getClassName());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   catch (ClassNotFoundException ex) &#123;</span><br><span class="line">      &#x2F;&#x2F; Swallow and continue</span><br><span class="line">   &#125;</span><br><span class="line">   return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="run方法"><a class="markdownIt-Anchor" href="#run方法"></a> RUN方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建并启动计时监控类</span></span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">    <span class="comment">// 初始化应用上下文和异常报告集合</span></span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="comment">// 配置java.awt.headless 参数，将参数设置默认为true</span></span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    <span class="comment">// 创建所有 Spring 运行监听器并发布应用启动事件 本质还是调用getSpringFactoriesInstances方法</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 初始化默认应用参数类</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">       <span class="comment">// 根据运行监听器和应用参数来准备 Spring 环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">      configureIgnoreBeanInfo(environment);</span><br><span class="line">       <span class="comment">// 打印Banner</span></span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       <span class="comment">// 创建应用上下文</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       <span class="comment">// 异常报告器</span></span><br><span class="line">      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line">            <span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">       <span class="comment">// 准备应用上下文</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">       <span class="comment">// 刷新应用上下文</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">// 应用上下文刷新后置处理 </span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">// 计时停止</span></span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">           <span class="comment">// 输出日志记录执行主类名、时间信息</span></span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 发布启动完成事件</span></span><br><span class="line">      listeners.started(context);</span><br><span class="line">       <span class="comment">// 执行所有 Runner 运行器</span></span><br><span class="line">      callRunners(context, applicationArguments);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 发布运行事件</span></span><br><span class="line">      listeners.running(context);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot启动流程源码分析（一）</title>
      <link href="posts/2200/"/>
      <url>posts/2200/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>SpringBoot启动流程源码分析第一篇之 @SpringBootApplication 注解到底做了什么？<br />本篇使用<code>SpringBoot 2.3.0.RELEASE</code> 版本，试图理清楚SpringBoot启动时到底做了什么，这是第一篇，先搞清楚<code>@SpringBootApplication</code>做了什么。鬼知道SpringBoot会牵扯出来多少坑。</p><h1 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> <span class="comment">// 指定该注解只能用到类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解生命周期不仅被保存到class文件中，jvm加载class文件之后，仍然存在；</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 标注文档</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">// 表示该注解会被子类继承</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">// 元注解 ，实际@SpringBootConfiguration也只是引用了@Configuration注解</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 元注解,开启自动装配Config</span></span><br><span class="line"><span class="comment">// IOC 扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span> /</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"><span class="comment">// 排除特定的自动配置类，这样它们就永远不会被应用(AliasFor 是将参数传递给元注解@EnableAutoConfiguration)</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 同exclude ， 已name形式排除</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// IOC扫描的基础包，也是传递给元注解@ComponentScan</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">// 同上，已class形式</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 用于命名Spring容器中检测到的组件的类。 参数传递到元注解@ComponentScan</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;nameGenerator&quot;)</span></span><br><span class="line">Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line">    <span class="comment">//  指定是否应该代理@Bean的生命周期行为，传递给元注解@Configuration</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h1><p><code>@SpringBootApplication</code>是个组合注解（composed annotation），用它就相当于同时用了下面三个注解：</p><ul><li><code>@SpringBootConfiguration</code></li><li><code>@EnableAutoConfiguration</code></li><li><code>@ComponentScan</code></li></ul><p>所以如果在启动类上加入这三个注解，也可以替代<code>@SpringBootApplication</code> 注解，组合注解主要用来简化代码。</p><h2 id="componentscan-注解"><a class="markdownIt-Anchor" href="#componentscan-注解"></a> <code>@ComponentScan</code> 注解</h2><p>这个注解很熟悉了，SpringMVC就开始用了，无非就是自动扫描并加载符合条件的Bean到容器中，这个注解会默认扫描声明类所在的包开始扫描。<br />例如：类cn.shiyujun.Demo类上标注了@ComponentScan 注解，则cn.shiyujun.controller、cn.shiyujun.service等等包下的类都可以被扫描到</p><p>这个注解一共包含以下几个属性：</p><ul><li>basePackages：指定多个包名进行扫描</li><li>basePackageClasses：对指定的类和接口所属的包进行扫</li><li>excludeFilters：指定不扫描的过滤器</li><li>includeFilters：指定扫描的过滤器</li><li>lazyInit：是否对注册扫描的bean设置为懒加载</li><li>nameGenerator：为扫描到的bean自动命名</li><li>resourcePattern：控制可用于扫描的类文件</li><li>scopedProxy：指定代理是否应该被扫描</li><li>scopeResolver：指定扫描bean的范围</li><li>useDefaultFilters：是否开启对@Component，@Repository，@Service，@Controller的类进行检测</li></ul><h2 id="springbootconfiguration注解"><a class="markdownIt-Anchor" href="#springbootconfiguration注解"></a> <code>@SpringBootConfiguration</code>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"><span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解只是将@Configuration 注解封装起来而已，并没有做其他操作。注：Configuration相当于原来的xml配置，用于配置Bean。</p><h2 id="enableautoconfiguration-注解"><a class="markdownIt-Anchor" href="#enableautoconfiguration-注解"></a> <code>@EnableAutoConfiguration</code> 注解</h2><p>才是重头戏，主要功效就是利用<code>@Import</code>注解( <code>@Import</code>注解详情看<a href="/posts/32817/">这里</a>)，将所有符合自动装配条件的<code>Bean</code>注入到<code>IOC</code>容器中。下面来看一下源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span> <span class="comment">// 注入AutoConfigurationImportSelector</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>@Import</code>注解引用<code>AutoConfigurationImportSelector</code>类，下面看一下<code>AutoConfigurationImportSelector</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.AutoConfigurationGroup#selectImports</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>,</span></span><br><span class="line"><span class="class">      <span class="title">ResourceLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">   ... 这里省略了很多非关键代码</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">         <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 获取所有标注@Configuration的类，加载里面的Bean</span></span><br><span class="line">      AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">      <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否禁用</span></span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">         <span class="comment">// 获取EnableAutoConfiguration注解的属性kv键对（AnnotationAttributes为继承LinkedHashMap）</span></span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">         <span class="comment">// 获取所有标注@Configuration类中的@Bean</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">         <span class="comment">// 去除重复（使用LinkedHashSet方式）</span></span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">        <span class="comment">// 获取所有需要忽略的Bean</span></span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">         <span class="comment">// 检查忽略的Bean</span></span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">         <span class="comment">// 去除忽略的Bean</span></span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">         <span class="comment">// 过滤器筛选</span></span><br><span class="line">configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">         <span class="comment">// 调用监听器方法</span></span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 判断是否禁用了autoConfiguration</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (getClass() == AutoConfigurationImportSelector.class) &#123;</span><br><span class="line">         <span class="keyword">return</span> getEnvironment().getProperty(EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class, <span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p><code>@SpringBootApplication</code>是一个组合注解，分别组合了<code>@EnableAutoConfiguration</code>(开启自动装配)  <code>@ComponentSacn</code> （指定默认扫描包为注解类的当前目录）<code>@Configuration</code> 标注注解类</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Import注解源码解析</title>
      <link href="posts/32817/"/>
      <url>posts/32817/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>分析SpringBoot启动流程时遇到的<code>@Import</code> 注解，不明所以然，所以先翻一下注解的源码。</p><h1 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> <span class="comment">// 类上使用</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 生命周期</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 文档</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</span></span><br><span class="line"><span class="comment">    * 可以配合 Configuration、ImportSelector、ImportBeanDefinitionRegistrar使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式</h1><h2 id="简单使用方法"><a class="markdownIt-Anchor" href="#简单使用方法"></a> 简单使用方法</h2><p>这种方式可以直接把类加入到Spring IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(value=&#123;UserServiceImpl.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这种方式很少用，原因有二：</p><ol><li>直接使用<code>@Bean</code>注解代替更加方便</li><li>仅能调用无参构造</li></ol><h2 id="结合importbeandefinitionregistrar接口"><a class="markdownIt-Anchor" href="#结合importbeandefinitionregistrar接口"></a> 结合<code>ImportBeanDefinitionRegistrar</code>接口</h2><h3 id="源码-2"><a class="markdownIt-Anchor" href="#源码-2"></a> 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">   AnnotationMetadata importingClassMetadata,  // 通过这个参数可以拿到类的元数据信息</span></span></span><br><span class="line"><span class="function"><span class="params">   BeanDefinitionRegistry registry, // 通过这个参数可以操作IOC容器</span></span></span><br><span class="line"><span class="function"><span class="params">         BeanNameGenerator importBeanNameGenerator)</span> <span class="comment">// BeanNameGenerator 注入IOC容器的名称</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 同上，少一个参数</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a class="markdownIt-Anchor" href="#实现类"></a> 实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        BeanDefinitionBuilder userService = BeanDefinitionBuilder.rootBeanDefinition(UserServiceImpl.class);</span><br><span class="line">        <span class="comment">// 这里自行实现，更加灵活</span></span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;userService&quot;</span>, userService.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式-2"><a class="markdownIt-Anchor" href="#使用方式-2"></a> 使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(value=&#123;UserServiceBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="结合importselector接口"><a class="markdownIt-Anchor" href="#结合importselector接口"></a> 结合<code>ImportSelector</code>接口</h2><p>相比较与实现<code>ImportBeanDefinitionRegistrar</code>接口之后直接操作Bean容器来说，使用<code>ImportSelector</code>会更加优雅一些，只需要返回需要注入类的全名即可，也可以同时注入多个Bean，Spring 中<code>EnableAutoConfiguration</code>注解就是用的这种方式。</p><h3 id="源码-3"><a class="markdownIt-Anchor" href="#源码-3"></a> 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 返回类全名即可注入</span></span><br><span class="line">   String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line">   <span class="comment">// 传入方法，获取忽略过滤器</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Predicate&lt;String&gt; <span class="title">getExclusionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类-2"><a class="markdownIt-Anchor" href="#实现类-2"></a> 实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImportSelect</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;UserServiceImpl.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式-3"><a class="markdownIt-Anchor" href="#使用方式-3"></a> 使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="meta">@Import(value=&#123;UserServiceImportSelect.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="spring-处理import的源码"><a class="markdownIt-Anchor" href="#spring-处理import的源码"></a> Spring 处理@Import的源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processImports</span><span class="params">(ConfigurationClass configClass, SourceClass currentSourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">      Collection&lt;SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> checkForCircularImports)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (importCandidates.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.problemReporter.error(<span class="keyword">new</span> CircularImportProblem(configClass, <span class="keyword">this</span>.importStack));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.importStack.push(configClass);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> (SourceClass candidate : importCandidates) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate.isAssignable(ImportSelector.class)) &#123;</span><br><span class="line">               <span class="comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span></span><br><span class="line">               Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">               ImportSelector selector = ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class,</span><br><span class="line">                     <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line">               Predicate&lt;String&gt; selectorFilter = selector.getExclusionFilter();</span><br><span class="line">               <span class="keyword">if</span> (selectorFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  exclusionFilter = exclusionFilter.or(selectorFilter);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector) &#123;</span><br><span class="line">                  <span class="keyword">this</span>.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector) selector);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                  Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames, exclusionFilter);</span><br><span class="line">                  processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="keyword">false</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;</span><br><span class="line">               <span class="comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line">               <span class="comment">// delegate to it to register additional bean definitions</span></span><br><span class="line">               Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">               ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">                     ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class,</span><br><span class="line">                           <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line">               configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line">               <span class="comment">// process it as an @Configuration class</span></span><br><span class="line">               <span class="keyword">this</span>.importStack.registerImport(</span><br><span class="line">                     currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">               processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">&quot;Failed to process import candidates for configuration class [&quot;</span> +</span><br><span class="line">               configClass.getMetadata().getClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.importStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>最方便的是结合<code>ImportSelector</code>方式，主要作用是使用注解注入<code>Bean</code>到<code>IOC</code>容器</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ实践篇之集成SpringBoot</title>
      <link href="posts/38574/"/>
      <url>posts/38574/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计理念"><a class="markdownIt-Anchor" href="#设计理念"></a> 设计理念</h1><p>RocketMQ实践篇之集成SpringBoot</p><h2 id="生产者"><a class="markdownIt-Anchor" href="#生产者"></a> 生产者</h2><p>生产者只需要一个即可发送不同种类的消息，故直接注入一个即可，使用时直接引入使用</p><h2 id="消费者"><a class="markdownIt-Anchor" href="#消费者"></a> 消费者</h2><p>不同的主题有不同的消费逻辑，所以只是创建一个工具类，使用时自行注入并实现listener</p><h1 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rocketmq --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok 简化代码（非必要） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非必要，自行定义的配置，方便使用</span></span><br><span class="line"><span class="comment"># rocketmq</span></span><br><span class="line"><span class="attr">rocketmq</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">namesrv</span>: <span class="string">192.168.3.30:9876</span></span><br><span class="line">  <span class="attr">seckill</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">topic</span>: <span class="string">seckill_topic</span></span><br><span class="line">    <span class="attr">groupname</span>: <span class="string">seckill_group</span></span><br></pre></td></tr></table></figure><h1 id="生产者-2"><a class="markdownIt-Anchor" href="#生产者-2"></a> 生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQProducer</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rocketmq.namesrv&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用停止时自动调用，停止MQ</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/30 13:31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(producer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;RocketMQ停止&quot;</span>);</span><br><span class="line">            producer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用启动完成后自动调用,用来初始化并启动生产者</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/30 13:32</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;defaultMQProducer&quot;</span>);</span><br><span class="line">        producer.setInstanceName(<span class="string">&quot;mqInstance_&quot;</span> + <span class="number">1</span>);</span><br><span class="line">        producer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">        producer.setVipChannelEnabled(<span class="keyword">false</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        log.info(<span class="string">&quot;RocketMQ生成者启动成功，namesrv地址为[&#123;&#125;]&quot;</span>,namesrvAddr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResult <span class="title">send</span><span class="params">(String topic, String message)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RocketMQ发送消息,主题&#123;&#125;,消息内容&#123;&#125;&quot;</span>, topic, message);</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(topic, message.getBytes());</span><br><span class="line">        <span class="keyword">return</span> producer.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息（超时时间）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResult <span class="title">send</span><span class="params">(String topic, String message,<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RocketMQ发送消息,主题&#123;&#125;,消息内容&#123;&#125;&quot;</span>, topic, message);</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(topic, message.getBytes());</span><br><span class="line">        <span class="keyword">return</span> producer.send(msg,timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息（回调）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendCallback 回调信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String topic, String message, SendCallback sendCallback)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;RocketMQ发送消息,主题&#123;&#125;,消息内容&#123;&#125;&quot;</span>, topic, message);</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(topic, message.getBytes());</span><br><span class="line">        producer.send(msg,sendCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消费者-2"><a class="markdownIt-Anchor" href="#消费者-2"></a> 消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumer</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageListenerConcurrently messageListener;</span><br><span class="line">    <span class="keyword">private</span> String namesrvAddr;</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer;</span><br><span class="line">    <span class="keyword">private</span> MessageModel messageModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.hasText(namesrvAddr,<span class="string">&quot;namesrvAddr地址不能为空&quot;</span>);</span><br><span class="line">        Assert.hasText(topic,<span class="string">&quot;topic不能为空&quot;</span>);</span><br><span class="line">        Assert.notNull(messageListener,<span class="string">&quot;messageListener不能为null&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer = <span class="keyword">new</span> DefaultMQPushConsumer(groupName);</span><br><span class="line">            consumer.setInstanceName(<span class="string">&quot;mqConsumerInstance_&quot;</span> + <span class="number">1</span>);</span><br><span class="line">            consumer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">            consumer.subscribe(topic, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            consumer.setMessageModel(messageModel);<span class="comment">//消费模式</span></span><br><span class="line">            consumer.registerMessageListener(messageListener);</span><br><span class="line">            consumer.setVipChannelEnabled(<span class="keyword">false</span>);</span><br><span class="line">            consumer.start();</span><br><span class="line">            log.info(<span class="string">&quot;RocketMQ消费者启动成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;RocketMQ消费者启动异常&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.consumer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.consumer.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="秒杀"><a class="markdownIt-Anchor" href="#秒杀"></a> 秒杀</h1><h3 id="配置listener"><a class="markdownIt-Anchor" href="#配置listener"></a> 配置Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListenerConcurrently</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">        String body = <span class="keyword">new</span> String(list.get(<span class="number">0</span>).getBody());</span><br><span class="line">        log.info(<span class="string">&quot;秒杀消费消息:[&#123;&#125;]&quot;</span>,body);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入消费者"><a class="markdownIt-Anchor" href="#注入消费者"></a> 注入消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rocketmq.namesrv&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namesrv;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rocketmq.seckill.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String seckillTopic;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rocketmq.seckill.groupname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String seckillGroupName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入秒杀mq message listener</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/30 14:42</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageListenerConcurrently <span class="title">getSeckillMessageListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SeckillMessageListener();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *创建并注入消费者</span></span><br><span class="line"><span class="comment">     * 使用集群方式消费（因为集群时，如果多次消费反而无效，只消费一次即可）</span></span><br><span class="line"><span class="comment">     * 这里备注一下消费方式</span></span><br><span class="line"><span class="comment">     * 1. 集群消费：当使用集群消费模式时，MQ 认为任意一条消息只需要被集群内的任意一个消费者处理即可。</span></span><br><span class="line"><span class="comment">     * 2. 广播消费：当使用广播消费模式时，MQ 会将每条消息推送给集群内所有注册过的客户端，保证消息至少被每台机器消费一次。</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> top.kthirty.rocketmq.RocketMQConsumer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/30 14:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RocketMQConsumer <span class="title">getSeckillMQConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RocketMQConsumer(getSeckillMessageListener(),namesrv,seckillTopic,seckillGroupName,<span class="keyword">null</span>, MessageModel.CLUSTERING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="秒杀接口"><a class="markdownIt-Anchor" href="#秒杀接口"></a> 秒杀接口</h3><p>用于测试mq发送与消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rocketmq.seckill.topic&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String seckillTopic;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQProducer rocketMQProducer;</span><br><span class="line">    <span class="comment">// 同步发送</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sysn&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">skillSysn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            param.put(<span class="string">&quot;userId&quot;</span>,i);</span><br><span class="line">            param.put(<span class="string">&quot;goodsId&quot;</span>,i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rocketMQProducer.send(seckillTopic, JSON.toJSONString(param));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;消息发送失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;同步发送耗时:&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步发送</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;aysn&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">skillAysn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Map&lt;String,Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            param.put(<span class="string">&quot;userId&quot;</span>,i);</span><br><span class="line">            param.put(<span class="string">&quot;goodsId&quot;</span>,i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rocketMQProducer.send(seckillTopic, JSON.toJSONString(param), <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;发送失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;消息发送失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;异步发送耗时:&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动并测试"><a class="markdownIt-Anchor" href="#启动并测试"></a> 启动并测试</h3><p>启动后访问 <code>http://localhost:8080/seckill/sysn</code> （同步发送） 或者 <code>http://localhost:8080/seckill/aysn</code> （异步发送）</p><p>可以看到类似日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RocketMQ发送消息,主题seckill_topic,消息内容&#123;&quot;goodsId&quot;:0,&quot;userId&quot;:0&#125;</span><br><span class="line">秒杀消费消息:[&#123;&quot;goodsId&quot;:0,&quot;userId&quot;:0&#125;]</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h1><ol><li><p>No route info of this topic原因是没有对应的主题，解决方式有两种</p><ol><li>允许自动创建主题（测试环境适用）</li><li>自动去console添加主题（生产环境适用）</li></ol></li><li><p>sendDefaultImpl call timeout  网络访问超时</p><p>一般是因为docker 网络问题，解决方式可以修改<code>broker.conf</code> 中的<code>brokerIP1=192.168.3.30</code>项修改为自己的网络IP，不使用docker 的网卡IP</p></li></ol><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><p><a href="https://github.com/kthirty/docker/tree/master/docker-compose/rocketmq">rocketmq环境适用docker-compose</a></p></li><li><p><a href="http://rocketmq.apache.org/">官网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Docker </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需代码实现接口之Hasor</title>
      <link href="posts/65403/"/>
      <url>posts/65403/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="hasor简介"><a class="markdownIt-Anchor" href="#hasor简介"></a> Hasor简介</h1><p>Dataway让SpringBoot不在需要Controller、Service、DAO、Mapper就可以实现接口并CURD数据。</p><blockquote><p>面向生产环境而设计的 Java 应用开发框架。它的核心设计目标是提供一个简单的交互接口给开发者，开发者可以在此基础上灵活的构建自己的应用程序。无论是应用类程序还是框架类工具，Hasor 都会给予你最有力的支持。区别于其它框架的是 Hasor 有着自己一套完整的扩展体系。无论您是一般的应用工程，还是开发工具框架类项目。Hasor都会是一个强有力的基石。</p></blockquote><p>简单来说，就是不需要写代码，只需要数据库稍加配置就可以实现接口，用来做报表类的蛮好的。感觉用了这个东西，简单的功能就不需要后端了，前端会一点Sql就可以做了。废话不多讲，开始集成到SpringBoot项目中！</p><h1 id="代码配置"><a class="markdownIt-Anchor" href="#代码配置"></a> 代码配置</h1><h2 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--parent--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hasor 与spring连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.hasor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hasor-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 查看最新版本：https://mvnrepository.com/artifact/net.hasor/hasor-spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hasor dataway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.hasor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hasor-dataway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 查看最新版本：https://mvnrepository.com/artifact/net.hasor/hasor-dataway --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-boot-starter-jdbc自动配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mysql 连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简化代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 Dataway 功能（默认不启用）</span></span><br><span class="line"><span class="attr">HASOR_DATAQL_DATAWAY</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 开启 ui 管理功能（注意生产环境必须要设置为 false，否则会造成严重的生产安全事故）</span></span><br><span class="line"><span class="attr">HASOR_DATAQL_DATAWAY_ADMIN</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># （可选）API工作路径</span></span><br><span class="line"><span class="attr">HASOR_DATAQL_DATAWAY_API_URL</span>=<span class="string">/api/</span></span><br><span class="line"><span class="comment"># （可选）ui 的工作路径，只有开启 ui 管理功能后才有效</span></span><br><span class="line"><span class="attr">HASOR_DATAQL_DATAWAY_UI_URL</span>=<span class="string">/interface-ui/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.3.30:3306/hasor?serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="启动类"><a class="markdownIt-Anchor" href="#启动类"></a> 启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHasor()</span>      <span class="comment">// 在Spring 中启用 Hasor</span></span><br><span class="line"><span class="meta">@EnableHasorWeb()</span>   <span class="comment">// 将 hasor-web 配置到 Spring 环境中，Dataway 的 UI 是通过 hasor-web 提供服务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hasor-module"><a class="markdownIt-Anchor" href="#hasor-module"></a> Hasor Module</h2><blockquote><p>Module 是使用 Hasor 的统一入口，它的地位类似于 java 的 main 方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@DimModule &#x2F;&#x2F; 标记Mode</span><br><span class="line">@Component &#x2F;&#x2F; 注入Spring</span><br><span class="line">public class HasorMode implements Module &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource; &#x2F;&#x2F; 使用数据库连接</span><br><span class="line">    @Override</span><br><span class="line">    public void loadModule(ApiBinder apiBinder) throws Throwable &#123;</span><br><span class="line">        apiBinder.installModule(new JdbcModule(Level.Full,dataSource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页面配置"><a class="markdownIt-Anchor" href="#页面配置"></a> 页面配置</h1><p>访问<a href="http://localhost:8080/interface-ui/#/">http://localhost:8080/interface-ui/#/</a> 可以看到接口管理页面</p><p>添加一个接口，如图配置，下附代码，以供复制（<strong>这个接口只是为了演示并测试功能，并非必要信息</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200530100254.png" alt="image-20200530100254752" /></p><h2 id="代码逻辑区"><a class="markdownIt-Anchor" href="#代码逻辑区"></a> 代码逻辑区</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 使用 DataQL 拼接字符串</span><br><span class="line">var orderBy = $&#123;orderField&#125; + &quot; &quot; + $&#123;orderType&#125;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 声明一个可以注入的 <span class="keyword">SQL</span></span><br><span class="line">var dataSet <span class="operator">=</span> @<span class="variable">@sql</span>(apiType,orderString) <span class="operator">&lt;</span><span class="operator">%</span></span><br><span class="line">    select * from interface_info where api_type = #&#123;apiType&#125; order by $&#123;orderString&#125; ;</span><br><span class="line"><span class="operator">%</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 执行这个 <span class="keyword">SQL</span>，并返回结果</span><br><span class="line">return dataSet($&#123;apiType&#125;, orderBy);</span><br></pre></td></tr></table></figure><h2 id="参数区"><a class="markdownIt-Anchor" href="#参数区"></a> 参数区</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;apiType&quot;</span>: <span class="string">&quot;DataQL&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;orderField&quot;</span>:<span class="string">&quot;api_type&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;orderType&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h2><ul><li>接口发布后才能访问</li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li>使用手册 <a href="https://www.bookstack.cn/read/hasor-4.1.1/86a6a28d2351efc7.md">https://www.bookstack.cn/read/hasor-4.1.1/86a6a28d2351efc7.md</a></li><li>官网文档<a href="https://www.hasor.net/web/overview/catalog.html">https://www.hasor.net/web/overview/catalog.html</a></li><li>本篇源码<a href="https://github.com/kthirty/JavaProject/tree/master/springboot/spring-boot-hasor">https://github.com/kthirty/JavaProject/tree/master/springboot/spring-boot-hasor</a></li><li>本篇使用Mysql的docker-compose 文件 <a href="https://github.com/kthirty/docker/tree/master/docker-compose/hasor">https://github.com/kthirty/docker/tree/master/docker-compose/hasor</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hasor </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ入门</title>
      <link href="posts/46080/"/>
      <url>posts/46080/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>RocketMQ是一个纯Java、分布式、队列模型的开源消息中间件，前身是MetaQ，是阿里参考Kafka特点研发的一个队列模型的消息中间件，后开源给apache基金会成为了apache的顶级开源项目，具有高性能、高可靠、高实时、分布式特点。</p><h1 id="消息队列"><a class="markdownIt-Anchor" href="#消息队列"></a> 消息队列</h1><h2 id="什么是消息队列"><a class="markdownIt-Anchor" href="#什么是消息队列"></a> 什么是消息队列</h2><p>消息队列（Message Queue）：简称MQ，顾名思义就是一个传递消息且符合队列原则（先进先出）的中间件；</p><p>一般有两个角色：生产者（负责生产并发送消息），消费者（负责接收并消费消息）；</p><h2 id="为什么要使用消息队列"><a class="markdownIt-Anchor" href="#为什么要使用消息队列"></a> 为什么要使用消息队列</h2><p><strong>消息队列一般有三种使用场景</strong></p><h3 id="解耦"><a class="markdownIt-Anchor" href="#解耦"></a> 解耦</h3><p>解耦就是解除系统的耦合度，比如现在有一个购买场景，需要<strong>减库存</strong>、<strong>扣款</strong>、<strong>生成订单</strong>，三项操作。<br />不使用消息队列操作的话就需要依次调用三项操作，这样的话，购买这边就与三个系统关联耦合起来了。<br />使用消息队列，购买只需要发送三个消息，然后消费者接受消息并进行业务逻辑操作，这样对于购买来说，只需要发送指令，哪个项目进行业务处理不需要关心，如何处理也不需要关心，这样就解除了耦合度。</p><h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h3><p>还是上面的购买场景，假如现在扣款操作耗时很久，就可以使用消息队列异步操作，购买接口的耗时也就只是发送消息的耗时，实际业务处理是异步处理。</p><h3 id="削峰限流"><a class="markdownIt-Anchor" href="#削峰限流"></a> 削峰/限流</h3><p>比如现在有抢购场景，同一个接口有数十万用户调用，服务器压力过大，直接崩溃。<br />可以使用消息队列进行削峰，消息队列中的数据会依次被消费，且不会突然给出量大到服务器无法处理的消息。让服务可以慢慢消费，牺牲时间，可以保证服务器可用性。</p><h2 id="队列模型与主题模型"><a class="markdownIt-Anchor" href="#队列模型与主题模型"></a> 队列模型与主题模型</h2><h3 id="队列模型"><a class="markdownIt-Anchor" href="#队列模型"></a> 队列模型</h3><p>也叫点对点式消息队列，客户端分为生产者和消费者，队列中的消息只能被一个消费者消费，也可以说一个生产者对一个消费者。</p><h3 id="主题模型"><a class="markdownIt-Anchor" href="#主题模型"></a> 主题模型</h3><p>也叫订阅式消息队列，类似设计模式中的观察者模式，有兴趣的可以查看<a href="/posts/18992/">Java设计模式篇</a><br />在主题模型中，消息的生产者称为 <strong>发布者(Publisher)</strong> ，消息的消费者称为 <strong>订阅者(Subscriber)</strong> ，存放消息的容器称为 <strong>主题(Topic)</strong> 。<br />其中，发布者将消息发送到指定主题中，订阅者需要 <strong>提前订阅主题</strong> 才能接受特定主题的消息。</p><h2 id="消息队列会产生什么问题"><a class="markdownIt-Anchor" href="#消息队列会产生什么问题"></a> 消息队列会产生什么问题</h2><p>没有哪一门技术是“银弹”，消息队列也有它的副作用。</p><ol><li>原本直接调用的代码现在添加一个消息中间件，无疑增加了系统的复杂度，给开发维护造成了困扰。</li><li>可用性，如果消息队列挂了，那相应的系统也无法正常运行。</li><li>可靠性<ol><li>如果在消息发送过程中，消息队列挂了，是否会丢失消息。</li><li>消息重复消费（幂等性）</li><li>分布式事务问题（多消费者中任意一个出现错误则需要全部回滚）</li><li>如果消费者过于缓慢，生产者消息又多，这样又会造成消息堆积</li></ol></li></ol><h1 id="rocketmq"><a class="markdownIt-Anchor" href="#rocketmq"></a> RocketMQ</h1><h2 id="rocketmq是什么"><a class="markdownIt-Anchor" href="#rocketmq是什么"></a> RocketMQ是什么</h2><p><code>RocketMQ</code> 是一个 <strong>队列模型</strong> 的消息中间件，具有<strong>高性能、高可靠、高实时、分布式</strong> 的特点。它是一个采用 <code>Java</code> 语言开发的分布式的消息系统，由阿里巴巴团队开发，在2016年底贡献给 <code>Apache</code>，成为了 <code>Apache</code> 的一个顶级项目。 在阿里内部，<code>RocketMQ</code> 很好地服务了集团大大小小上千个应用，在每年的双十一当天，更有不可思议的万亿级消息通过 <code>RocketMQ</code> 流转。</p><h2 id="rocketmq架构组成"><a class="markdownIt-Anchor" href="#rocketmq架构组成"></a> RocketMQ架构组成</h2><h3 id="架构图"><a class="markdownIt-Anchor" href="#架构图"></a> 架构图</h3><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200528142435.jpg" alt="RocketMQ" /></p><h3 id="架构组成部分"><a class="markdownIt-Anchor" href="#架构组成部分"></a> 架构组成部分</h3><h4 id="nameserver集群"><a class="markdownIt-Anchor" href="#nameserver集群"></a> NameServer集群</h4><blockquote><p>主要负责对于源数据的管理，包括了对于<strong>Topic</strong>和路由信息的管理。</p></blockquote><ul><li><strong>NameServer</strong>是一个功能齐全的服务器，其角色类似Dubbo中的Zookeeper，但NameServer与Zookeeper相比更轻量。主要是因为每个NameServer节点互相之间是独立的，没有任何信息交互。</li><li><strong>NameServer</strong>压力不会太大，平时主要开销是在维持心跳和提供Topic-Broker的关系数据。</li><li>但有一点需要注意，Broker向NameServer发心跳时， 会带上当前自己所负责的所有<strong>Topic</strong>信息，如果<strong>Topic</strong>个数太多（万级别），会导致一次心跳中，就Topic的数据就几十M，网络情况差的话， 网络传输失败，心跳失败，导致NameServer误认为Broker心跳失败。</li><li><strong>NameServer</strong> 被设计成几乎无状态的，可以横向扩展，节点之间相互之间无通信，通过部署多台机器来标记自己是一个伪集群。</li><li>每个 Broker 在启动的时候会到 NameServer 注册，Producer 在发送消息前会根据 Topic 到 <strong>NameServer</strong> 获取到 Broker 的路由信息，Consumer 也会定时获取 Topic 的路由信息。</li></ul><p>Producer</p><blockquote><p>消息生产者，负责生产消息，并将消息发送给<strong>Broker集群</strong>，一般由业务系统作为生产者。</p></blockquote><ul><li><strong>Producer</strong>由用户进行分布式部署，消息由<strong>Producer</strong>通过多种负载均衡模式发送到<strong>Broker</strong>集群，发送低延时，支持快速失败。</li><li><strong>RocketMQ</strong> 提供了三种方式发送消息：同步、异步和单向</li><li><strong>同步发送</strong>：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。</li><li><strong>异步发送</strong>：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。</li><li><strong>单向发送</strong>：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。</li></ul><p>Broker</p><blockquote><p>消息中转角色，负责<strong>存储消息</strong>，转发消息。</p></blockquote><ul><li><strong>Broker</strong>是具体提供业务的服务器，单个Broker节点与所有的NameServer节点保持长连接及心跳，并会定时将<strong>Topic</strong>信息注册到NameServer，顺带一提底层的通信和连接都是<strong>基于Netty实现</strong>的。</li><li><strong>Broker</strong>负责消息存储，以Topic为纬度支持轻量级的队列，单机可以支撑上万队列规模，支持消息推拉模型。</li><li>官网上有数据显示：具有<strong>上亿级消息堆积能力</strong>，同时可<strong>严格保证消息的有序性</strong>。</li></ul><p>Consumer</p><blockquote><p>消息消费者，负责消费消息（实际业务处理），一般由后台系统作为消费者。</p></blockquote><ul><li><strong>Consumer</strong>也由用户部署，支持PUSH和PULL两种消费模式，支持<strong>集群消费</strong>和<strong>广播消息</strong>，提供<strong>实时的消息订阅机制</strong>。</li><li><strong>Pull</strong>：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。</li><li><strong>Push</strong>：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push 称为被动消费类型，但从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push 首先要注册消费监听器，当监听器处触发后才开始消费消息。</li></ul><h2 id="消息领域模型"><a class="markdownIt-Anchor" href="#消息领域模型"></a> 消息领域模型</h2><h3 id="message"><a class="markdownIt-Anchor" href="#message"></a> Message</h3><p>Message（消息）就是要传输的信息。<br />一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。<br />一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 Key 并在 Broker 上查找此消息以便在开发期间查找问题。</p><h3 id="topic"><a class="markdownIt-Anchor" href="#topic"></a> Topic</h3><p>Topic（主题）可以看做消息的规类，它是消息的第一级类型。比如一个电商系统可以分为：交易消息、物流消息等，一条消息必须有一个 Topic 。<br />Topic 与生产者和消费者的关系非常松散，一个 Topic 可以有0个、1个、多个生产者向其发送消息，一个生产者也可以同时向不同的 Topic 发送消息。一个 Topic 也可以被 0个、1个、多个消费者订阅。</p><h3 id="tag"><a class="markdownIt-Anchor" href="#tag"></a> Tag</h3><p>Tag（标签）可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同 Topic 而不同的 Tag 来标识。比如交易消息又可以分为：交易创建消息、交易完成消息等，一条消息<strong>可以没有Tag</strong> 。<br />标签有助于保持您的代码干净和连贯，并且还可以为 RocketMQ 提供的查询系统提供帮助。</p><h3 id="group"><a class="markdownIt-Anchor" href="#group"></a> Group</h3><p>Group（分组），一个分组可以订阅多个Topic。<br />分为ProducerGroup（生产者组）ConsumerGroup（消费者组），比如多个秒杀消息发送者集群部署，那么这些服务合起来就是一个 秒杀生产者组。</p><h4 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> Queue</h4><p>在Kafka中叫Partition，每个Queue内部是有序的，在RocketMQ中分为读和写两种队列，一般来说读写队列数量一致，如果不一致就会出现很多问题。</p><h4 id="message-queue"><a class="markdownIt-Anchor" href="#message-queue"></a> Message Queue</h4><p>Message Queue（消息队列），主题被划分为一个或多个子主题，即消息队列。<br />一个 Topic 下可以设置多个消息队列，发送消息时执行该消息的 Topic ，RocketMQ 会轮询该 Topic 下的所有队列将消息发出去。<br />消息的物理管理单位。一个Topic下可以有多个Queue，Queue的引入使得消息的存储可以分布式集群化，具有了水平扩展能力。</p><h4 id="offset"><a class="markdownIt-Anchor" href="#offset"></a> Offset</h4><p>在RocketMQ 中，所有消息队列都是持久化，长度无限的数据结构，所谓长度无限是指队列中的每个存储单元都是定长，访问其中的存储单元使用Offset 来访问，Offset 为 java long 类型，64 位，理论上在 100年内不会溢出，所以认为是长度无限。也可以认为 Message Queue 是一个长度无限的数组，Offset 就是下标。</p><h2 id="消息顺序"><a class="markdownIt-Anchor" href="#消息顺序"></a> 消息顺序</h2><p>消息顺序分为两种：<strong>Orderly</strong>（顺序消费），按照先进先出依次消费。<strong>Concurrently</strong>（并行消费），无顺序并行消费，并行数量受每个消费者指定的线程池数量限制。</p><h2 id="完整通讯流程"><a class="markdownIt-Anchor" href="#完整通讯流程"></a> 完整通讯流程</h2><ol><li>生产者从NameServer集群中随机选择一个节点建立长链接。</li><li>定期从NameServer中获取Broker Master信息并建立长连接，并定期向Broker发送心跳。</li><li>生产者发送一条消息到Broker Master</li><li>消费者从Broker集群中获取到消息</li><li>消费消息</li></ol><h2 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h2><h3 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h3><p>优点</p><ul><li>单机吞吐量：十万级</li><li>可用性：非常高，分布式架构</li><li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li><li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li><li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li><li>天生为互联网金融行业而生，历经多次双十一磨炼。可靠性高</li></ul><p>缺点</p><ul><li>客户端支持语言不多，目前只是Java和C++ 。</li><li>没有在 mq 核心中去实现<strong>JMS</strong>等接口，有些系统要迁移需要修改大量代码</li></ul><h3 id="消息去重"><a class="markdownIt-Anchor" href="#消息去重"></a> 消息去重</h3><p>原则：使用业务端逻辑判断保持幂等性问题。</p><p>幂等性：就是说同参数下消费端无论消费多少次都和消费一次结果是一样的。</p><p>去重策略：每一条消息都有唯一的编号（唯一流水号），且保证消息处理结束后会记录这个唯一流水号</p><h3 id="消息的可用性"><a class="markdownIt-Anchor" href="#消息的可用性"></a> 消息的可用性</h3><p>当我们选择好了集群模式之后，那么我们需要关心的就是怎么去存储和复制这个数据，<strong>RocketMQ</strong>对消息的刷盘提供了同步和异步的策略来满足我们的，当我们选择同步刷盘之后，如果刷盘超时会给返回FLUSH_DISK_TIMEOUT，如果是异步刷盘不会返回刷盘相关信息，选择同步刷盘可以尽最大程度满足我们的消息不会丢失。</p><p>除了存储有选择之后，我们的主从同步提供了同步和异步两种模式来进行复制，当然选择同步可以提升可用性，但是消息的发送RT时间会下降10%左右。</p><p><strong>RocketMQ</strong>采用的是混合型的存储结构，即为<strong>Broker</strong>单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。</p><p>而<strong>Kafka</strong>采用的是独立型的存储结构，每个队列一个文件。</p><h3 id="rocketmq-刷盘实现"><a class="markdownIt-Anchor" href="#rocketmq-刷盘实现"></a> RocketMQ 刷盘实现</h3><p><strong>Broker</strong> 在消息的存取时直接操作的是内存（内存映射文件），这可以提供系统的吞吐量，但是无法避免机器掉电时数据丢失，所以需要持久化到磁盘中。</p><p>刷盘的最终实现都是使用<strong>NIO</strong>中的 MappedByteBuffer.force() 将映射区的数据写入到磁盘，如果是同步刷盘的话，在<strong>Broker</strong>把消息写到<strong>CommitLog</strong>映射区后，就会等待写入完成。</p><p>异步而言，只是唤醒对应的线程，不保证执行的时机，流程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200528154510.jpg" alt="" /></p><h3 id="分布式事务"><a class="markdownIt-Anchor" href="#分布式事务"></a> 分布式事务</h3><h4 id="half-message半消息"><a class="markdownIt-Anchor" href="#half-message半消息"></a> Half Message(半消息)</h4><p><strong>是指暂不能被Consumer消费的消息</strong>。Producer 已经把消息成功发送到了 Broker 端，但此消息被标记为<code>暂不能投递</code>状态，处于该种状态下的消息称为半消息。需要 Producer</p><p>对消息的<code>二次确认</code>后，Consumer才能去消费它。</p><h4 id="消息回查"><a class="markdownIt-Anchor" href="#消息回查"></a> 消息回查</h4><p>由于网络闪段，生产者应用重启等原因。导致 <strong>Producer</strong> 端一直没有对 <strong>Half Message(半消息)</strong> 进行 <strong>二次确认</strong>。这是<strong>Brock</strong>服务器会定时扫描<code>长期处于半消息的消息</code>，会</p><p>主动询问 <strong>Producer</strong>端 该消息的最终状态(<strong>Commit或者Rollback</strong>),该消息即为 <strong>消息回查</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200528154747.png" alt="" /></p><ol><li>A服务先发送个Half Message给Brock端，消息中携带 B服务 即将要+100元的信息。</li><li>当A服务知道Half Message发送成功后，那么开始第3步执行本地事务。</li><li>执行本地事务(会有三种情况1、执行成功。2、执行失败。3、网络等原因导致没有响应)</li><li>如果本地事务成功，那么Product像Brock服务器发送Commit,这样B服务就可以消费该message。</li><li>如果本地事务失败，那么Product像Brock服务器发送Rollback,那么就会直接删除上面这条半消息。</li><li>如果因为网络等原因迟迟没有返回失败还是成功，那么会执行RocketMQ的回调接口,来进行事务的回查。</li></ol><h3 id="回溯消费"><a class="markdownIt-Anchor" href="#回溯消费"></a> 回溯消费</h3><p>回溯消费是指Consumer已经消费成功的消息，由于业务上的需求需要重新消费，要支持此功能，Broker在向Consumer投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度。</p><p>例如由于Consumer系统故障，恢复后需要重新消费1小时前的数据，那么Broker要提供一种机制，可以按照时间维度来回退消费进度。</p><p><strong>RocketMQ</strong>支持按照时间回溯消费，时间维度精确到毫秒，可以向前回溯，也可以向后回溯。</p><h3 id="消息堆积"><a class="markdownIt-Anchor" href="#消息堆积"></a> 消息堆积</h3><p>消息中间件的主要功能是异步解耦，还有个重要功能是挡住前端的数据洪峰，保证后端系统的稳定性，这就要求消息中间件具有一定的消息堆积能力，消息堆积分以下两种情况：</p><ul><li>消息堆积在内存<strong>Buffer</strong>，一旦超过内存<strong>Buffer</strong>，可以根据一定的丢弃策略来丢弃消息，如CORBA Notification规范中描述。适合能容忍丢弃消息的业务，这种情况消息的堆积能力主要在于内存<strong>Buffer</strong>大小，而且消息堆积后，性能下降不会太大，因为内存中数据多少对于对外提供的访问能力影响有限。</li><li>消息堆积到持久化存储系统中，例如DB，KV存储，文件记录形式。 当消息不能在内存Cache命中时，要不可避免的访问磁盘，会产生大量读IO，读IO的吞吐量直接决定了消息堆积后的访问能力。</li><li>评估消息堆积能力主要有以下四点：</li><li>消息能堆积多少条，多少字节？即消息的堆积容量。</li><li>消息堆积后，发消息的吞吐量大小，是否会受堆积影响？</li><li>消息堆积后，正常消费的Consumer是否会受影响？</li><li>消息堆积后，访问堆积在磁盘的消息时，吞吐量有多大？</li></ul><h3 id="定时消息"><a class="markdownIt-Anchor" href="#定时消息"></a> 定时消息</h3><p>定时消息是指消息发到<strong>Broker</strong>后，不能立刻被<strong>Consumer</strong>消费，要到特定的时间点或者等待特定的时间后才能被消费。</p><p>如果要支持任意的时间精度，在<strong>Broker</strong>层面，必须要做消息排序，如果再涉及到持久化，那么消息排序要不可避免的产生巨大性能开销。</p><p><strong>RocketMQ</strong>支持定时消息，但是不支持任意时间精度，支持特定的level，例如定时5s，10s，1m等。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 架构 </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目构建基础之统一异常处理</title>
      <link href="posts/56935/"/>
      <url>posts/56935/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前置说明"><a class="markdownIt-Anchor" href="#前置说明"></a> 前置说明</h1><p>多余的try catch 很影响项目美观，但是异常又不能不处理，这篇主要讲一下如何在springboot项目中统一处理异常。<br />此篇因为需要在错误时返回json数据，故引用了<a href="/posts/29715/">Java项目构建基础之统一响应 </a> 篇的统一响应。</p><h1 id="必要jar包"><a class="markdownIt-Anchor" href="#必要jar包"></a> 必要jar包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- lombok 简化代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建自定义异常"><a class="markdownIt-Anchor" href="#创建自定义异常"></a> 创建自定义异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgumentException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里是统一响应中的状态码与信息</span></span><br><span class="line">    <span class="keyword">private</span> IResultCode resultCode;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgumentException</span><span class="params">(IResultCode resultCode,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resultCode.getMessage()+message);</span><br><span class="line">        <span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证工具类类似asserts"><a class="markdownIt-Anchor" href="#验证工具类类似asserts"></a> 验证工具类（类似Asserts）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgumentUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证参数非null</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 需要验证的变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCode 如果为null时希望接口返回什么</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/22</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notNull</span><span class="params">(<span class="meta">@Nullable</span> Object o, IResultCode resultCode,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == o)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(resultCode,message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常统一处理"><a class="markdownIt-Anchor" href="#异常统一处理"></a> 异常统一处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">@ResponseBody</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 父类异常处理</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @ExceptionHandler(Exception.class)</span><br><span class="line">    public R handleException(Exception e)&#123;</span><br><span class="line">        return R.fail(ResultCode.FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 参数异常</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @ExceptionHandler(ArgumentException.class)</span><br><span class="line">    public R handleArgumentException(ArgumentException e)&#123;</span><br><span class="line">        return R.fail(e.getResultCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 空指针异常</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @ExceptionHandler(NullPointerException.class)</span><br><span class="line">    public R handleNullPointerException(NullPointerException e)&#123;</span><br><span class="line">        return R.fail(ResultCode.FAILURE,&quot;空指针异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试请求"><a class="markdownIt-Anchor" href="#测试请求"></a> 测试请求</h1><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;test&#x2F;param&quot;)</span><br><span class="line">public class TestParamController &#123;</span><br><span class="line">    @GetMapping(&quot;not-null&quot;)</span><br><span class="line">    public R testParamNotNull(String name)&#123;</span><br><span class="line">        ArgumentUtils.notNull(name, ResultCode.PARAM_MISS,&quot;name 不可为空&quot;);</span><br><span class="line">        return R.success();</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(&quot;null-point&quot;)</span><br><span class="line">    public R testNullPoint(Integer age)&#123;</span><br><span class="line">        int i &#x3D; age.intValue();</span><br><span class="line">        return R.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><ol><li>请求http://localhost:8080/test/param/not-null 返回<code>&#123;&quot;code&quot;:400,&quot;success&quot;:false,&quot;data&quot;:null,&quot;message&quot;:&quot;缺少必要的请求参数name 不可为空&quot;&#125;</code></li><li>请求http://localhost:8080/test/param/not-null?name=test返回<code>&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;data&quot;:null,&quot;message&quot;:&quot;操作成功&quot;&#125;</code></li><li>请求http://localhost:8080/test/param/null-point 返回<code>&#123;&quot;code&quot;:400,&quot;success&quot;:false,&quot;data&quot;:null,&quot;message&quot;:&quot;空指针异常&quot;&#125;</code></li><li>请求http://localhost:8080/test/param/null-point?age=1返回<code>&#123;&quot;code&quot;:200,&quot;success&quot;:true,&quot;data&quot;:null,&quot;message&quot;:&quot;操作成功&quot;&#125;</code></li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>使用<code>@RestControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解实现全局异常处理</p><p>改进Asserts抛出自定义异常</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交规范</title>
      <link href="posts/9200/"/>
      <url>posts/9200/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>良好的Commit Message有利于代码审查，能更快速查找变更记录，并且可以直接生成Change log。</p></blockquote><h1 id="规范模板"><a class="markdownIt-Anchor" href="#规范模板"></a> 规范模板</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Type</span>&gt;</span>(<span class="tag">&lt;<span class="name">Scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">Subject</span>&gt;</span></span><br><span class="line">&lt;空行&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;空行&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模板说明"><a class="markdownIt-Anchor" href="#模板说明"></a> 模板说明</h1><h2 id="header"><a class="markdownIt-Anchor" href="#header"></a> Header</h2><h3 id="type提交类型"><a class="markdownIt-Anchor" href="#type提交类型"></a> Type（提交类型）</h3><p>commit的类别，包含以下七种：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h3 id="scope范围"><a class="markdownIt-Anchor" href="#scope范围"></a> Scope（范围）</h3><p>commit的影响范围，比如会影响到哪个模块/性能/哪一层（业务层，持久层，缓存，rpc），如果是特性代码，可以写特性名称</p><h3 id="subject提交主题"><a class="markdownIt-Anchor" href="#subject提交主题"></a> Subject（提交主题）</h3><p>commit的简短描述，不超过50个字符。</p><ul><li>使用现在式，祈使句</li><li>第一个字母无需大写</li><li>结尾不用加句号</li></ul><h2 id="body内容明细"><a class="markdownIt-Anchor" href="#body内容明细"></a> Body（内容明细）</h2><p>跟subject一样，使用现在式，祈使句。应该说明提交代码的动机，以及跟前一个版本的对比。</p><h2 id="footer页脚"><a class="markdownIt-Anchor" href="#footer页脚"></a> Footer（页脚）</h2><p>Foot包含可以包含以下信息：</p><h3 id="不兼容变动"><a class="markdownIt-Anchor" href="#不兼容变动"></a> 不兼容变动</h3><p>以 BREAKING CHANGE 开头，后面是变更的具体描述，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed and</span><br><span class="line">    the inject option for the directive controller injection was removed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line">    Before:</span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#39;attribute&#39;,</span><br><span class="line">      myBind: &#39;bind&#39;,</span><br><span class="line">      myExpression: &#39;expression&#39;,</span><br><span class="line">      myEval: &#39;evaluate&#39;,</span><br><span class="line">      myAccessor: &#39;accessor&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#39;@&#39;,</span><br><span class="line">      myBind: &#39;@&#39;,</span><br><span class="line">      myExpression: &#39;&amp;&#39;,</span><br><span class="line">      &#x2F;&#x2F; myEval - usually not useful, but in cases where the expression is assignable, you can use &#39;&#x3D;&#39;</span><br><span class="line">      myAccessor: &#39;&#x3D;&#39; &#x2F;&#x2F; in directive&#39;s template change myAccessor() to myAccessor</span><br><span class="line">    &#125;</span><br><span class="line">    The removed &#96;inject&#96; wasn&#39;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure><h3 id="关闭jira"><a class="markdownIt-Anchor" href="#关闭jira"></a> 关闭JIRA</h3><p>需要与JIRA关联 例如：<code>Closes DB-1001, DB1002</code></p><h1 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h1><h2 id="添加用户邮箱字段"><a class="markdownIt-Anchor" href="#添加用户邮箱字段"></a> 添加用户邮箱字段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feat(用户): 添加字段</span><br><span class="line"></span><br><span class="line">添加用户邮箱字段</span><br></pre></td></tr></table></figure><h2 id="修复添加用户错误"><a class="markdownIt-Anchor" href="#修复添加用户错误"></a> 修复添加用户错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fix(用户): 修复保存用户错误</span><br><span class="line"></span><br><span class="line">修复保存用户错误（邮箱字段长度不足）</span><br></pre></td></tr></table></figure><h1 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h1><p>IDEA安装<strong>Git Commit Template</strong>插件</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 代码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发规范 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上Jar包启动通用脚本</title>
      <link href="posts/15953/"/>
      <url>posts/15953/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>SpringBoot纵横的时代，Jar包的启动与停止挺常用了，推荐一个通用脚本</p><h1 id="脚本源码"><a class="markdownIt-Anchor" href="#脚本源码"></a> 脚本源码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">JDK_HOME=<span class="string">&quot;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64/bin/java&quot;</span></span><br><span class="line">VM_OPTS=<span class="string">&quot;-Xms2048m -Xmx2048m&quot;</span></span><br><span class="line">SPB_OPTS=<span class="string">&quot;--spring.profiles.active=dev&quot;</span></span><br><span class="line">APP_LOCATION=<span class="string">&quot;/data/shell/app.jar&quot;</span></span><br><span class="line">APP_NAME=<span class="string">&quot;app&quot;</span></span><br><span class="line">PID_CMD=<span class="string">&quot;ps -ef |grep <span class="variable">$APP_NAME</span> |grep -v grep |awk &#x27;&#123;print \$2&#125;&#x27;&quot;</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=============================start==============================&quot;</span></span><br><span class="line"> PID=$(<span class="built_in">eval</span> <span class="variable">$PID_CMD</span>)</span><br><span class="line"> <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> is already running,PID is <span class="variable">$PID</span>&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    nohup <span class="variable">$JDK_HOME</span> <span class="variable">$VM_OPTS</span> -jar <span class="variable">$APP_LOCATION</span> <span class="variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;\<span class="variable">$1</span> &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nohup <span class="variable">$JDK_HOME</span> <span class="variable">$VM_OPTS</span> -jar <span class="variable">$APP_LOCATION</span> <span class="variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;\$1 &amp;&quot;</span></span><br><span class="line">    PID=$(<span class="built_in">eval</span> <span class="variable">$PID_CMD</span>)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> ]]; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;Start <span class="variable">$APP_NAME</span> successfully,PID is <span class="variable">$PID</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;Failed to start <span class="variable">$APP_NAME</span> !!!&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span>  </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=============================start==============================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=============================stop==============================&quot;</span></span><br><span class="line"> PID=$(<span class="built_in">eval</span> <span class="variable">$PID_CMD</span>)</span><br><span class="line"> <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$PID</span></span><br><span class="line">    sleep 5</span><br><span class="line">    PID=$(<span class="built_in">eval</span> <span class="variable">$PID_CMD</span>)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$APP_NAME</span> failed by kill -15 <span class="variable">$PID</span>,begin to kill -9 <span class="variable">$PID</span>&quot;</span></span><br><span class="line">      <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line">      sleep 2</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$APP_NAME</span> successfully by kill -9 <span class="variable">$PID</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$APP_NAME</span> successfully by kill -15 <span class="variable">$PID</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span> </span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> is not running!!!&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=============================stop==============================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================restart==============================&quot;</span></span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================restart==============================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================status==============================&quot;</span> </span><br><span class="line">  PID=$(<span class="built_in">eval</span> <span class="variable">$PID_CMD</span>)</span><br><span class="line">  <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> ]]; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> is running,PID is <span class="variable">$PID</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> is not running!!!&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================status==============================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">info</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================info==============================&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;APP_LOCATION: <span class="variable">$APP_LOCATION</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;APP_NAME: <span class="variable">$APP_NAME</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;JDK_HOME: <span class="variable">$JDK_HOME</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;VM_OPTS: <span class="variable">$VM_OPTS</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;SPB_OPTS: <span class="variable">$SPB_OPTS</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;=============================info==============================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">help</span></span>() &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;start: start server&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop: shutdown server&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;restart: restart server&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;status: display status of server&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;info: display info of server&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;help: help info&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">restart)</span><br><span class="line">    restart</span><br><span class="line">    ;;</span><br><span class="line">status)</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">info)</span><br><span class="line">    info</span><br><span class="line">    ;;</span><br><span class="line"><span class="built_in">help</span>)</span><br><span class="line">    <span class="built_in">help</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">help</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure><h1 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h1><p>需要先修改bash脚本中定义的变量</p><ul><li>JDK_HOME： JDK安装目录</li><li>VM_OPTS： Java vm参数</li><li>SPB_OPTS: 项目参数</li><li>APP_LOCATION: Jar包路径</li><li>APP_NAME：应用名，用于提示查找进程，一般为jar包名称</li></ul><h1 id="小技巧"><a class="markdownIt-Anchor" href="#小技巧"></a> 小技巧</h1><p>vim粘贴时可以使用<code>:set paste</code> 命令解决自动对齐造成的脚本紊乱</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抛弃PIO拥抱EasyExcel</title>
      <link href="posts/6479/"/>
      <url>posts/6479/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在Java项目中经常会用到Excel相关的功能（导入导出），而实现方式也只有Apache的POI(繁琐且慢)，最近发现了阿里开源的EasyExcel，主打简单省内存</p><h1 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h1><p>本篇将利用一个用户对象演示导入导出</p><h2 id="准备实体类"><a class="markdownIt-Anchor" href="#准备实体类"></a> 准备实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7108437244995175240L</span>;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;ID&quot;)</span><span class="comment">// 定义标题</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写导出"><a class="markdownIt-Anchor" href="#写导出"></a> 写（导出）</h1><h2 id="模拟数据"><a class="markdownIt-Anchor" href="#模拟数据"></a> 模拟数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> User((<span class="keyword">long</span>)i,<span class="string">&quot;王&quot;</span>+i,i+<span class="string">&quot;@gmail.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单写"><a class="markdownIt-Anchor" href="#简单写"></a> 简单写</h2><p>无特殊需求，将对象中字段全部导出</p><p><strong>注意：无论字段是否有<code>@ExcelProperty</code>注解，都会导出，默认标题为字段名；</strong></p><p><strong>如果需要忽略字段可以使用<code>@ExcelIgnore</code>注解忽略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleWrite</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">    EasyExcel.write(fileName, User.class).sheet(<span class="string">&quot;用户导出数据&quot;</span>).doWrite(<span class="keyword">this</span>.getData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="忽略某些字段"><a class="markdownIt-Anchor" href="#忽略某些字段"></a> 忽略某些字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excludeWrite</span><span class="params">(String fileName,String... excludeNames)</span></span>&#123;</span><br><span class="line">    Set&lt;String&gt; excludeColumnFiledNames = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(excludeNames));</span><br><span class="line">    EasyExcel</span><br><span class="line">        .write(fileName, User.class)</span><br><span class="line">        .excludeColumnFiledNames(excludeColumnFiledNames) <span class="comment">// 设置忽略字段</span></span><br><span class="line">        .sheet(<span class="string">&quot;用户导出数据-忽略&quot;</span>+String.join(<span class="string">&quot;,&quot;</span>,excludeColumnFiledNames)+<span class="string">&quot;字段&quot;</span>)</span><br><span class="line">        .doWrite(<span class="keyword">this</span>.getData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仅导出某些字段"><a class="markdownIt-Anchor" href="#仅导出某些字段"></a> 仅导出某些字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">includeWrite</span><span class="params">(String fileName,String... includeNames)</span></span>&#123;</span><br><span class="line">    Set&lt;String&gt; includeColumnFiledNames = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(includeNames));</span><br><span class="line">    EasyExcel</span><br><span class="line">        .write(fileName, User.class)</span><br><span class="line">        .includeColumnFiledNames(includeColumnFiledNames) <span class="comment">// 设置包含的字段</span></span><br><span class="line">        .sheet(<span class="string">&quot;用户导出数据-仅导出&quot;</span>+String.join(<span class="string">&quot;,&quot;</span>,includeColumnFiledNames)+<span class="string">&quot;字段&quot;</span>)</span><br><span class="line">        .doWrite(<span class="keyword">this</span>.getData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="格式转换"><a class="markdownIt-Anchor" href="#格式转换"></a> 格式转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class ConverterData &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 我想所有的 字符串起前面加上&quot;自定义：&quot;三个字</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @ExcelProperty(value &#x3D; &quot;字符串标题&quot;, converter &#x3D; CustomStringStringConverter.class)</span><br><span class="line">    private String string;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 我想写到excel 用年月日的格式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span><br><span class="line">    @ExcelProperty(&quot;日期标题&quot;)</span><br><span class="line">    private Date date;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 我想写到excel 用百分比表示</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @NumberFormat(&quot;#.##%&quot;)</span><br><span class="line">    @ExcelProperty(value &#x3D; &quot;数字标题&quot;)</span><br><span class="line">    private Double doubleData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加图片不推荐使用太慢"><a class="markdownIt-Anchor" href="#添加图片不推荐使用太慢"></a> 添加图片(不推荐使用，太慢)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ContentRowHeight(100)</span></span><br><span class="line"><span class="meta">@ColumnWidth(100 / 8)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File file;</span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果string类型 必须指定转换器，string默认转换成string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelProperty(converter = StringImageConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] byteArray;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据url导出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> URL url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="读导入"><a class="markdownIt-Anchor" href="#读导入"></a> 读（导入）</h1><p>这里的读取使用了监听器，读取不返回数据，读取后的业务操作要放到监听器里</p><h2 id="定义监听器"><a class="markdownIt-Anchor" href="#定义监听器"></a> 定义监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户读取信息监听器（监听读取Excel行为）</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/5/15 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImportListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class="line">    <span class="comment">// 这里可以解释为什么不能使用Spring管理，因为spring管理Bean是单例的，里面的对象也就会共享了，这里的importData就不一定是本次导入的数据了</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; importData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 本条读取出来的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context AnalysisContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/15 16:43</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(User user, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取到数据&quot;</span>+user);</span><br><span class="line">        importData.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/5/15 16:48</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;本次一共导入了&quot;</span>+importData.size()+<span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="填充"><a class="markdownIt-Anchor" href="#填充"></a> 填充</h1><h2 id="准备模板"><a class="markdownIt-Anchor" href="#准备模板"></a> 准备模板</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200515171301.jpg" alt="" /></p><p><strong>解释</strong></p><ul><li>{.name} 表示循环获取对象的name字段，或者map中key为name的value</li><li>{name} 只获取一次</li></ul><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleFill</span><span class="params">(String templateFileName,String fileName)</span></span>&#123;</span><br><span class="line">    EasyExcel.write(fileName).withTemplate(templateFileName) <span class="comment">// 模板文件</span></span><br><span class="line">        .sheet() <span class="comment">// 指定sheet页</span></span><br><span class="line">        .doFill(<span class="keyword">new</span> Write().getData()); <span class="comment">// 传入数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="填充后效果"><a class="markdownIt-Anchor" href="#填充后效果"></a> 填充后效果</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200515171631.jpg" alt="" /></p><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ul><li><a href="https://www.yuque.com/easyexcel/doc/">官方文档</a></li><li><a href="https://github.com/alibaba/easyexcel">GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目架构之的Long类型的坑</title>
      <link href="posts/10812/"/>
      <url>posts/10812/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>在Java项目中Long是很常用的类型，通常用来做ID字段，近期的分布式雪花ID也是可以使用Long类型的，今天来看一下Long类型在项目中的坑。<br />最近在项目中偶然看到所有Long类型的字段返回前端之后都变成了字符串，导致前端需要进行一次转换才能使用。当时很不解，后来找到了项目中之前架构师写的转换代码，所有的Long类型和BigInteger都转换成String返回给前端，当时就蒙了，满脑子都是问号？？？？？？为啥？</p><h1 id="为什么要转换"><a class="markdownIt-Anchor" href="#为什么要转换"></a> 为什么要转换？</h1><p>这个要聊到Long类型的最大承受数值，众所周知long 数据类型是 64 位、有符号的以二进制补码表示的整数 ，取值范围是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br />我们可以使用以下代码查看Long类型的最大和最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Long.MIN_VALUE); <span class="comment">// -9223372036854775808  最小数值</span></span><br><span class="line">System.out.println(Long.MAX_VALUE); <span class="comment">// 9223372036854775807   最大数值</span></span><br></pre></td></tr></table></figure><p>现在我们需要了解以下前端数字类型能承受的最大数值了。<br />在我们小学二年级学到过，JavaScript中的数字都是Number类型，所有数字都是采用IEEE 754 标准定义的双精度64位格式存储，即使整数也是如此这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。其结构如图：<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200511203206.png" alt="JavaScript Number结构图" /><br />各位的含义如下：</p><ul><li>1位（s） 用来表示符号位，0表示正数，1表示负数</li><li>11位（e） 用来表示指数部分</li><li>52位（f） 表示小数部分（即有效数字）</li></ul><p>双精度浮点数(<code>double</code>)并不是能够精确表示范围内的所有数， 虽然双精度浮点型的范围看上去很大: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2.23</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>308</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2.23\times10^{-308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">2</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.79</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">1.79\times10^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>。 可以表示的最大整数可以很大，但能够精确表示、使用算数运算的并没有这么大。因为小数部分最大是 52位，因此 JavaScript 中能精准表示的最大整数是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{53}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，十进制为 <code>9007199254740991</code>。所以JavaScript中存在一个概念<code>安全整数</code>取值范围为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>53</mn></msup></mrow><annotation encoding="application/x-tex">-2^{53}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup></mrow><annotation encoding="application/x-tex">2^{53}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 。而超过这个范围，会有两个或更多整数的双精度表示是相同的；即超过这个范围，有的整数是无法精确表示的，只能大约(round)到与它相近的浮点数（说到底就是科学计数法）表示，这种情况下叫做<code>不安全整数</code>，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span>);   <span class="comment">// 结果：9007199254740992，精度未丢失</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">2</span>);   <span class="comment">// 结果：9007199254740992，精度丢失</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">3</span>);   <span class="comment">// 结果：9007199254740994，精度未丢失</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">4</span>);   <span class="comment">// 结果：9007199254740996，精度丢失</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">5</span>);   <span class="comment">// 结果：9007199254740996，精度未丢失</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>Java中Long类型的数值范围为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>JavaScript中的Number类型安全整数范围为  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>53</mn></msup></mrow><annotation encoding="application/x-tex">-2^{53}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup></mrow><annotation encoding="application/x-tex">2^{53}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> ，超过这个范围数字将可能会丢失。</li><li>如果不做处理，当Long类型数字超过Number的安全整数范围后，数字可能会变化，导致跟原数据不一样。</li></ul><h1 id="有什么解决方法呢"><a class="markdownIt-Anchor" href="#有什么解决方法呢"></a> 有什么解决方法呢？</h1><h2 id="注解"><a class="markdownIt-Anchor" href="#注解"></a> 注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using=ToStringSerializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Long bankcardHash;</span><br></pre></td></tr></table></figure><h2 id="使用httpmessageconverter"><a class="markdownIt-Anchor" href="#使用httpmessageconverter"></a> 使用HttpMessageConverter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WEB 初始化相关配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder();</span><br><span class="line">        builder.serializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        ObjectMapper objectMapper = builder.build();</span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        <span class="comment">// Long转换为String传输</span></span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance); </span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">        objectMapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置为中国上海时区</span></span><br><span class="line">        objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;GMT+8&quot;</span>));</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(objectMapper));</span><br><span class="line">        converters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charsets.UTF_8));</span><br><span class="line">        converters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">        converters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">        converters.add(<span class="keyword">new</span> ResourceRegionHttpMessageConverter());</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源目录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//拦截器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支持跨域</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>因为Java中Long能承受的整数范围比JavaScript Number类型的安全整数范围大，所以可能会导致数字不准确。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="posts/18992/"/>
      <url>posts/18992/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>本篇将使用大白话加自己的理解详细介绍23种设计模式</p><h2 id="什么是设计模式"><a class="markdownIt-Anchor" href="#什么是设计模式"></a> 什么是设计模式</h2><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。简单说：</p><ul><li>模式：在某些场景下，针对某类问题的某种通用的解决方案</li><li>场景：项目所在的环境</li><li>问题：约束条件，项目目标等</li><li>解决方案：通用、可复用的设计，解决约束达到目标</li></ul><h2 id="设计模式的三个分类"><a class="markdownIt-Anchor" href="#设计模式的三个分类"></a> 设计模式的三个分类</h2><ul><li>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。</li><li>结构型模式：把类或对象结合在一起形成一个更大的结构。</li><li>行为型模式：类和对象如何交互，及划分责任和算法。</li></ul><h2 id="各分类中模式的关键点"><a class="markdownIt-Anchor" href="#各分类中模式的关键点"></a> 各分类中模式的关键点</h2><h3 id="创建型模式"><a class="markdownIt-Anchor" href="#创建型模式"></a> 创建型模式</h3><ul><li>单例模式：某个类只能有一个实例，提供一个全局的访问点。</li><li>简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</li><li>工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。</li><li>抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。</li><li>建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。</li><li>原型模式：通过复制现有的实例来创建新的实例。</li></ul><h3 id="结构型模式"><a class="markdownIt-Anchor" href="#结构型模式"></a> 结构型模式</h3><ul><li>适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。</li><li>组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构。</li><li>装饰模式：动态的给对象添加新的功能。</li><li>代理模式：为其他对象提供一个代理以便控制这个对象的访问。</li><li>亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象。</li><li>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。</li><li>桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。</li></ul><h3 id="行为型模式"><a class="markdownIt-Anchor" href="#行为型模式"></a> 行为型模式</h3><ul><li>模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。</li><li>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</li><li>策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。</li><li>状态模式：允许一个对象在其对象内部状态改变时改变它的行为。</li><li>观察者模式：对象间的一对多的依赖关系。</li><li>备忘录模式：在不破坏封装的前提下，保持对象的内部状态。</li><li>中介者模式：用一个中介对象来封装一系列的对象交互。</li><li>命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</li><li>访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</li><li>责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</li><li>迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</li></ul><h1 id="详解"><a class="markdownIt-Anchor" href="#详解"></a> 详解</h1><h2 id="创建型模式-2"><a class="markdownIt-Anchor" href="#创建型模式-2"></a> 创建型模式</h2><p><strong>创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。</strong></p><h3 id="简单工厂模式"><a class="markdownIt-Anchor" href="#简单工厂模式"></a> 简单工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-7</span></span><br><span class="line"><span class="comment"> * 简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 汽车父类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="comment">// 宝马</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m BWM&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奔驰</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m Benz&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BenzCar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BWM&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BMWCar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory.create(<span class="string">&quot;Benz&quot;</span>).whoAmI(); <span class="comment">// 输出I`m Benz</span></span><br><span class="line">        SimpleFactory.create(<span class="string">&quot;BWM&quot;</span>).whoAmI(); <span class="comment">// 输出I`m BWM</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-7</span></span><br><span class="line"><span class="comment"> * 这个其实和简单工厂模式差不太多，就是将工厂继续拆分，单一分工，达到更明细的产品生产</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarFactory carFactory1 = <span class="keyword">new</span> ChineseFactory();</span><br><span class="line">        CarFactory carFactory2 = <span class="keyword">new</span> GermanyFactory();</span><br><span class="line">        carFactory1.create(<span class="string">&quot;Benz&quot;</span>).whoAmI(); <span class="comment">// I`m Chinese Benz</span></span><br><span class="line">        carFactory1.create(<span class="string">&quot;BWM&quot;</span>).whoAmI(); <span class="comment">// I`m Chinese BWM</span></span><br><span class="line">        carFactory2.create(<span class="string">&quot;Benz&quot;</span>).whoAmI(); <span class="comment">// I`m Germany Benz</span></span><br><span class="line">        carFactory2.create(<span class="string">&quot;BWM&quot;</span>).whoAmI(); <span class="comment">// I`m Germany BWM</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国产奔驰</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseBenz</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m Chinese Benz&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进口奔驰</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GermanyBenz</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m Germany Benz&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国产宝马</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseBWM</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m Chinese BWM&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进口宝马</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GermanyBWM</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whoAmI</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;I`m Germany BWM&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂基类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">create</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国内工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">create</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseBenz();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BWM&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseBWM();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 德国工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GermanyFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">create</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GermanyBenz();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BWM&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GermanyBWM();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a class="markdownIt-Anchor" href="#抽象工厂模式"></a> 抽象工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-7</span></span><br><span class="line"><span class="comment"> * 抽象工厂模式主要设计产品组的概念，就是某一个工厂生产出配套的一系列产品。</span></span><br><span class="line"><span class="comment"> * 比如，一个奔驰的工厂，可以生产轮胎，车架，发动机....等零件，再由三方进行拼装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 选择一个工厂</span></span><br><span class="line">        AssemblyCarFactory assemblyCarFactory = <span class="keyword">new</span> BenzAssemblyCarFactory();</span><br><span class="line">        Engine engine = assemblyCarFactory.createEngine();</span><br><span class="line">        Frame frame = assemblyCarFactory.createFrame();</span><br><span class="line">        Tire tire = assemblyCarFactory.createTire();</span><br><span class="line">        <span class="comment">// 组装成车 ， 全奔驰配件的组装车</span></span><br><span class="line">        AssemblyCar benzAssemblyCar = <span class="keyword">new</span> AssemblyCar(engine, frame, tire);</span><br><span class="line">        System.out.println(benzAssemblyCar);<span class="comment">// AssemblyCar(engine=Engine(name=Benz Engine), frame=Frame(name=Benz Frame), tire=Tire(name=Benz Tire))</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奔驰组装车工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzAssemblyCarFactory</span> <span class="keyword">implements</span> <span class="title">AssemblyCarFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">createTire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzTire();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Frame <span class="title">createFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzFrame();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">createEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BenzEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装车工程父类（定义配件）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AssemblyCarFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">createTire</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Frame <span class="title">createFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">createEngine</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮胎</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tire</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzTire</span> <span class="keyword">extends</span> <span class="title">Tire</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BenzTire</span><span class="params">()</span> </span>&#123; <span class="keyword">super</span>(<span class="string">&quot;Benz Tire&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 车架</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BenzFrame</span><span class="params">()</span> </span>&#123; <span class="keyword">super</span>(<span class="string">&quot;Benz Frame&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引擎</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzEngine</span> <span class="keyword">extends</span> <span class="title">Engine</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="title">BenzEngine</span><span class="params">()</span> </span>&#123; <span class="keyword">super</span>(<span class="string">&quot;Benz Engine&quot;</span>); &#125; &#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssemblyCar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Frame frame;</span><br><span class="line">    <span class="keyword">private</span> Tire tire;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h3><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br />这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-7</span></span><br><span class="line"><span class="comment"> * 单例模式又分 饿汉模式、饱汉模式、嵌套模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton1.getInstance().say();<span class="comment">// 输出：饿汉模式</span></span><br><span class="line">        Singleton2.getInstance().say();<span class="comment">// 输出： 饱汉模式（线程安全）</span></span><br><span class="line">        Singleton3.getInstance().say();<span class="comment">// 输出：嵌套类模式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式：饿汉模式，很饿很着急，所以类加载时即创建实例对象，但是加载比较慢，获取对象比较快。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法私有化，禁止外部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// 创建私有静态实例，意味着这个类第一次使用的时候就会进行创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">&quot;饿汉模式&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本方法无意义，仅为了演示一种情况</span></span><br><span class="line"><span class="comment">     * 随便写一个静态方法，假如现在只想要调用静态方法（Singleton1.getData），并不需要生成Singleton1实例，但是没办法，已经生成了</span></span><br><span class="line"><span class="comment">     * 这样就造成了资源的浪费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String mode)</span> </span>&#123;<span class="keyword">return</span> mode;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饱汉模式(线程安全)： 饱汉模式，很饱不着急，延迟加载，啥时候用啥时候创建实例，存在线程安全问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法私有化，禁止外部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// 和饿汉模式相比，这边不需要先实例化出来，注意这里的 volatile，它是必须的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton2.class) &#123;</span><br><span class="line">                <span class="comment">// 这一次判断也是必须的，不然会有并发问题</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饱汉模式（线程安全）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嵌套类模式： 利用嵌套类可以访问外部类的静态属性和静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法私有化，禁止外部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 主要是使用了 嵌套类可以访问外部类的静态属性和静态方法 的特性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嵌套类模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建造者模式"><a class="markdownIt-Anchor" href="#建造者模式"></a> 建造者模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建造者模式Builder</span></span><br><span class="line"><span class="comment"> * 套路就是先 new 一个 Builder，然后可以链式地调用一堆方法，最后再调用一次 build() 方法，我们需要的对象就有了。</span></span><br><span class="line"><span class="comment"> * 其实就是有一个专门的builder用来构建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = User.builder().name(<span class="string">&quot;张三&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).build();</span><br><span class="line">        System.out.println(user); <span class="comment">// User(name=张三, password=123456)</span></span><br><span class="line">        <span class="comment">// lombok自动生成版</span></span><br><span class="line">        User1 user1 = User1.builder().name(<span class="string">&quot;李四&quot;</span>).password(<span class="string">&quot;123&quot;</span>).build();</span><br><span class="line">        System.out.println(user1);<span class="comment">// User1(name=李四, password=123)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(String name,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="comment">// 链式调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">password</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span> || password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名和密码必填&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(name, password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lombok自动生成builder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@lombok</span>.Builder</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User1</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a class="markdownIt-Anchor" href="#原型模式"></a> 原型模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式：这个用的很少</span></span><br><span class="line"><span class="comment"> * 作用是：用于创建重复对象。需要实现Cloneable 可以选择重写clone()方法。clone分为浅克隆和深克隆。浅克隆只是克隆引用，对象还是一个。深克隆是对象也新创建了一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CloneableUser user5 = CloneableUser.builder().name(<span class="string">&quot;王五&quot;</span>).password(<span class="string">&quot;000&quot;</span>).build();</span><br><span class="line">        CloneableUser user6 = user5.clone();</span><br><span class="line">        System.out.println(user5); <span class="comment">// CloneableUser(name=王五, password=000)</span></span><br><span class="line">        user5.setName(<span class="string">&quot;王五-1&quot;</span>);</span><br><span class="line">        System.out.println(user5); <span class="comment">// CloneableUser(name=王五-1, password=000)</span></span><br><span class="line">        System.out.println(user6); <span class="comment">// CloneableUser(name=王五, password=000)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneableUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> CloneableUser <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloneableUser(<span class="keyword">this</span>.name,<span class="keyword">this</span>.password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建型模式总结"><a class="markdownIt-Anchor" href="#创建型模式总结"></a> 创建型模式总结</h3><p>创建型模式总体上比较简单，它们的作用就是为了产生实例对象，算是各种工作的第一步了，因为我们写的是面向对象的代码，所以我们第一步当然是需要创建一个对象了。简单工厂模式最简单；工厂模式在简单工厂模式的基础上增加了选择工厂的维度，需要第一步选择合适的工厂；抽象工厂模式有产品族的概念，如果各个产品是存在兼容性问题的，就要用抽象工厂模式。单例模式就不说了，为了保证全局使用的是同一对象，一方面是安全性考虑，一方面是为了节省资源；建造者模式专门对付属性很多的那种类，为了让代码更优美,也可以更好的做变量检查；原型模式用得最少，了解和 Object 类中的 clone() 方法相关的知识即可。</p><hr /><h2 id="结构型模式-2"><a class="markdownIt-Anchor" href="#结构型模式-2"></a> 结构型模式</h2><p><strong>这节介绍的结构型模式旨在通过改变代码结构来达到解耦的目的，使得我们的代码容易维护和扩展。</strong></p><h3 id="代理模式"><a class="markdownIt-Anchor" href="#代理模式"></a> 代理模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理模式</span></span><br><span class="line"><span class="comment"> * 用一个代理来隐藏具体实现类的实现细节，通常还用于在真实的实现的前后添加一部分逻辑。</span></span><br><span class="line"><span class="comment"> * 既然说是代理，那就要对客户端隐藏真实实现，由代理来负责客户端的所有请求。当然，代理只是个代理，它不会完成实际的业务逻辑，而是一层皮而已，但是对于客户端来说，它必须表现得就是客户端需要的真实实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SayHelloProxy sayHelloProxy = <span class="keyword">new</span> SayHelloProxy();</span><br><span class="line">        sayHelloProxy.say();</span><br><span class="line">        <span class="comment">// 开始SayHello</span></span><br><span class="line">        <span class="comment">// Hello, I`m SayHelloServiceImpl!</span></span><br><span class="line">        <span class="comment">// 结束SayHello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISayHelloService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISayHelloService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I`m SayHelloServiceImpl!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理类，实际逻辑不变，一般在前后加其他操作（日志记录，耗时记录）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHelloProxy</span> <span class="keyword">implements</span> <span class="title">ISayHelloService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ISayHelloService sayHelloService = <span class="keyword">new</span> SayHelloServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始SayHello&quot;</span>);</span><br><span class="line">        sayHelloService.say();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束SayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> 适配器模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器模式</span></span><br><span class="line"><span class="comment"> * 分为：默认适配器模式、对象适配器模式、类适配器模式三类</span></span><br><span class="line"><span class="comment"> * 适配器模式做的就是，有一个接口需要实现，但是我们现成的对象都不满足，需要加一层适配器来进行适配。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ---------- 默认适配器</span></span><br><span class="line">        <span class="comment">// I`m Adapter Func1</span></span><br><span class="line">        <span class="comment">// I`m Func1</span></span><br><span class="line">        <span class="keyword">new</span> DefaultAdapter().func1();</span><br><span class="line">        <span class="comment">// ----------- 默认适配器结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------- 默认适配器开始-------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认适配器模式，一般用于顶级接口有很多接口，但是我们现在并不需要实现所有接口，可以加一个适配器，默认实现接口但是什么都不做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultAdapter</span> <span class="keyword">extends</span> <span class="title">TopInterfaceAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.func1();</span><br><span class="line">        System.out.println(<span class="string">&quot;I`m Func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TopInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopInterfaceAdapter</span> <span class="keyword">implements</span> <span class="title">TopInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I`m Adapter Func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------- 默认适配器结束-------------------</span></span><br><span class="line"><span class="comment">// ----------- 对象适配器开始-----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配器，一般用来将一个对象转换为其他类型对象，下面将用一个鸡和一个鸭来演示如何用适配器将鸡适配成鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectAdapter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cock cock = <span class="keyword">new</span> WildCock();</span><br><span class="line">        <span class="comment">// 创建适配器，将野鸡转换为鸭类</span></span><br><span class="line">        Duck duck = <span class="keyword">new</span> CockAdapter(cock);</span><br><span class="line">        duck.fly(); <span class="comment">// 鸡也会飞哦</span></span><br><span class="line">        duck.quack(); <span class="comment">// 咕咕叫</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>; <span class="comment">// 鸭的呱呱叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>; <span class="comment">// 飞</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>; <span class="comment">// 鸡的咕咕叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>; <span class="comment">// 飞</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 野鸡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildCock</span> <span class="keyword">implements</span> <span class="title">Cock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;咕咕叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸡也会飞哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">现在假设有一只野鸡，怎么样才能将它适配成鸭类呢，fly方法已经有了，但是没有鸭的quack方法，所以需要实现这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CockAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="comment">// 鸡类</span></span><br><span class="line">    Cock cock;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际是鸡叫</span></span><br><span class="line">        cock.gobble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cock.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------- 对象适配器结束-----------</span></span><br><span class="line"><span class="comment">// ----------- 类适配器开始-----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类适配器其实就是通过继承的形式，将顶级接口的某些方法默认实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I`m SomeThing Func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I`m SomeThing Func2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetAdapter</span> <span class="keyword">extends</span> <span class="title">SomeThing</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I`m TargetAdapter func3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> TargetAdapter();</span><br><span class="line">        target.func1();<span class="comment">// I`m SomeThing Func1</span></span><br><span class="line">        target.func2();<span class="comment">// I`m SomeThing Func2</span></span><br><span class="line">        target.func3();<span class="comment">// I`m TargetAdapter func3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------类适配器结束---------------</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>类适配和对象适配的异同:<ul><li>一个采用继承，一个采用组合；</li><li>类适配属于静态实现，对象适配属于组合的动态实现，对象适配需要多实例化一个对象。</li><li>总体来说，对象适配用得比较多。</li></ul></li><li>适配器模式和代理模式的异同:<ul><li>比较这两种模式，其实是比较对象适配器模式和代理模式，在代码结构上，它们很相似，都需要一个具体的实现类的实例。但是它们的目的不一样，代理模式做的是增强原方法的活；适配器做的是适配的活，为的是提供“把鸡包装成鸭，然后当做鸭来使用”，而鸡和鸭它们之间原本没有继承关系。<br /><img src="https://user-gold-cdn.xitu.io/2018/10/19/1668ac9a06d8cfb2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" /></li></ul></li></ul><h3 id="桥接模式"><a class="markdownIt-Anchor" href="#桥接模式"></a> 桥接模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.kthirty.structural;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-8</span></span><br><span class="line"><span class="comment"> * 桥接模式： 桥接模式的目的是为了将抽象部分与实现部分解耦，可以将一个 N * N 的系统进行拆分，减少类的数量。</span></span><br><span class="line"><span class="comment"> * 比如我们现在要画红色矩形、蓝色矩形、红色圆形、蓝色圆形 ，这样形状和颜色就形成了一个N*N 的系统</span></span><br><span class="line"><span class="comment"> * 普通形式的话，我们需要一共四个类实现各种画法,且不利于扩展</span></span><br><span class="line"><span class="comment"> * 桥接模式的优点是： 优秀的扩展能力</span></span><br><span class="line"><span class="comment"> * 缺点很明显：会增加系统的理解与设计难度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 蓝色圆形 ， new 一个圆形传入蓝色笔，就可以画出来蓝色圆形</span></span><br><span class="line">        Shape blueCircle = <span class="keyword">new</span> Circle(<span class="number">10</span>, <span class="keyword">new</span> BluePen());</span><br><span class="line">        blueCircle.draw();<span class="comment">// 用蓝色笔画图，radius:10, x:0, y:0</span></span><br><span class="line">        Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">10</span>, <span class="keyword">new</span> RedPen());</span><br><span class="line">        redCircle.draw(); <span class="comment">// 用红色笔画图，radius:10, x:0, y:0</span></span><br><span class="line">        Shape blueRectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>,<span class="number">2</span>, <span class="keyword">new</span> BluePen());</span><br><span class="line">        blueRectangle.draw(); <span class="comment">// 用蓝色笔画图，radius:0, x:1, y:2</span></span><br><span class="line">        Shape redRectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>,<span class="number">2</span>, <span class="keyword">new</span> RedPen());</span><br><span class="line">        redRectangle.draw(); <span class="comment">// 用红色笔画图，radius:0, x:1, y:2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们首先需要一个桥梁，它是一个接口，定义提供的接口方法。也就是画笔的父类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红色笔</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedPen</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用红色笔画图，radius:&quot;</span> + radius + <span class="string">&quot;, x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蓝色笔</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluePen</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用蓝色笔画图，radius:&quot;</span> + radius + <span class="string">&quot;, x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续如果需要增加颜色直接添加实现类即可</span></span><br><span class="line"><span class="comment">// 定义一个抽象类用来画的动作，可以传入不同颜色的画笔</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drawAPI);</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drawAPI.draw(radius, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drawAPI);</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drawAPI.draw(<span class="number">0</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="装饰模式"><a class="markdownIt-Anchor" href="#装饰模式"></a> 装饰模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰模式：给某个类添加装饰（其实就是添加某种功能）</span></span><br><span class="line"><span class="comment"> * 类似代理模式，但是代理模式用来做与原业务无关的事，不会修改原业务，装饰模式则是用来修改原业务的</span></span><br><span class="line"><span class="comment"> * 比如我们现在有个制造奶茶的类，如果需要记录制造耗时，则使用代理模式</span></span><br><span class="line"><span class="comment"> * 如果需要在奶茶添加佐料或者添加其他附加品则使用装饰模式</span></span><br><span class="line"><span class="comment"> * 装饰模式一般用在功能迭代上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorativeMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 红茶加柠檬</span></span><br><span class="line">        beverage = <span class="keyword">new</span> Lemon(<span class="keyword">new</span> RedTea());</span><br><span class="line">        System.out.println(beverage.getDescription());<span class="comment">// 红茶加柠檬</span></span><br><span class="line">        System.out.println(beverage.cost());<span class="comment">// 12.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象饮料类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="comment">// 返回描述</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 返回价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 红茶</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedTea</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;红茶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义调料，也就是装饰者的基类，此类必须继承自 饮料类：</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Condiment</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">// 柠檬调料</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lemon</span> <span class="keyword">extends</span> <span class="title">Condiment</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription()+<span class="string">&quot;加柠檬&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加柠檬另加两元</span></span><br><span class="line">        <span class="keyword">return</span> beverage.cost()+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="门面模式又叫外观模式"><a class="markdownIt-Anchor" href="#门面模式又叫外观模式"></a> 门面模式（又叫外观模式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 门面模式：也叫外观模式</span></span><br><span class="line"><span class="comment"> * 顾名思义，就是讲同类的几个东西放到一个门面里面，方便顾客购买使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line">        shapeMaker.drawRedCircle(); <span class="comment">// 用红色笔画图，radius:10, x:0, y:0</span></span><br><span class="line">        shapeMaker.drawRedRectangle(); <span class="comment">// 用红色笔画图，radius:0, x:1, y:2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方便起见，就直接使用桥接模式中定义好的类了，主要是为了解释门面模式的用法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Shape redCircle;</span><br><span class="line">    <span class="keyword">private</span> Shape redRectangle;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redCircle = <span class="keyword">new</span> Circle(<span class="number">10</span>,<span class="keyword">new</span> RedPen());</span><br><span class="line">        redRectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">new</span> RedPen());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 画红色圆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRedCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redCircle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 画红色矩形</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRedRectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redRectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合模式"><a class="markdownIt-Anchor" href="#组合模式"></a> 组合模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合模式：组合模式是将存在某种包含关系的数据组织在一起，</span></span><br><span class="line"><span class="comment"> * 典型的例子就是树状结构。例如菜单功能，一个菜单除了自己该有的属性，还可能包含子菜单;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortfolioMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Menu menu = <span class="keyword">new</span> Menu(<span class="string">&quot;测试一&quot;</span>, <span class="keyword">new</span> ArrayList&lt;&gt;()).addChild(<span class="keyword">new</span> Menu(<span class="string">&quot;测试二&quot;</span>, <span class="keyword">new</span> ArrayList&lt;&gt;()));</span><br><span class="line">        System.out.println(menu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; childMenus;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Menu <span class="title">addChild</span><span class="params">(Menu menu)</span></span>&#123;</span><br><span class="line">        childMenus.add(menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="享元模式"><a class="markdownIt-Anchor" href="#享元模式"></a> 享元模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元模式：享元模式尽可能的让用户复用已经有的对象，从而避免造成反复创建对象的资源浪费。</span></span><br><span class="line"><span class="comment"> * 比如Java字符串常量池，核心其实就是减少资源浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightPattern</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个池子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Flyweight&gt; pool= <span class="keyword">new</span> HashMap&lt;String,Flyweight&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String subject)</span></span>&#123;</span><br><span class="line">        Flyweight flyweight;</span><br><span class="line">        <span class="comment">// 不存在则添加，存在就复用</span></span><br><span class="line">        <span class="keyword">if</span> (pool.containsKey(subject))&#123;</span><br><span class="line">            flyweight=pool.get(subject);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> RealFlyweight(subject);</span><br><span class="line">            pool.put(subject,flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(pool.size());<span class="comment">//0</span></span><br><span class="line">        getFlyweight(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        System.out.println(pool.size());<span class="comment">//1</span></span><br><span class="line">        getFlyweight(<span class="string">&quot;english&quot;</span>);</span><br><span class="line">        System.out.println(pool.size());<span class="comment">//2</span></span><br><span class="line">        getFlyweight(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        System.out.println(pool.size());<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span></span>&#123;</span><br><span class="line">    <span class="comment">//内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">//外部状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String subject;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Flyweight</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">exam</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getSubject()+<span class="string">&quot; is examing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealFlyweight</span><span class="params">(String subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构型模式总结"><a class="markdownIt-Anchor" href="#结构型模式总结"></a> 结构型模式总结</h3><p>代理模式是做方法增强的，适配器模式是把鸡包装成鸭这种用来适配接口的，桥梁模式做到了很好的解耦，装饰模式从名字上就看得出来，适合于装饰类或者说是增强类的场景，门面模式的优点是客户端不需要关心实例化过程，只要调用需要的方法即可，组合模式用于描述具有层次结构的数据，享元模式是为了在特定的场景中缓存已经创建的对象，用于提高性能。</p><h2 id="行为型模式-2"><a class="markdownIt-Anchor" href="#行为型模式-2"></a> 行为型模式</h2><p>行为型模式关注的是各个类之间的相互作用，将职责划分清楚，使得我们的代码更加地清晰。</p><h3 id="策略模式"><a class="markdownIt-Anchor" href="#策略模式"></a> 策略模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式</span></span><br><span class="line"><span class="comment"> * 个人理解：比如说现在有用户需要支付，而支付有多种途径（策略），现在就可以把支付动作提取出来，有多种实现方式</span></span><br><span class="line"><span class="comment"> * 从而达到微信支付类只管微信支付的目的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Payer payer = <span class="keyword">new</span> Payer();</span><br><span class="line">        payer.setPay(<span class="keyword">new</span> WechatPay());</span><br><span class="line">        payer.pay(<span class="number">1L</span>,<span class="number">100D</span>); <span class="comment">// 用户1使用微信支付100.0元</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPay</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long userId,Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatPay</span> <span class="keyword">implements</span> <span class="title">IPay</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long userId, Double amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;用户%s使用微信支付%s元&quot;</span>,userId,amount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">IPay</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long userId, Double amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;用户%s使用支付宝支付%s元&quot;</span>,userId,amount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IPay pay;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long userId, Double amount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pay.pay(userId, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a class="markdownIt-Anchor" href="#观察者模式"></a> 观察者模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式：多个观察者观察到某对象的变化后进行相应操作</span></span><br><span class="line"><span class="comment"> * 下面展示一个例子，比如需要订单状态变更后给开发者发送短信以及邮件通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setId(<span class="number">1L</span>);</span><br><span class="line">        order.setStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        order.attach(<span class="keyword">new</span> OrderStatusChangeSendMailObserver()); <span class="comment">// 发送邮件：订单1状态变更，变更前状态1,变更后状态2</span></span><br><span class="line">        order.attach(<span class="keyword">new</span> OrderStatusChangeSendMsgObserver()); <span class="comment">// 发送短信：订单1状态变更，变更前状态1,变更后状态2</span></span><br><span class="line">        order.setStatus(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatusChangeObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Order order;</span><br><span class="line">    <span class="comment">// 变化事件(变化订单，前更前状态，变更后状态)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Order order,String beforeStatus,String afterStatus)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="comment">// 多个观察者</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderStatusChangeObserver&gt; orderStatusChangeObservers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String status; <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// id</span></span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(OrderStatusChangeObserver orderStatusChangeObserver)</span></span>&#123;</span><br><span class="line">        orderStatusChangeObservers.add(orderStatusChangeObserver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span></span>&#123;</span><br><span class="line">        String beforeStatus = <span class="keyword">this</span>.status;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        orderStatusChangeObservers.forEach(o -&gt; o.change(<span class="keyword">this</span>,beforeStatus,status));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderStatusChangeSendMsgObserver</span> <span class="keyword">extends</span> <span class="title">OrderStatusChangeObserver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Order order, String beforeStatus, String afterStatus)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;发送短信：订单%s状态变更，变更前状态%s,变更后状态%s&quot;</span>,order.getId(),beforeStatus,afterStatus));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderStatusChangeSendMailObserver</span> <span class="keyword">extends</span> <span class="title">OrderStatusChangeObserver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Order order, String beforeStatus, String afterStatus)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;发送邮件：订单%s状态变更，变更前状态%s,变更后状态%s&quot;</span>,order.getId(),beforeStatus,afterStatus));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="责任链模式"><a class="markdownIt-Anchor" href="#责任链模式"></a> 责任链模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 责任链模式，多个类，每个有自己的责任，以链表的形式存储每个类并安排顺序</span></span><br><span class="line"><span class="comment"> * 假设现在有一个抢购需求，需要验证商品库存、用户余额是否充足</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponsibilityChainPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RuleHandler goodsCountValidRuleHandler = <span class="keyword">new</span> GoodsCountValidRuleHandler();<span class="comment">// 商品库存</span></span><br><span class="line">        goodsCountValidRuleHandler.setSuccessor(<span class="keyword">new</span> UserAmountValidRuleHandler()); <span class="comment">// 用户余额</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="number">100D</span>);<span class="comment">// 一个余额为100的用户</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(<span class="number">1L</span>, <span class="number">110D</span>, <span class="number">1L</span>); <span class="comment">// 一个售价110库存1的商品</span></span><br><span class="line">        goodsCountValidRuleHandler.apply(user,goods); <span class="comment">// 理想：余额验证不通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 商品</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Long count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 规则父类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 后继节点</span></span><br><span class="line">    <span class="keyword">protected</span> RuleHandler successor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(User user,Goods goods)</span></span>;</span><br><span class="line">    <span class="comment">//验证完成后发送给后续节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendNext</span><span class="params">(User user,Goods goods)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(successor != <span class="keyword">null</span>)&#123;</span><br><span class="line">            successor.apply(user,goods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 商品库存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCountValidRuleHandler</span> <span class="keyword">extends</span> <span class="title">RuleHandler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(User user, Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(goods.getCount()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sendNext(user,goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户余额</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAmountValidRuleHandler</span> <span class="keyword">extends</span> <span class="title">RuleHandler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(User user, Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user.getAmount() &lt; goods.getPrice())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sendNext(user,goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板方法模式"><a class="markdownIt-Anchor" href="#模板方法模式"></a> 模板方法模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板方法模式: 由父类定义一个模板（自定方法第一步做什么第二步做什么，具体实现由子类实现）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractTemplate t = <span class="keyword">new</span> ConcreteTemplate();</span><br><span class="line">        t.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTemplate</span></span>&#123;</span><br><span class="line">    <span class="comment">// 这就是模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        apply(); <span class="comment">// 这个是重点</span></span><br><span class="line">        end(); <span class="comment">// 可以作为钩子方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 抽象层已经实现，子类也可以选择覆写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 留给子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类实现抽象方法 apply&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们可以把 method3 当做钩子方法来使用，需要的时候覆写就可以了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态模式"><a class="markdownIt-Anchor" href="#状态模式"></a> 状态模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态模式: 简单来说，就是一个对象有不同的状态，根据状态不同，可能有不同的行为。</span></span><br><span class="line"><span class="comment"> * 这样可以达到每个类用来修改每个不同的状态，以及其他操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KThirty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-5-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setId(<span class="number">1L</span>);</span><br><span class="line">        StartState startState = <span class="keyword">new</span> StartState();</span><br><span class="line">        startState.doAction(context);<span class="comment">// 1Start State doAction</span></span><br><span class="line">        StopState stopState = <span class="keyword">new</span> StopState();</span><br><span class="line">        stopState.doAction(context);<span class="comment">// 1Stop State doAction</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> State state = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(context.getId()+<span class="string">&quot;Start State doAction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(context.getId()+<span class="string">&quot;Stop State doAction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为型模式总结"><a class="markdownIt-Anchor" href="#行为型模式总结"></a> 行为型模式总结</h3><p>行为型模式部分介绍了策略模式、观察者模式、责任链模式、模板方法模式和状态模式，其实，经典的行为型模式还包括备忘录模式、命令模式等，但是它们的使用场景比较有限，而且本文篇幅也挺大了，我就不进行介绍了。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>学习设计模式的目的是为了让我们的代码更加的优雅、易维护、易扩展。</p><ul><li>创建型模式： 创建对象</li><li>结构型模式： 解耦，利于拓展维护</li><li>行为型模式： 拆分分工，单类只负责一种逻辑</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 算法 </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch入门篇</title>
      <link href="posts/8/"/>
      <url>posts/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack<br />的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p><h1 id="what"><a class="markdownIt-Anchor" href="#what"></a> What</h1><h2 id="elasicsearch是什么"><a class="markdownIt-Anchor" href="#elasicsearch是什么"></a> Elasicsearch是什么？</h2><p>Elasticsearch 是一个基于 Lucene 的实时的分布式搜索分析引擎，开箱即用，整合了全文检索、结构化搜索、分析三大功能。为什么不直接用 Lucene ？Lucene 只是一个全文检索引擎的架构，提供了大量可用的 API，但其并不是一个完整的全文检索引擎，使用 Lucene 时，你还需要自己写代码，自己去封装成全文检索引擎。</p><h1 id="elasticsearch基本概念"><a class="markdownIt-Anchor" href="#elasticsearch基本概念"></a> Elasticsearch基本概念</h1><ul><li>Field：字段。</li><li>Document ：文档，一条数据，用 json 格式表示。一个Document 包含多个field，json 中的 key 即 field 。</li><li>Type：类型，一个 Document 分组，和 mysql 中的 table 类似，但又不完全相同。一个 Type 包含多个Document，同一个 Type 中的 Document 所拥有的 field 可以不同，但最好保持一致。</li><li>Index ：索引，类似于 mysql 中的 database。一个 Index 包含多个 Type。默认情况下，Document 中的所有 field 都会被索引，这样这些 field 才会被搜索到。Elasticsearch 中有一个倒排索引（Inverted Index）的概念，可以实现 mysql 中 B+Tree索引加速检索的目的。</li><li>shard：分片。可以将一个 Index 中的数据切分为多个 shard，然后将之存储在多台服务器上，以增大一个 Index 可以存储的数据量，加速检索能力，提升系统性能。</li><li>replica ：副本。replica 与 shard 存储的数据是相同的，replica 起到备份的作用。当 shard 发生故障时，可以从 replica 中读取数据，保证系统不受影响。</li><li>Node：节点，单个 Elasticsearch 实例。节点名称默认随机分配。</li><li>Cluster：集群，一组 Elasticsearch 实例。默认集群名称为 elasticsearch。</li></ul><h1 id="how"><a class="markdownIt-Anchor" href="#how"></a> How</h1><h2 id="安装elasticsearch"><a class="markdownIt-Anchor" href="#安装elasticsearch"></a> 安装Elasticsearch</h2><p><strong>这里使用docker-compose部署</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.8.8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>curl http://localhost:9200</code> 可以测试安装结果，出现类似以下结果为正常</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Q8-z3Bf&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;H56Jga63RRWDwtu1D2OaEw&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;number&quot;</span> : <span class="string">&quot;6.8.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> : <span class="string">&quot;2f4c224&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> : <span class="string">&quot;2020-03-18T23:22:18.622755Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> : <span class="string">&quot;7.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;5.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为elasticsearch安装ik分词器"><a class="markdownIt-Anchor" href="#为elasticsearch安装ik分词器"></a> 为Elasticsearch安装ik分词器</h2><p>在线安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it es容器id bash <span class="comment"># 进入es容器</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip <span class="comment"># 安装ik插件 </span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line">docker restart es容器id <span class="comment"># 重启容器</span></span><br></pre></td></tr></table></figure><h2 id="集成springboot"><a class="markdownIt-Anchor" href="#集成springboot"></a> 集成springboot</h2><h3 id="pom文件"><a class="markdownIt-Anchor" href="#pom文件"></a> pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-springboot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>elasticsearch-springboot-test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>elasticsearch-springboot-test<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--elasticsearch --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件applicationyml"><a class="markdownIt-Anchor" href="#添加配置文件applicationyml"></a> 添加配置文件application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">13000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://192.168.3.30:9200</span></span><br></pre></td></tr></table></figure><h3 id="定义domain"><a class="markdownIt-Anchor" href="#定义domain"></a> 定义domain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = UserIndexConstant.INDEX_NAME,shards = 1,replicas = 0)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义常量"><a class="markdownIt-Anchor" href="#定义常量"></a> 定义常量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class UserIndexConstant &#123;</span><br><span class="line">    public static final String INDEX_NAME &#x3D; &quot;test_index&quot;;</span><br><span class="line">    public static final String TYPE &#x3D; &quot;user&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义操作接口"><a class="markdownIt-Anchor" href="#定义操作接口"></a> 定义操作接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserEsIndexService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(List&lt;UserCO&gt; userCOs)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(UserCO userCO)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(List&lt;UserCO&gt; userCOs)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">queryForList</span><span class="params">(SearchQuery query, Class&lt;T&gt; clazz)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Page&lt;T&gt; <span class="title">queryForPage</span><span class="params">(SearchQuery query, Class&lt;T&gt; clazz)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作接口实现类"><a class="markdownIt-Anchor" href="#操作接口实现类"></a> 操作接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEsIndexServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserEsIndexService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ElasticsearchOperations elasticsearchOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(List&lt;UserCO&gt; userCOs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// index不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!elasticsearchOperations.indexExists(UserCO.class)) &#123;</span><br><span class="line">            elasticsearchOperations.createIndex(UserCO.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;IndexQuery&gt; collect = userCOs.stream().map(userCO -&gt; &#123;</span><br><span class="line">            IndexQuery indexQuery = <span class="keyword">new</span> IndexQuery();</span><br><span class="line">            indexQuery.setId(userCO.getId().toString());</span><br><span class="line">            indexQuery.setObject(userCO);</span><br><span class="line">            <span class="keyword">return</span> indexQuery;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        elasticsearchOperations.bulkIndex(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(UserCO userCO)</span> </span>&#123;</span><br><span class="line">        elasticsearchOperations.delete(UserIndexConstant.INDEX_NAME, UserIndexConstant.TYPE, userCO.getId().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(UserCO userCO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delete(userCO);</span><br><span class="line">        List&lt;UserCO&gt; list = <span class="keyword">new</span> ArrayList&lt;UserCO&gt;();</span><br><span class="line">        list.add(userCO);</span><br><span class="line">        <span class="keyword">this</span>.insert(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        elasticsearchOperations.deleteIndex(UserIndexConstant.INDEX_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">queryForList</span><span class="params">(SearchQuery query, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elasticsearchOperations.queryForList(query,clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Page&lt;T&gt; <span class="title">queryForPage</span><span class="params">(SearchQuery query, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elasticsearchOperations.queryForPage(query,clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a class="markdownIt-Anchor" href="#启动类"></a> 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a class="markdownIt-Anchor" href="#测试类"></a> 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes=&#123;Application.class&#125;)</span><span class="comment">// 指定启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserIndexTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserEsIndexService userEsIndexService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] name1 = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;张&quot;</span>, <span class="string">&quot;王&quot;</span>, <span class="string">&quot;刘&quot;</span>, <span class="string">&quot;李&quot;</span>, <span class="string">&quot;白&quot;</span>, <span class="string">&quot;郝&quot;</span>, <span class="string">&quot;马&quot;</span>&#125;;</span><br><span class="line">        String[] name2 = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;小&quot;</span>, <span class="string">&quot;大&quot;</span>, <span class="string">&quot;海&quot;</span>, <span class="string">&quot;镇&quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;时&quot;</span>, <span class="string">&quot;里&quot;</span>&#125;;</span><br><span class="line">        String[] name3 = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;渡&quot;</span>, <span class="string">&quot;嗄&quot;</span>, <span class="string">&quot;无&quot;</span>, <span class="string">&quot;图&quot;</span>, <span class="string">&quot;与&quot;</span>, <span class="string">&quot;可&quot;</span>, <span class="string">&quot;真&quot;</span>&#125;;</span><br><span class="line">        List&lt;UserCO&gt; userCOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> i1 = Math.abs(<span class="keyword">new</span> Random().nextInt()) % <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">int</span> i2 = Math.abs(<span class="keyword">new</span> Random().nextInt()) % <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">int</span> i3 = Math.abs(<span class="keyword">new</span> Random().nextInt()) % <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">int</span> age = (Math.abs(<span class="keyword">new</span> Random().nextInt()) % <span class="number">50</span>) + <span class="number">20</span>;</span><br><span class="line">            UserCO userCO = <span class="keyword">new</span> UserCO((<span class="keyword">long</span>) i, name1[i1] + name2[i2] + name3[i3], age);</span><br><span class="line">            System.out.println(userCO);</span><br><span class="line">            userCOList.add(userCO);</span><br><span class="line">        &#125;</span><br><span class="line">        userEsIndexService.insert(userCOList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQuery(<span class="keyword">new</span> QueryStringQueryBuilder(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        List&lt;UserCO&gt; userCOS = userEsIndexService.queryForList(searchQuery, UserCO.class);</span><br><span class="line">        userCOS.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserCO userCO = <span class="keyword">new</span> UserCO();</span><br><span class="line">        userCO.setId(<span class="number">1L</span>);</span><br><span class="line">        userEsIndexService.delete(userCO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQuery(<span class="keyword">new</span> QueryStringQueryBuilder(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        List&lt;UserCO&gt; userCOS = userEsIndexService.queryForList(searchQuery, UserCO.class);</span><br><span class="line">        userCOS.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        UserCO userCO = <span class="keyword">new</span> UserCO(<span class="number">2L</span>,<span class="string">&quot;测试变更&quot;</span>+System.currentTimeMillis(),<span class="number">100</span>);</span><br><span class="line">        userEsIndexService.update(userCO);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        List&lt;UserCO&gt; userCOS2 = userEsIndexService.queryForList(searchQuery, UserCO.class);</span><br><span class="line">        userCOS2.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="坑"><a class="markdownIt-Anchor" href="#坑"></a> 坑</h3><p>截止到2020年5月7日 SpringData最高支持到Elasticsearch 6.8.8版本，所以如果用最新版的es，将会一直报错。<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200507091427.png" alt="SpringBoot data支持版本" /></p><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><ul><li>本篇源码: <a href="https://github.com/kthirty/JavaProject/tree/master/springboot/elasticsearch-springboot-test">GitHub</a></li><li>本篇Docker-compose文件: <a href="https://github.com/kthirty/docker/blob/master/docker-compose/elasticsearch/signle/docker-compose.yml">GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8之HashMap源码解析</title>
      <link href="posts/47706/"/>
      <url>posts/47706/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本篇将详细分析JDK8中HashMap的源码及其工作原理</p><h1 id="版本"><a class="markdownIt-Anchor" href="#版本"></a> 版本</h1><p>本篇使用版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_151&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_151-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="hashmap继承关系"><a class="markdownIt-Anchor" href="#hashmap继承关系"></a> HashMap继承关系</h1><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200429153706.png" alt="继承结构图" /></p><h1 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化容量，这里是位运算，实际也就是16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">// 最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 扩容因子，0.75表示使用的容量达到 当前容量的 75% 就扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 链表转红黑树的阈值，链表长度达到此值，会进化成红黑树（该值必须大于2，并且应该至少为8，为了方便红黑树）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 红黑树收缩为链表的阈值，链表长度小于此值后再转回链表结构</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>; </span><br><span class="line"><span class="comment">// 转变成树之前，还会有一次判断，只有键值对数量大于 64 才会发生转换。这是为了避免在哈希表建立初期，多个键值对恰好被放入了同一个链表中而导致不必要的转化。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h1 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node数组，实际存放 键值对 的地方（Node是内部类，链表结构）</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">// 遍历是使用的，用来缓存entrySet()方法</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"><span class="comment">// 已使用的容量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 用来记录修改次数，防止在foreach过程中其他线程修改数据（如果修改了抛出ConcurrentModificationException）</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"><span class="comment">// 当前 HashMap 所能容纳键值对数量的最大值，超过这个值，则需扩容</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">// 扩容因子 ，当size&gt;table.size*loadFactor 时扩容</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h1 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造，使用默认扩容因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int 构造，传入初始数组容量，调用(int,float)构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (int,float)构造，传入初始数组容量和扩容因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始数组容量验证合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">    <span class="comment">// 赋值扩容因子</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 计算初始数组长度</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map构造参数，传入一个Map类型，将KV转移到新的HashMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h1><h2 id="tablesizefor"><a class="markdownIt-Anchor" href="#tablesizefor"></a> tableSizeFor</h2><p>(int,float)构造初始化时调用的，作用是给定一个参数，返回大于输入参数且最近的2的整数次幂的数。源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>详解</strong>：</p><ol><li>假设我们现在输入10，那么n的初始值为9，转换为二进制就是 0000…1001</li><li>右移一位变成0000…0100，再位或变成0000…1101</li><li>右移两位变成0000…0011，再位或变成0000…1111</li><li>右移四位变成0000…0000，再位或变成0000…1111 ，我们发现，到这里之后，无论如何运算，n都不会再改变了，最后n的结果为15</li><li>最后一句return表示 当n小于0返回1；大于最大容量时，返回最大容量。如果正常合法，则返回n+1</li></ol><p><strong>解释一下这个方法，其实就是利用位运算，将传入参数的最高位前一位变为0且后面的所有位都为1。这样当n+1时，最高位前一位变成1，其他位全为0，这样就得到了大于这个数字且最近的2的整数次幂。</strong></p><p><strong>备注</strong>：</p><ol><li>为什么要先减一<code>int n = cap - 1</code> 当输入参数是本就是2的幂次方时，位运算计算出来的就是大于这个参数且最近的2的幂次方。其实就是为了解决当参数是2的整数次幂时的计算错误问题。</li><li>为什么要加一，因为位运算算出来的结果必然为001…1 ，…中全是1，加一后才能得到2的整数次幂。</li></ol><h2 id="putmapentries"><a class="markdownIt-Anchor" href="#putmapentries"></a> putMapEntries</h2><p><strong>map构造时调用的，传入一个map类型，初始化数组容量并将入参Map的KV键值对添加到当前的HashMap中。</strong><br />源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里传入了一个参数evict，evict参数用于LinkedHashMap中的尾部操作，这里没有实际意义。</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="comment">// 入参size大于0时操作</span></span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化时预先设置数组长度</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">// 数组长度*扩容因子=扩容阈值（这里的操作其实就是算出不需要扩容的最小数组长度），而由于float是舍弃小数点的，加一位才能保证不需要扩容。</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="comment">// 判断是否大于最大长度，大于则用最大长度</span></span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ? (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="comment">// 如果大于当前通容积，则重新设置容积</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold) </span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// table 不为null 说明不是初始化时使用的，且入参size大于桶容积，调用扩容方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 调用putVal方法将KV对放入桶中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            <span class="comment">// putVal 下面详解</span></span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="put"><a class="markdownIt-Anchor" href="#put"></a> put</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里计算hash然后调用了putVal方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> hash</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// 如果key为null返回0，否则调用hashCode方法并将hashCode的高16位和低16位做异或操作，这样减少key的hash位数的同时也会因为高16位的变化变化，其实就是增加低16位的随机性，减少hash碰撞</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="putval"><a class="markdownIt-Anchor" href="#putval"></a> putVal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash： key的hash，onlyIfAbsent 如果是true则不覆盖原有数据，evict如果是false说明是在创建模式</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">// 如果table为空，说明初始化后第一次使用，则创建table并初始化（懒加载），将table.length赋值给n</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// table不为空，将n-1也就是数组最大下标（一定是1...1,因为数组长度必定是2的整数次幂），再将i与hash做与运算，求出数组下标</span></span><br><span class="line">        <span class="comment">// 如果当前下标没有元素，则新建一个node链表</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 当前下标位已有元素</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// key相同，直接覆盖value</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 如果当前节点是红黑树节点，则调用putTreeVal 做红黑树处理</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">// 当前节点是链表</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将元素放到链表的最后</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 如果链表长度大于阈值，则转换为红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果链表上存在当前key，则替换value</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="comment">// 允许覆盖，或者原数据为null，赋值并返回</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="comment">// LinkedHashMap用的，这里没意义</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改次数，防止在foreach过程中其他线程修改数据（如果修改了抛出ConcurrentModificationException）</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 大于阈值扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// LinkedHashMap用的，这里没意义</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="扩容resize"><a class="markdownIt-Anchor" href="#扩容resize"></a> 扩容resize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 原table</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 原table的长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 原扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 原table长度不为0表示非初始化时调用</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按旧容量和阈值的2倍计算新容量和阈值的大小</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class="line">    <span class="comment">// HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 调用无参构造方法时，桶数组容量为默认容量，</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        <span class="comment">// 阈值为默认容量与默认负载因子乘积</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新扩容阈值为 0 时，按阈值计算公式进行计算</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">// 创建新的桶数组，桶数组的初始化也是在这里完成的</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class="line">        <span class="comment">// 这样可以使元素更加分散，减少hash冲突，提升性能</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>; <span class="comment">// 拿到元素并将原数组位置设置为null</span></span><br><span class="line">                <span class="comment">// 如果链表没有next节点，则直接new Node放入newTab</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                     <span class="comment">// 重新映射时，需要对红黑树进行拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">// 有next节点，循环转移</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                         <span class="comment">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 比如当前数组长度为4 则可能在下标为1的位置上同时存在 hash为1,5,9 ,现在将 这些hash与oldCap 做与运算</span></span><br><span class="line">                        <span class="comment">// 1 二进制 0001 和1000与运算后 0000</span></span><br><span class="line">                        <span class="comment">// 5 二进制 0101 和1000与运算后 0000</span></span><br><span class="line">                        <span class="comment">// 9 二进制 1001 和1000与运算后 1000 （不等于0） </span></span><br><span class="line">                        <span class="comment">// 其实就是将原链表的元素分散开，减少链表长度新下标一定是（原下标 或者 原下标+扩容长度）</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 将分组后的链表映射到新桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取方法get"><a class="markdownIt-Anchor" href="#获取方法get"></a> 获取方法get</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 计算hash并调用getNode方法</span></span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 已经初始化且table中已有元素，而且hash对应的下标位不为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp; (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果hash相同且key相同，直接返回value</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// key不相同，如果链表存在next节点，则开始循环链表查找</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 红黑树节点</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 找到hash相同且key相同的元素</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图解"><a class="markdownIt-Anchor" href="#图解"></a> 图解</h1><h2 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200505163426.png" alt="HashMap存储结构" /></p><h2 id="put流程图"><a class="markdownIt-Anchor" href="#put流程图"></a> put流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200505163610.png" alt="HashMap 放置元素流程图" /></p><h2 id="扩容"><a class="markdownIt-Anchor" href="#扩容"></a> 扩容</h2><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200505164425.png" alt="JDK8中的HashMap扩容图" /></p><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><ul><li>有关红黑树的知识有点多，决定单独写一篇来说红黑树和HashMap中的红黑树实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker深入之Dockerfile</title>
      <link href="posts/15057/"/>
      <url>posts/15057/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>Docker进阶篇之利用dockerfile构建属于自己的镜像，此篇需要Docker基础，可以查看<a href="/posts/26755/">Docker入门篇</a></strong></p><h1 id="what"><a class="markdownIt-Anchor" href="#what"></a> What</h1><blockquote><p>Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以组合图像的所有命令。使用docker build 用户可以创建自动执行的构建，该构建可以连续执行多个命令行指令。<br />摘自<a href="https://docs.docker.com/engine/reference/builder/">官方文档</a><br />简单来说，Dockerfile是一个文本文件，也可以理解为配置文件，自己写命令，然后以build命令运行脚本，执行所有命令已达到构建自己镜像的目的。</p></blockquote><h1 id="how"><a class="markdownIt-Anchor" href="#how"></a> How</h1><h2 id="基本规范"><a class="markdownIt-Anchor" href="#基本规范"></a> 基本规范</h2><ul><li>所有Dockerfile必须以<code>FROM</code>指令开头，以指定基础镜像，如果不需要基础镜像可以指定镜像为<code>scratch</code>，<code>scratch</code>镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</li><li>所有指令不区分大小写，但是约定必须大写，以便将指令与参数区分开来。</li><li>约定每两个不同指令间以空行隔开。</li><li>一个指令只能写在一行内，不允许换行。</li></ul><h2 id="指令详解"><a class="markdownIt-Anchor" href="#指令详解"></a> 指令详解</h2><h3 id="from指定基础镜像"><a class="markdownIt-Anchor" href="#from指定基础镜像"></a> FROM指定基础镜像</h3><p>简介：用于指定本Dockerfile的基础镜像。<br /><code>FROM nginx</code> 表示指定基础镜像为nginx</p><h3 id="run运行命令"><a class="markdownIt-Anchor" href="#run运行命令"></a> RUN运行命令</h3><p>简介：用于在容器中执行命令，由于命令行是很强大的，所有这个也是最常用的命令<br /><code>RUN echo 'Hello Docker!'</code> 表示在容器中输出Hello Docker！</p><h3 id="copy复制文件"><a class="markdownIt-Anchor" href="#copy复制文件"></a> COPY复制文件</h3><p>格式: COPY &lt;源路径&gt;… &lt;目标路径&gt;<br />简介：用于复制<strong>构建上下文</strong>路径的文件到<strong>容器中</strong>的目标路径，源路径可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则<br /><code>COPY package.json /usr/src/app/</code> 复制上下文路径下的package.json 到 容器中<code>/usr/src/app/</code>路径下。<br />备注: 这个指令涉及到上下文概念，详情查看 <a href="#%E4%B8%8A%E4%B8%8B%E6%96%87">上下文</a></p><h3 id="add-更高级的复制文件"><a class="markdownIt-Anchor" href="#add-更高级的复制文件"></a> ADD 更高级的复制文件</h3><p>简介：ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。<br />使用格式与COPY 相同，ADD命令源路径可以是URL Docker引擎会自动下载文件并将文件权限设置为600,如果需要修改权限还需要使用RUN 命令修改权限；<br />如果源文件是一个压缩包，ADD命令还会自动解压缩，如果不需要解压缩，则不可以使用ADD命令。所以这个命令并不合理，如果需要下载或者解压缩，使用RUN 命令操作更加方便。<br />官方也不推荐使用此命令。</p><h3 id="cmd-容器启动命令"><a class="markdownIt-Anchor" href="#cmd-容器启动命令"></a> CMD 容器启动命令</h3><p>简介：CMD 指令的格式和 RUN 相似，也是两种格式：</p><ul><li>shell 格式： CMD &lt;命令&gt;</li><li>exec 格式：CMD [“可执行文件”, “参数1”, “参数2”…]</li><li>参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。<br />注意：Docker是进程，而不是容器，CMD也就是指定容器在启动进程时执行的命令（覆盖原命令）。<br />在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。<br />如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：<code>CMD echo $HOME</code> 在实际执行时会转换为<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</li></ul><h3 id="entrypoint-入口点"><a class="markdownIt-Anchor" href="#entrypoint-入口点"></a> ENTRYPOINT 入口点</h3><p>简介：ENTRYPOINT 的格式和 RUN 指令格式一样。<br />一般有两种使用情景</p><h4 id="为cmd添加额外可变参数"><a class="markdownIt-Anchor" href="#为cmd添加额外可变参数"></a> 为CMD添加额外可变参数:</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/bin/echo&quot;</span>, <span class="string">&quot;Hello&quot;</span>] <span class="comment"># 当容器通过 docker run -it [image] 启动时，输出为：Hello ; 而如果通过 docker run -it [image] Ttt 启动，则输出为：Hello Ttt</span></span></span><br></pre></td></tr></table></figure><p>将Dockerfile修改为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;&#x2F;bin&#x2F;echo&quot;, &quot;Hello&quot;]  </span><br><span class="line">CMD [&quot;world&quot;]</span><br></pre></td></tr></table></figure><p>当容器通过 docker run -it [image] 启动时，输出为：Hello world<br />而如果通过 docker run -it [image] Ttt 启动，输出依旧为：Hello Ttt</p><p>ENTRYPOINT 中的参数始终会被使用，而 CMD 的额外参数可以在容器启动时动态替换掉。</p><h4 id="应用运行前的准备工作"><a class="markdownIt-Anchor" href="#应用运行前的准备工作"></a> 应用运行前的准备工作</h4><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。<br />比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。<br />此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试等。<br />这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.4</span><br><span class="line">...</span><br><span class="line">RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis</span><br><span class="line">...</span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [ &quot;redis-server&quot; ]</span><br></pre></td></tr></table></figure><h3 id="env-设置环境变量"><a class="markdownIt-Anchor" href="#env-设置环境变量"></a> ENV 设置环境变量</h3><p>简介：这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。<br />格式：<code>ENV &lt;key&gt; &lt;value&gt;</code> 或者 <code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br />使用格式： $key</p><h3 id="arg-构建参数"><a class="markdownIt-Anchor" href="#arg-构建参数"></a> ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code><br />简介：构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。</p><h3 id="volume-定义匿名卷"><a class="markdownIt-Anchor" href="#volume-定义匿名卷"></a> VOLUME 定义匿名卷</h3><p>格式为：<code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code> 或者 <code>VOLUME &lt;路径&gt;</code><br />简介：定义成匿名卷后，数据会存储在宿主机上，多个容器可以共用，且不会在容器存储层写入大量数据。<br />备注：容器启动时可以使用<code>docker run -d -v mydata:/data xxxx</code> 覆盖原配置</p><h3 id="expose-暴露端口"><a class="markdownIt-Anchor" href="#expose-暴露端口"></a> EXPOSE 暴露端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code><br />简介：EXPOSE 指令是声明运行时容器提供服务端口，注意，这只是声明，并不会暴露端口，有两个作用（帮助使用者理解容器守护端口、-P 命令是随机映射端口）</p><h3 id="workdir-指定工作目录"><a class="markdownIt-Anchor" href="#workdir-指定工作目录"></a> WORKDIR 指定工作目录</h3><p>简介：使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。<br />格式：<code>WORKDIR &lt;工作目录路径&gt;</code>。<br />备注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN cd &#x2F;app</span><br><span class="line">RUN echo &quot;hello&quot; &gt; world.txt</span><br></pre></td></tr></table></figure><p>如果在dockerfile中这样写的话。第二行的工作目录依旧是默认目录，而不是上一个命令执行的/app目录，因为dockerfile是每一个指令由一个进程执行，两行命令的执行环境都是不同的。</p><h3 id="user-指定当前用户"><a class="markdownIt-Anchor" href="#user-指定当前用户"></a> USER 指定当前用户</h3><p>格式： <code>USER 用户名</code><br />简介：USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层，以后的所有指令都是在这个用户下操作。<br />当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line">USER redis</span><br><span class="line">RUN [ &quot;redis-server&quot; ]</span><br></pre></td></tr></table></figure><p>备注：如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"># 下载 gosu</span><br><span class="line">RUN wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;gosu &quot;https:&#x2F;&#x2F;github.com&#x2F;tianon&#x2F;gosu&#x2F;releases&#x2F;download&#x2F;1.7&#x2F;gosu-amd64&quot; \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;gosu \</span><br><span class="line">    &amp;&amp; gosu nobody true</span><br><span class="line"># 设置 CMD，并以另外的用户执行</span><br><span class="line">CMD [ &quot;exec&quot;, &quot;gosu&quot;, &quot;redis&quot;, &quot;redis-server&quot; ]</span><br></pre></td></tr></table></figure><h3 id="healthcheck-健康检查"><a class="markdownIt-Anchor" href="#healthcheck-健康检查"></a> HEALTHCHECK 健康检查</h3><p>格式:</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code> 如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令<br />简介： 防止容器进入死锁状态或者死循环状态后，容器仍在运行的问题。<br />HEALTHCHECK 支持下列选项：</li><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。<br />注意：和 CMD, ENTRYPOINT 一样，HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</li></ul><h3 id="onbuild-作为基础镜像构建时"><a class="markdownIt-Anchor" href="#onbuild-作为基础镜像构建时"></a> ONBUILD 作为基础镜像构建时</h3><p>格式： <code>ONBUILD &lt;其它指令&gt;</code><br />简介： 当镜像被作为基础镜像使用时，执行相关指令。<br /><code>ONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ]</code> 表示作为基础镜像时执行npm install 命令</p><h2 id="上下文"><a class="markdownIt-Anchor" href="#上下文"></a> 上下文</h2><p>在docker build 命令最后有一个<code>.</code>这个<code>.</code>也就是当前目录，也就是在指定上下文目录。什么是上下文呢？<br />这个要设计到docker 的工作原理，docker分为服务端和客户端，执行命令的就是客户端，客户端会根据命令发送相应的请求到服务端，由服务端去执行。所以docker build 其实是在服务端进行构建的，那docker又是怎么访问到我们的文件的呢，很简单，docker客户端会将指定的上下文路径直接打包发送给服务端。而上下文路径，也就是打包的文件夹路径</p><p>注意：如果在Dockerfile中使用<code>COPY ../demo.txt</code> 这个指令是不能执行成功的，因为…是上级目录，已经超出上下文目录了。相同的，使用<code>COPY /demo.txt</code>也是不行的。</p><h1 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why</h1><p>我们为什么要使用Dockerfile？<br />比如我现在的java项目要部署到docker上，那么我现在需要一个Dockerfile来构建我的镜像。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM anapsix&#x2F;alpine-java:8_server-jre_unlimited</span><br><span class="line"></span><br><span class="line">MAINTAINER **@163.com</span><br><span class="line"></span><br><span class="line">RUN mkdir -p &#x2F;app</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ADD .&#x2F;target&#x2F;app.jar .&#x2F;app.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;--spring.profiles.active&#x3D;test&quot;]</span><br></pre></td></tr></table></figure><p>现在只需要build之后，将镜像push到docker私服上，然后再任何地方运行docker run imagesname 就可以启动我的项目了<br />或者不push，在本地build之后也可以直接运行了。</p><h1 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h1><ul><li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfie 官方文档</a></li><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Dockerfile 最佳实践文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式任务调度之XXL-JOB</title>
      <link href="posts/60489/"/>
      <url>posts/60489/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。<br />工作中有很多需要定时执行的任务，比如（每分钟扫描超时支付的订单、每天提醒用户未完成的任务）等等…<br />在分布式技术横行的时代，选择一个优秀的分布式的任务调度平台尤为重要。<br />今天介绍的<a href="http://www.xuxueli.com/xxl-job/">XXL-JOB</a>是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</p><h1 id="为什么要选择xxl-job"><a class="markdownIt-Anchor" href="#为什么要选择xxl-job"></a> 为什么要选择XXL-JOB</h1><p><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200423135903.png" alt="对比图" /></p><h1 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h1><ul><li>调度中心: XXL-JOB-ADMIN 官网提供的调度中心（页面管理）应用</li><li>执行器： 开发中实际业务项目</li></ul><h1 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h1><h2 id="配置调度中心"><a class="markdownIt-Anchor" href="#配置调度中心"></a> 配置调度中心</h2><p>建议使用docker-compose部署，docker-compose文件请点击<a href="https://github.com/kthirty/docker/tree/master/docker-compose/xxl-job">这里</a><br />docker 部署命令如下(摘至官方文档)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -v &#x2F;tmp:&#x2F;data&#x2F;applogs --name xxl-job-admin  -d xuxueli&#x2F;xxl-job-admin:&#123;指定版本&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 如需自定义 mysql 等配置，可通过 &quot;-e PARAMS&quot; 指定，参数格式 PARAMS&#x3D;&quot;--key&#x3D;value  --key2&#x3D;value2&quot; ；</span><br><span class="line">* 配置项参考文件：&#x2F;xxl-job&#x2F;xxl-job-admin&#x2F;src&#x2F;main&#x2F;resources&#x2F;application.properties</span><br><span class="line">* 如需自定义 JVM内存参数 等配置，可通过 &quot;-e JAVA_OPTS&quot; 指定，参数格式 JAVA_OPTS&#x3D;&quot;-Xmx512m&quot; ；</span><br><span class="line">*&#x2F;</span><br><span class="line">docker run -e PARAMS&#x3D;&quot;--spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;xxl_job?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;autoReconnect&#x3D;true&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot; -p 8080:8080 -v &#x2F;tmp:&#x2F;data&#x2F;applogs --name xxl-job-admin  -d xuxueli&#x2F;xxl-job-admin:&#123;指定版本&#125;</span><br></pre></td></tr></table></figure><p>如需传统模式安装请查阅<a href="https://www.xuxueli.com/xxl-job/">官方安装文档</a></p><h2 id="配置执行器项目"><a class="markdownIt-Anchor" href="#配置执行器项目"></a> 配置执行器项目</h2><h3 id="依赖引入"><a class="markdownIt-Anchor" href="#依赖引入"></a> 依赖引入</h3><p>在项目pom文件中添加以下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xxl-job-core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xuxueli&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxl-job-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;xxl-job.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="执行器配置"><a class="markdownIt-Anchor" href="#执行器配置"></a> 执行器配置</h3><p>在项目的配置文件<code>application.properties</code> or <code>application.yml</code> 中添加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">xxl:</span><br><span class="line">  job:</span><br><span class="line">    ### 执行器通讯TOKEN [选填]：非空时启用；</span><br><span class="line">    accessToken: &#39;&#39;</span><br><span class="line">    admin:</span><br><span class="line">      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span><br><span class="line">      addresses: http:&#x2F;&#x2F;192.168.3.30:9000&#x2F;xxl-job-admin</span><br><span class="line">    executor:</span><br><span class="line">      ### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span><br><span class="line">      address: &#39;&#39;</span><br><span class="line">      ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span><br><span class="line">      appname: xxl-job-executor-sample</span><br><span class="line">      ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span><br><span class="line">      ip: &#39;&#39;</span><br><span class="line">      ### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span><br><span class="line">      logpath: &#x2F;data&#x2F;applogs&#x2F;xxl-job&#x2F;jobhandler</span><br><span class="line">      ### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span><br><span class="line">      logretentiondays: 30</span><br><span class="line">      ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span><br><span class="line">      port: 9999</span><br></pre></td></tr></table></figure><h3 id="执行器组件配置"><a class="markdownIt-Anchor" href="#执行器组件配置"></a> 执行器组件配置</h3><p>向spring托管bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">    XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">    xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">    xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">    xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">    xxlJobSpringExecutor.setPort(port);</span><br><span class="line">    xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">    xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">    xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line">    <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建执行器启动类"><a class="markdownIt-Anchor" href="#创建执行器启动类"></a> 创建执行器启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动应用"><a class="markdownIt-Anchor" href="#启动应用"></a> 启动应用</h3><p>注意：启动前需要保证配置文件中<code>xxl.job.admin.addresses</code> 配置项为正确的xxl-job-admin 地址(浏览器访问连接可以看到控制界面)</p><h3 id="检查应用是否启动成功"><a class="markdownIt-Anchor" href="#检查应用是否启动成功"></a> 检查应用是否启动成功</h3><p>浏览器打开调度中心地址（配置文件中<code>xxl.job.admin.addresses</code>项）,登录查看（默认账号密码为admin/123456）执行器管理中Online机器地址是否有你的应用访问地址<br />成功后如图所示<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200423142729.png" alt="" /></p><p><strong>如果online没有出现你的机器，请检查配置文件中的appname项与页面中的appname项是否一致，如果不一致，在页面添加一个即可</strong></p><h2 id="开始使用-2"><a class="markdownIt-Anchor" href="#开始使用-2"></a> 开始使用</h2><p>XXL-JOB支持多种任务模式</p><ul><li>Bean模式<ul><li>Bean模式（类形式）： 优点是兼容性好（无架构项目也可以使用）；缺点是一个任务占用一个Java类，造成类的浪费，且不支持自动注入，需要手动调用注入到执行器容器中（不常用）</li><li>Bean模式（方法形式）: 优点是自动注入，只需要添加<code>@XxlJob</code>注解即可；缺点是需要Spring容器环境</li></ul></li><li>GLUE模式：任务以源码方式维护在调度中心，支持通过Web IDE在线更新，实时编译和生效，因此不需要指定JobHandler。支持多种语言</li></ul><h3 id="bean模式类形式"><a class="markdownIt-Anchor" href="#bean模式类形式"></a> Bean模式（类形式）</h3><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoExecutorClass1JobHandler</span> <span class="keyword">extends</span> <span class="title">IJobHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">execute</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XxlJobLogger.log(<span class="string">&quot;XXL-JOB, DemoExecutorClass1JobHandler 执行.&quot;</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:这种方式需要在main方法中添加<code>XxlJobExecutor.registJobHandler(&quot;demoJobHandler&quot;, new DemoExecutorClass1JobHandler());</code> 注册到执行器容器中</strong><br />这种方式实在不常用，这里不再赘述(<s>没有spring实在是太麻烦了，懒得写</s>)，需要的请查看<a href="https://gitee.com/xuxueli0323/xxl-job/tree/master/xxl-job-executor-samples/xxl-job-executor-sample-frameless">官方文档</a></p><h3 id="bean模式方法形式"><a class="markdownIt-Anchor" href="#bean模式方法形式"></a> Bean模式（方法形式）</h3><p>需要注意以下几点：</p><ul><li>在Spring Bean实例中，开发Job方法，方式格式要求为<code>public ReturnT&lt;String&gt; execute(String param)</code></li><li>为Job方法添加注解 <code>@XxlJob(value=&quot;自定义jobhandler名称&quot;, init = &quot;JobHandler初始化方法&quot;, destroy = &quot;JobHandler销毁方法&quot;)</code> ，注解value值对应的是调度中心新建任务的JobHandler属性的值。</li><li>执行日志：需要通过 “XxlJobLogger.log” 打印执行日志；</li></ul><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册为bean，被xxl-job发现</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoExecutorMethodJobHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@XxlJob(value = &quot;printHelloWorldJobHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">printHelloWorldJobHandler</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        XxlJobLogger.log(<span class="string">&quot;DemoExecutorMethodJobHandler Hello World&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="glue模式java"><a class="markdownIt-Anchor" href="#glue模式java"></a> GLUE模式(Java)</h3><p>任务以源码方式维护在调度中心，支持通过Web IDE在线更新，实时编译和生效，因此不需要指定JobHandler。开发流程如下：</p><ol><li>在调度中心新建任务，运行模式选择<strong>GLUE模式(Java)</strong></li><li>在任务管理 -&gt; 操作 -&gt; GLUE IDE 中修改代码</li></ol><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>任务管理界面添加任务，配置如下<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200423152957.png" alt="" /></p><p>需要注意的几点</p><ul><li>执行器请选择正确的执行器（有Online的）</li><li>JobHandler 对应<code>@XxlJob</code>注解中的<code>value</code>值</li></ul><p>启动任务并查看日志，是否正常执行<br />正常截图如下<img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200423153317.png" alt="" /></p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="http://www.xuxueli.com/xxl-job/">官网</a></li><li><a href="https://gitee.com/xuxueli0323/xxl-job">Gitee</a></li><li><a href="https://github.com/kthirty/JavaProject/tree/master/task/xxl-job-springboot-demo">本文源码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 任务调度 </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶篇之docker-compose</title>
      <link href="posts/55781/"/>
      <url>posts/55781/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。<br />Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。<br />Docker-Compose的工程配置文件默认为docker-compose.yml，可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，其定义了多个有依赖关系的服务及每个服务运行的容器。<br />使用一个Dockerfile模板文件，可以让用户很方便的定义一个单独的应用容器。在工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个Web项目，除了Web服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。<br />Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br />Docker-Compose项目由Python编写，调用Docker服务提供的API来对容器进行管理。因此，只要所操作的平台支持Docker API，就可以在其上利用Compose来进行编排管理。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="centos"><a class="markdownIt-Anchor" href="#centos"></a> Centos</h3><p>直接安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.5&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><p>这里的1.25.5是版本号，请查阅官方<a href="https://github.com/docker/compose/releases">GitHub</a></p><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><p>Docker-Compose 基本概念</p><ul><li>服务(<code>service</code>): 由一个或多个容器组成的单元</li><li>项目(<code>project</code>): 由一组关联的服务组成的一个完整业务单元。（一个docker-compose.yml 文件）</li></ul><h2 id="命令介绍"><a class="markdownIt-Anchor" href="#命令介绍"></a> 命令介绍</h2><p>对于docker-compose来说，大部分命令的对象为项目本身，也可以指定项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。<br />执行<code>docker-compose [COMMAND] help</code>可以查看具体某一个命令的使用方式</p><p>docker-compose命令基本格式为 <code>docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</code></p><h3 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h3><ul><li><code>-f, --file FILE</code>指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。</li><li><code>-p, --project-name NAME</code>指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--x-networking</code>  使用 Docker 的可拔插网络后端特性(不常用)</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 bridge (不常用)</li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本号并退出</li></ul><h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h3><h4 id="up"><a class="markdownIt-Anchor" href="#up"></a> up</h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。<br />这个命令为最常用的命令，功能也非常强大，可以自动完成(构建镜像、(重新)创建服务、(重启)启动服务、关联服务相关容器) 一系列操作<br />很多时候我们只需要到docker-compose.yml 文件夹下执行docker-compose up就可以完成容器的运行了，使用Ctrl+C可以停止项目，也可以使用docker-compose up -d 守护态运行，使用docker-compose down 结束，up 命令会默认将已启动的服务停止并重新创建。</p><p>options</p><ul><li><code>-d</code> 守护态运行</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所管理的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 --no-recreate 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t , --timeout TIMEOUT</code>停止容器时候的超时（默认为 10 秒）。</li></ul><h4 id="build"><a class="markdownIt-Anchor" href="#build"></a> build</h4><p>构建（重新构建）项目中的服务容器。<br />格式为 <code>docker-compose build [options] [SERVICE...]</code>。<br />options包括</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h4 id="config"><a class="markdownIt-Anchor" href="#config"></a> config</h4><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h4 id="down"><a class="markdownIt-Anchor" href="#down"></a> down</h4><p>停止up命令启动的容器并移除网络。（必须与up指定同一个docker-compose文件）</p><h4 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h4><p>进入指定的容器，一般很少使用，用docker exec 更方便</p><h4 id="images"><a class="markdownIt-Anchor" href="#images"></a> images</h4><p>列出docker-compose文件中包含的镜像</p><h4 id="kill"><a class="markdownIt-Anchor" href="#kill"></a> kill</h4><p>格式： <code>docker-compose kill [options] [SERVICE...]</code><br />通过发送 SIGKILL 信号来强制停止服务容器。<br />支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。<br /><code>docker-compose kill -s SIGINT</code> SIGNINT 默认为SIGKILL</p><h4 id="logs"><a class="markdownIt-Anchor" href="#logs"></a> logs</h4><p>显示项目日志，格式为<code>logs [options] [SERVICE...]</code>  可以指定某个服务</p><p>options</p><ul><li><code>--no-color</code> 取消颜色区分不同的服务</li><li><code>-f, --follow</code> 实时打印</li><li><code>-t, --timestamps</code> 显示时间戳</li><li><code>--tail=&quot;all&quot;</code> 显示的行数</li></ul><h4 id="pause"><a class="markdownIt-Anchor" href="#pause"></a> pause</h4><p>暂停一个项目，使用unpause 取消暂停</p><h4 id="port"><a class="markdownIt-Anchor" href="#port"></a> port</h4><p>打印一个正在运行的项目中应用的公共端口<br />格式为<code>docker-compose port [options] SERVICE PRIVATE_PORT</code><br />options</p><ul><li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）</li><li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li></ul><h4 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> ps</h4><p>打印项目中启动的容器</p><h4 id="pull"><a class="markdownIt-Anchor" href="#pull"></a> pull</h4><p>格式 <code>docker-compose pull [options] [SERVICE...]</code><br />拉取项目需要的镜像<br />options</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取过程中的错误</li></ul><h4 id="push"><a class="markdownIt-Anchor" href="#push"></a> push</h4><p>推送服务依赖的镜像到 Docker 镜像仓库</p><h4 id="restart"><a class="markdownIt-Anchor" href="#restart"></a> restart</h4><p>格式<code>docker-compose restart [options] [SERVICE...]</code><br />重启项目中的服务。</p><h4 id="rm"><a class="markdownIt-Anchor" href="#rm"></a> rm</h4><p>删除项目中已停止的容器，推荐使用stop先停止容器<br />options</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h4 id="run"><a class="markdownIt-Anchor" href="#run"></a> run</h4><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。<br />在指定服务上执行一个命令。<br />例如<code>docker-compose run ubuntu ping docker.com</code> 将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。<br />默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。<br />该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。<br />两个不同点：</p><ul><li>给定命令将会覆盖原有的自动运行命令；</li><li>不会自动创建端口，以避免冲突。</li></ul><p>如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如<code>docker-compose run --no-deps web python manage.py shell</code> 将不会启动 web 容器所关联的其它容器。</p><p>options：</p><ul><li><code>-d</code> 守护态运行容器。</li><li><code>--name NAME</code> 为容器指定一个名字。</li><li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li><li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li><li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li><li><code>--no-deps</code> 不自动启动关联的服务容器。</li><li><code>--rm</code> 运行命令后自动删除容器，d 模式下将忽略。</li><li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li><li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li><li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li></ul><h4 id="scale"><a class="markdownIt-Anchor" href="#scale"></a> scale</h4><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。<br />设置指定服务运行的容器个数。通过 <code>service=num</code> 的参数来设置数量。例如：<code>docker-compose scale web=3 db=2</code>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。<br />一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p><h4 id="start"><a class="markdownIt-Anchor" href="#start"></a> start</h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。<br />启动已经存在的服务容器。与stop搭配使用</p><h4 id="stop"><a class="markdownIt-Anchor" href="#stop"></a> stop</h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。<br />停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><h4 id="top"><a class="markdownIt-Anchor" href="#top"></a> top</h4><p>查看各个服务容器内运行的进程。</p><h4 id="unpause"><a class="markdownIt-Anchor" href="#unpause"></a> unpause</h4><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。<br />与<code>pause</code> 搭配使用，恢复处于暂停状态中的服务。</p><h3 id="模板文件"><a class="markdownIt-Anchor" href="#模板文件"></a> 模板文件</h3><p>模板文件是使用docker-compose 的核心，docker-compose几乎所有操作与模板文件有关，模板文件相当于一个yaml格式的配置文件，用来指定项目中的服务信息。<br />例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    image: examples&#x2F;web</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;&#x2F;data&quot;</span><br></pre></td></tr></table></figure><p>注意几点</p><ul><li>所有服务都需要用image指定镜像或者使用build构建镜像（需要dockerfile支持）</li><li>如果使用 build 指令，在 Dockerfile 中设置的选项(例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。</li></ul><h4 id="build-2"><a class="markdownIt-Anchor" href="#build-2"></a> build</h4><p>指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build: .&#x2F;dir</span><br></pre></td></tr></table></figure><p>也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。使用 dockerfile 指令指定 Dockerfile 文件名。使用 arg 指令指定构建镜像时的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build:</span><br><span class="line">      context: .&#x2F;dir</span><br><span class="line">      dockerfile: Dockerfile-alternate</span><br><span class="line">      args:</span><br><span class="line">        buildno: 1</span><br></pre></td></tr></table></figure><p>使用 cache_from 指定构建镜像的缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build:</span><br><span class="line">  context: .</span><br><span class="line">  cache_from:</span><br><span class="line">    - alpine:latest</span><br><span class="line">    - corp&#x2F;web_app:3.14</span><br></pre></td></tr></table></figure><h4 id="cap_add-cap_drop"><a class="markdownIt-Anchor" href="#cap_add-cap_drop"></a> cap_add, cap_drop</h4><p>指定容器的内核能力（capacity）分配。<br />例如，让容器拥有所有能力可以指定为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cap_add:</span><br><span class="line">  - ALL</span><br></pre></td></tr></table></figure><p>去掉 NET_ADMIN 能力可以指定为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cap_drop:</span><br><span class="line">  - NET_ADMIN</span><br></pre></td></tr></table></figure><h4 id="command-常用"><a class="markdownIt-Anchor" href="#command-常用"></a> command （常用）</h4><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command: echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><h4 id="container_name-常用"><a class="markdownIt-Anchor" href="#container_name-常用"></a> container_name （常用）</h4><p>指定容器名称（默认将会使用 项目名称_服务名称_序号 这样的格式。） 例如<code>container_name: docker-web-container</code></p><blockquote><p>注意：指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></blockquote><h4 id="devices-常用"><a class="markdownIt-Anchor" href="#devices-常用"></a> devices  （常用）</h4><p>指定设备映射关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devices:</span><br><span class="line">  - &quot;&#x2F;dev&#x2F;ttyUSB1:&#x2F;dev&#x2F;ttyUSB0&quot;</span><br></pre></td></tr></table></figure><h4 id="depends_on-常用"><a class="markdownIt-Anchor" href="#depends_on-常用"></a> depends_on  （常用）</h4><p>解决容器依赖，启动顺序问题，以下例子中会先启动 redis db 再启动 web</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure><h4 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> dns</h4><p>自定义 DNS 服务器。可以是一个值，也可以是一个列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dns:</span><br><span class="line">  - 8.8.8.8</span><br><span class="line">  - 114.114.114.114</span><br></pre></td></tr></table></figure><h4 id="dns_search"><a class="markdownIt-Anchor" href="#dns_search"></a> dns_search</h4><p>配置 DNS 搜索域。可以是一个值，也可以是一个列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dns_search:</span><br><span class="line">  - domain1.example.com</span><br><span class="line">  - domain2.example.com</span><br></pre></td></tr></table></figure><h4 id="tmpfs"><a class="markdownIt-Anchor" href="#tmpfs"></a> tmpfs</h4><p>挂载一个 tmpfs 文件系统到容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmpfs:</span><br><span class="line">  - &#x2F;run</span><br><span class="line">  - &#x2F;tmp</span><br></pre></td></tr></table></figure><h4 id="env_file"><a class="markdownIt-Anchor" href="#env_file"></a> env_file</h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。<br />如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。<br />如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env_file:</span><br><span class="line">  - .&#x2F;common.env</span><br><span class="line">  - .&#x2F;apps&#x2F;web.env</span><br><span class="line">  - &#x2F;opt&#x2F;secrets.env</span><br></pre></td></tr></table></figure><p>环境变量文件中每一行必须符合格式，支持 # 开头的注释行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># common.env: Set development environment</span><br><span class="line">PROG_ENV&#x3D;development</span><br></pre></td></tr></table></figure><h4 id="environment-常用"><a class="markdownIt-Anchor" href="#environment-常用"></a> environment （常用）</h4><p>设置环境变量，可以使用数组或字典两种格式。<br />只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">environment:</span><br><span class="line">  RACK_ENV: development</span><br><span class="line">  SESSION_SECRET:</span><br><span class="line"></span><br><span class="line">environment:</span><br><span class="line">  - RACK_ENV&#x3D;development</span><br><span class="line">  - SESSION_SECRET</span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括<br /><code>y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF</code></p><h4 id="expose"><a class="markdownIt-Anchor" href="#expose"></a> expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。<br />仅可以指定内部端口为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expose:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000&quot;</span><br></pre></td></tr></table></figure><h4 id="extra_hosts"><a class="markdownIt-Anchor" href="#extra_hosts"></a> extra_hosts</h4><p>类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra_hosts:</span><br><span class="line"> - &quot;googledns:8.8.8.8&quot;</span><br><span class="line"> - &quot;dockerhub:52.1.157.61&quot;</span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure><h4 id="healthcheck"><a class="markdownIt-Anchor" href="#healthcheck"></a> healthcheck</h4><p>通过命令检查容器是否健康运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">healthcheck:</span><br><span class="line">  test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http:&#x2F;&#x2F;localhost&quot;]</span><br><span class="line">  interval: 1m30s</span><br><span class="line">  timeout: 10s</span><br><span class="line">  retries: 3</span><br></pre></td></tr></table></figure><h4 id="image"><a class="markdownIt-Anchor" href="#image"></a> image</h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p><h4 id="labels"><a class="markdownIt-Anchor" href="#labels"></a> labels</h4><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">labels:</span><br><span class="line">  com.startupteam.description: &quot;webapp for a startup team&quot;</span><br><span class="line">  com.startupteam.department: &quot;devops department&quot;</span><br><span class="line">  com.startupteam.release: &quot;rc3 for v1.0&quot;</span><br></pre></td></tr></table></figure><h4 id="logging"><a class="markdownIt-Anchor" href="#logging"></a> logging</h4><p>配置日志选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: syslog</span><br><span class="line">  options:</span><br><span class="line">    syslog-address: &quot;tcp:&#x2F;&#x2F;192.168.0.42:123&quot;</span><br></pre></td></tr></table></figure><p>目前支持三种日志驱动类型。[json-file,syslog,none]<br />options 配置日志驱动的相关参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options:</span><br><span class="line">  max-size: &quot;200k&quot;</span><br><span class="line">  max-file: &quot;10&quot;</span><br></pre></td></tr></table></figure><h4 id="network_mode"><a class="markdownIt-Anchor" href="#network_mode"></a> network_mode</h4><p>设置网络模式, 使用和 docker run 的 --network 参数一样的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">network_mode: &quot;bridge&quot;</span><br><span class="line">network_mode: &quot;host&quot;</span><br><span class="line">network_mode: &quot;none&quot;</span><br><span class="line">network_mode: &quot;service:[service name]&quot;</span><br><span class="line">network_mode: &quot;container:[container name&#x2F;id]&quot;</span><br></pre></td></tr></table></figure><h4 id="ports常用"><a class="markdownIt-Anchor" href="#ports常用"></a> ports（常用）</h4><p>暴露端口信息。<br />使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ports:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000:8000&quot;</span><br><span class="line"> - &quot;49100:22&quot;</span><br><span class="line"> - &quot;127.0.0.1:8001:8001&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</p></blockquote><h4 id="secrets"><a class="markdownIt-Anchor" href="#secrets"></a> secrets</h4><p>存储敏感数据，例如 mysql 服务密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.1&quot;</span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">  image: mysql</span><br><span class="line">  environment:</span><br><span class="line">    MYSQL_ROOT_PASSWORD_FILE: &#x2F;run&#x2F;secrets&#x2F;db_root_password</span><br><span class="line">  secrets:</span><br><span class="line">    - db_root_password</span><br><span class="line">    - my_other_secret</span><br><span class="line">secrets:</span><br><span class="line">  my_secret:</span><br><span class="line">    file: .&#x2F;my_secret.txt</span><br><span class="line">  my_other_secret:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><h4 id="sysctls"><a class="markdownIt-Anchor" href="#sysctls"></a> sysctls</h4><p>配置容器内核参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sysctls:</span><br><span class="line">  net.core.somaxconn: 1024</span><br><span class="line">  net.ipv4.tcp_syncookies: 0</span><br><span class="line"></span><br><span class="line">sysctls:</span><br><span class="line">  - net.core.somaxconn&#x3D;1024</span><br><span class="line">  - net.ipv4.tcp_syncookies&#x3D;0</span><br></pre></td></tr></table></figure><h4 id="ulimits"><a class="markdownIt-Anchor" href="#ulimits"></a> ulimits</h4><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ulimits:</span><br><span class="line">   nproc: 65535</span><br><span class="line">   nofile:</span><br><span class="line">     soft: 20000</span><br><span class="line">     hard: 40000</span><br></pre></td></tr></table></figure><h4 id="volumes数据卷常用"><a class="markdownIt-Anchor" href="#volumes数据卷常用"></a> volumes数据卷（常用）</h4><p>数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line"> - &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line"> - cache&#x2F;:&#x2F;tmp&#x2F;cache</span><br><span class="line"> - ~&#x2F;configs:&#x2F;etc&#x2F;configs&#x2F;:ro</span><br></pre></td></tr></table></figure><h4 id="读取变量"><a class="markdownIt-Anchor" href="#读取变量"></a> 读取变量</h4><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。</p><p>例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: &quot;mongo:$&#123;MONGO_VERSION&#125;&quot;</span><br></pre></td></tr></table></figure><p>如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。<br />若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。<br />在当前目录新建 .env 文件并写入以下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 支持 # 号注释</span><br><span class="line">MONGO_VERSION&#x3D;3.6</span><br></pre></td></tr></table></figure><p>执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。</p><h2 id="模板文件实践"><a class="markdownIt-Anchor" href="#模板文件实践"></a> 模板文件实践</h2><h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> Mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  mysql-db:</span><br><span class="line">    container_name: mysql-docker        # 指定容器的名称</span><br><span class="line">    image: mysql:8.0                   # 指定镜像和版本</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot; # 暴露端口</span><br><span class="line">    environment: # 设置环境变量</span><br><span class="line">      MYSQL_ROOT_PASSWORD: $&#123;MYSQL_ROOT_PASSWORD&#125; </span><br><span class="line">      MYSQL_ROOT_HOST: $&#123;MYSQL_ROOT_HOST&#125;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;$&#123;MYSQL_DIR&#125;&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql&quot;           # 挂载数据目录，需要在模板文件下创建data文件夹</span><br><span class="line">      - &quot;$&#123;MYSQL_DIR&#125;&#x2F;config:&#x2F;etc&#x2F;mysql&#x2F;conf.d&quot;      # 挂载配置文件目录 ， 需要在模板文件创建config文件夹</span><br></pre></td></tr></table></figure><p>.env 文件(用于模板文件中的变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROOT_PASSWORD&#x3D;root</span><br><span class="line">MYSQL_ROOT_HOST&#x3D;%</span><br><span class="line">MYSQL_DIR&#x3D;.&#x2F;mysql</span><br></pre></td></tr></table></figure><h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2.0&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    image: nginx:1.11.6-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">      - .&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">      - .&#x2F;www:&#x2F;var&#x2F;www</span><br><span class="line">      - &#x2F;etc&#x2F;letsencrypt:&#x2F;etc&#x2F;letsencrypt</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li>Docker-Compose 官方文档：<a href="https://docs.docker.com/compose">https://docs.docker.com/compose</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门篇</title>
      <link href="posts/26755/"/>
      <url>posts/26755/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="what"><a class="markdownIt-Anchor" href="#what"></a> What</h2><h3 id="docker是什么"><a class="markdownIt-Anchor" href="#docker是什么"></a> Docker是什么？</h3><p>一种新兴的虚拟化工具（类似虚拟机），用来做快速交付，测试和部署代码的工具。</p><p><a href="https://docs.docker.com/get-started/overview/">官方文档</a></p><h3 id="docker基本概念"><a class="markdownIt-Anchor" href="#docker基本概念"></a> Docker基本概念</h3><p>Docker包含三大基本概念</p><ul><li>镜像（<code>Image</code>）</li><li>容器（<code>Container</code>）</li><li>仓库（<code>Repository</code>）</li></ul><p>大概解释一下</p><ul><li>镜像：官方和第三方维护了很多镜像，可以比作模板。（Mysql，Centos，Zookeeper等等…）</li><li>容器：由模板(镜像)启动的一个应用，也就是实际使用的应用。</li><li>仓库：Docker Hub（存放镜像的仓库），也可以自己搭建私服</li></ul><h2 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why</h2><h3 id="docker有什么优点"><a class="markdownIt-Anchor" href="#docker有什么优点"></a> Docker有什么优点？</h3><p>使用docker可以方便快捷的搭建开发环境<br />比如现在开发需要一个Mysql环境：</p><ul><li>没有使用Docker前，你需要去官网下载安装包，然后安装再启动，具体复杂程度可以查看<a href="/posts/568a">Centos7-Mysql5.6tar包安装</a></li><li>使用Docker后,你只需要在命令行运行<code>docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</code></li></ul><h3 id="跟虚拟机有什么区别"><a class="markdownIt-Anchor" href="#跟虚拟机有什么区别"></a> 跟虚拟机有什么区别？</h3><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；<br />而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>MB</td><td>GB</td></tr><tr><td>性能</td><td>接近宿主机</td><td>取决于分配的硬件</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般最多十几个</td></tr><tr><td>空间利用率</td><td>高(直接使用宿主机内存)</td><td>低(需要预先分配内存)</td></tr></tbody></table><h2 id="how"><a class="markdownIt-Anchor" href="#how"></a> How</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>Windows 和 MacOS直接去<a href="https://docs.docker.com/get-docker/">官网</a> 下载Docker Desktop安装即可<br />Linux 测试和开发环境可以直接使用脚本命令安装Docker <code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</code><br />具体安装指南可以看<a href="https://docs.docker.com/engine/install/">这里</a></p><h3 id="常用命令介绍"><a class="markdownIt-Anchor" href="#常用命令介绍"></a> 常用命令介绍</h3><h4 id="docker-search"><a class="markdownIt-Anchor" href="#docker-search"></a> docker search</h4><p>介绍：在Docker Hub中搜索镜像<br />Demo：<code>docker search mysql</code></p><h4 id="docker-pull"><a class="markdownIt-Anchor" href="#docker-pull"></a> docker pull</h4><p>介绍：在Docker Hub中获取镜像，一般配合search使用<br />Demo：<code>docker pull mysql</code></p><h4 id="docker-run"><a class="markdownIt-Anchor" href="#docker-run"></a> docker run</h4><p>介绍：由镜像运行一个容器，如果本地未下载镜像，将自动从Docker Hub上下载响应镜像，一般格式为docker run 镜像名:标签(版本)，标签不指定默认为lastest<br />Demo：<code>docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</code><br />Demo解释： 运行一个mysql镜像<br />-p参数：并将容器的3306端口映射到宿主机的3306端口（格式为主机(宿主)端口:容器端口）<br />-e参数：设置Mysql默认root密码为123456，容器启动时需要的参数，这个需要查看Docker Hub中对应镜像的说明<br />-d参数：守护态(后台)运行<br />–name参数：指定容器名称</p><h4 id="docker-ps"><a class="markdownIt-Anchor" href="#docker-ps"></a> docker ps</h4><p>介绍：查看当前正在运行的容器（不显示未运行的），使用docker ps -a可以列出所有容器</p><h4 id="docker-images"><a class="markdownIt-Anchor" href="#docker-images"></a> docker images</h4><p>介绍：查看已下载的所有镜像</p><h4 id="docker-rm"><a class="markdownIt-Anchor" href="#docker-rm"></a> docker rm</h4><p>介绍：删除容器<br />格式：docker rm 容器id   （容器id可以通过docker ps命令查看）</p><h4 id="docker-rmi"><a class="markdownIt-Anchor" href="#docker-rmi"></a> docker rmi</h4><p>介绍：删除镜像<br />格式：docker rmi 镜像id   （镜像id通过docker images命令查看）</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><ul><li><a href="https://www.docker.com/">官网</a></li><li><a href="https://hub.docker.com/">Docker Hub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目构建基础之统一响应</title>
      <link href="posts/29715/"/>
      <url>posts/29715/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why</h2><p>在前后端分离的前提下，大部分的数据传输格式为JSON，因此，定义一个统一的响应数据格式更加有利于前后端的交互。</p><h2 id="how"><a class="markdownIt-Anchor" href="#how"></a> How</h2><h3 id="需要返回什么"><a class="markdownIt-Anchor" href="#需要返回什么"></a> 需要返回什么</h3><ul><li>是否响应成功 <em>用于前端判断是否成功</em></li><li>响应状态码</li><li>状态码描述</li><li>业务响应数据</li></ul><h3 id="响应码接口"><a class="markdownIt-Anchor" href="#响应码接口"></a> 响应码接口</h3><p>考虑后期业务优化和拓展，定义返回响应码接口，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务响应码接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IResultCode</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="返回响应码实现"><a class="markdownIt-Anchor" href="#返回响应码实现"></a> 返回响应码实现</h3><p>为了后期方便维护，定义枚举维护响应码，此处的响应码使用Java Http中定义的响应码，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务代码枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCode</span> <span class="keyword">implements</span> <span class="title">IResultCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(HttpServletResponse.SC_OK, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAILURE(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;业务异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求未授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UN_AUTHORIZED(HttpServletResponse.SC_UNAUTHORIZED, <span class="string">&quot;请求未授权&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INTERNAL_SERVER_ERROR(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, <span class="string">&quot;服务器异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PARAM_MISS(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;缺少必要的请求参数&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数类型错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PARAM_TYPE_ERROR(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;请求参数类型错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数绑定错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PARAM_BIND_ERROR(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;请求参数绑定错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PARAM_VALID_ERROR(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文信息描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义统一结果类"><a class="markdownIt-Anchor" href="#定义统一结果类"></a> 定义统一结果类</h3><p><strong>注意</strong></p><ol><li>外部只能调用统一返回类的方法，不可以直接创建</li><li>内置静态方法返回对象。</li><li>使用链式编程，方便开发（方法都返回对象本身<code>return this;</code>）。</li><li>业务响应信息类型由实际使用者定义（使用泛型接收）。</li></ol><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code; <span class="comment">// 响应码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success; <span class="comment">// 是否成功</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">// 承载数据</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">// 响应码描述</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCode 响应码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 承载数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 响应码描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">(IResultCode resultCode,T data,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.message = message==<span class="keyword">null</span>?resultCode.getMessage():message;</span><br><span class="line">        <span class="keyword">this</span>.success = <span class="keyword">this</span>.code == ResultCode.SUCCESS.code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">(IResultCode resultCode,T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(resultCode,data,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">(IResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(resultCode,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">(IResultCode resultCode,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(resultCode,<span class="keyword">null</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功响应方法，成功方法不支持自定义响应码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">success</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;T&gt;(ResultCode.SUCCESS); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(ResultCode.SUCCESS,data); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">success</span><span class="params">(T data,String message)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(ResultCode.SUCCESS,data,message); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失败响应方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">fail</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(ResultCode.FAILURE); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">fail</span><span class="params">(String message)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(ResultCode.FAILURE,message); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">fail</span><span class="params">(IResultCode resultCode)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(resultCode); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">fail</span><span class="params">(IResultCode resultCode,String message)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(resultCode,message); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊需求使用方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">instance</span><span class="params">(ResultCode resultCode,T data,String message)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> R&lt;&gt;(resultCode,data,message); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理对象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">message</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">success</span><span class="params">(<span class="keyword">boolean</span> success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试r类"><a class="markdownIt-Anchor" href="#测试r类"></a> 测试R类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n——————————————————成功————————————————————————&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;无承载数据成功__&quot;</span>+ JSON.toJSONString(R.success()));</span><br><span class="line">        System.out.println(<span class="string">&quot;承载数据成功__&quot;</span>+JSON.toJSONString(R.success(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;承载数据&quot;</span>&#125;)));</span><br><span class="line">        System.out.println(<span class="string">&quot;承载数据并修改描述成功__&quot;</span>+JSON.toJSONString(R.success(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;承载数据&quot;</span>&#125;,<span class="string">&quot;修改的描述信息&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n——————————————————失败————————————————————————&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;默认失败__&quot;</span>+JSON.toJSONString(R.fail()));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改错误信息失败__&quot;</span>+JSON.toJSONString(R.fail(<span class="string">&quot;修改后的错误信息&quot;</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改ResultCode(缺失参数)失败__&quot;</span>+JSON.toJSONString(R.fail(ResultCode.PARAM_MISS)));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改ResultCode并自定义信息失败__&quot;</span>+JSON.toJSONString(R.fail(ResultCode.PARAM_MISS,<span class="string">&quot;请检查你的请求参数&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n——————————————————特殊————————————————————————&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义__&quot;</span>+JSON.toJSONString(R.instance(ResultCode.SUCCESS,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;承载数据&quot;</span>&#125;,<span class="string">&quot;自定义的返回信息&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n——————————————————创建后修改————————————————————————&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改消息__&quot;</span>+R.success().message(<span class="string">&quot;创建之后修改的消息&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改数据__&quot;</span>+R.success(<span class="string">&quot;11&quot;</span>).data(<span class="string">&quot;创建之后修改的承载数据&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功标识__&quot;</span>+R.success().success(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><h4 id="现存在的问题"><a class="markdownIt-Anchor" href="#现存在的问题"></a> 现存在的问题</h4><p>每个Controller中的method在处理结束后都需要返回R.success();与实际业务并无关系，属于冗余代码。</p><h4 id="问题处理"><a class="markdownIt-Anchor" href="#问题处理"></a> 问题处理</h4><p>利用ControllerAdvice重写response，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespReultHandler</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 需要忽略的方法（特殊接口特殊处理）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; IGNORE_ANNOTATION_TYPE = IgnoreRespResult.class;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 是否处理，当类与方法上不存在IgnoreRespResult注解时处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !AnnotatedElementUtils.hasAnnotation(methodParameter.getContainingClass(),IGNORE_ANNOTATION_TYPE)</span><br><span class="line">                &amp;&amp; !methodParameter.hasMethodAnnotation(IGNORE_ANNOTATION_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object o, MethodParameter methodParameter, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 防止重复包裹的问题出现</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> R) &#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IgnoreRespResult代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IgnoreRespResult &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里可能会有其他问题</strong><br />当返回值是String时，会出现java.lang.ClassCastException: com.**.R cannot be cast to java.lang.String，这是由于默认消息处理类不支持，解决方式如下，加入以下配置后可解决此问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义消息处理配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">FastJsonHttpMessageConverter messageConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">fastJsonConfig.setSerializerFeatures(</span><br><span class="line">SerializerFeature.QuoteFieldNames,</span><br><span class="line">SerializerFeature.WriteMapNullValue,</span><br><span class="line">SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">SerializerFeature.WriteNullStringAsEmpty);</span><br><span class="line">List&lt;MediaType&gt; mediaTypeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">mediaTypeList.add(MediaType.APPLICATION_JSON);</span><br><span class="line">messageConverter.setSupportedMediaTypes(mediaTypeList);</span><br><span class="line">messageConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h3><p>本篇使用到的maven插件有</p><ul><li><code>lombok</code> 简化代码</li><li><code>javax.servlet-api</code> HTTP 状态码</li><li><code>fastjson</code> 测试是输出json格式</li><li>参考自MybatisPlus中R的设计</li></ul><blockquote><p>源码链接<a href="https://github.com/kthirty/JavaProject/tree/master/framework/unifiedResp">GitHub</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> KTHIRTY </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用软件整理</title>
      <link href="posts/31930/"/>
      <url>posts/31930/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="效率"><a class="markdownIt-Anchor" href="#效率"></a> 效率</h2><h3 id="caplock"><a class="markdownIt-Anchor" href="#caplock"></a> Caplock++</h3><p>简介：Capslock+是一个加强 Capslock 键的功能，以提高效率的工具。<br />功能：增强剪切板、快捷打开软件、键盘宏<br />下载：<a href="https://capslox.com/capslock-plus/">GitHub</a><br />推荐度： ★★★★★</p><h2 id="安全"><a class="markdownIt-Anchor" href="#安全"></a> 安全</h2><h3 id="火绒"><a class="markdownIt-Anchor" href="#火绒"></a> 火绒</h3><p>简介：一个简洁安静的安全软件，弹窗拦截功能堪称完美，有效解决Windows系统的各种广告弹窗<br />功能：类似360的安全软件，小而精简<br />下载：<a href="https://www.huorong.cn/">官网</a><br />推荐度： ★★★★★</p><h2 id="系统"><a class="markdownIt-Anchor" href="#系统"></a> 系统</h2><h3 id="switchhosts"><a class="markdownIt-Anchor" href="#switchhosts"></a> SwitchHosts</h3><p>简介：开发人员可能经常要修改系统的Hosts文件，但是修改步骤很麻烦，这款软件可以简单快捷的修改整理host文件（需要管理员权限）<br />功能：修改host<br />下载：<a href="https://oldj.github.io/SwitchHosts/">GitHub</a><br />推荐度： ★★★</p><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><h3 id="picgo图床工具"><a class="markdownIt-Anchor" href="#picgo图床工具"></a> PicGo图床工具</h3><p>简介：整合图床工具，快速上传浏览图片<br />功能：上传图片到图床<br />下载：<a href="https://github.com/Molunerfinn/PicGo">GitHub</a><br />推荐度： ★★★</p><h3 id="uninstall-tool"><a class="markdownIt-Anchor" href="#uninstall-tool"></a> Uninstall Tool</h3><p>简介：卸载Windows软件</p><p>下载：<a href="https://crystalidea.com/uninstall-tool/download">官网</a></p><p>推荐度： ★★★</p><h2 id="文本编辑"><a class="markdownIt-Anchor" href="#文本编辑"></a> 文本编辑</h2><h3 id="sublimetext3"><a class="markdownIt-Anchor" href="#sublimetext3"></a> SublimeText3</h3><p>简介：一款美观度还不错的文本编辑器，比Notepad++好看一万倍了<br />功能：文本编辑<br />下载：<a href="http://www.sublimetext.com/3">官网</a><br />推荐度： ★★★★★<br />其他：<br />配合<a href="https://github.com/SublimeText-Markdown/MarkdownEditing">MarkdownEditing</a>编写Markdown更方便。<br /><a href="/posts/b96f/">破解教程</a></p><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><h3 id="idm"><a class="markdownIt-Anchor" href="#idm"></a> IDM</h3><p>简介：HTTP下载第一下载工具</p><p>下载：<a href="http://www.internetdownloadmanager.com/download.html">官网</a></p><h2 id="开发工具"><a class="markdownIt-Anchor" href="#开发工具"></a> 开发工具</h2><h3 id="anotherredisdesktopmanager"><a class="markdownIt-Anchor" href="#anotherredisdesktopmanager"></a> AnotherRedisDesktopManager</h3><p>简介：Redis可视化客户端</p><p>下载：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 软件推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 软件推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecureCRT破解</title>
      <link href="posts/cfb3/"/>
      <url>posts/cfb3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="注册机破解"><a class="markdownIt-Anchor" href="#注册机破解"></a> 注册机破解</h1><h2 id="下载并安装"><a class="markdownIt-Anchor" href="#下载并安装"></a> 下载并安装</h2><p>官网下载并安装SecureCRT（本篇使用的是8.7.1版本） <a href="https://www.vandyke.com/download/index.html">官方下载链接</a></p><h2 id="下载注册机"><a class="markdownIt-Anchor" href="#下载注册机"></a> 下载注册机</h2><p><a href="https://pan.baidu.com/s/1FY89bocGv_oYu08qCvMFHQ">百度网盘</a> 提取码：4pxn</p><h2 id="开始破解"><a class="markdownIt-Anchor" href="#开始破解"></a> 开始破解</h2><ol><li>管理员模式打开注册机（Windows10可能会报病毒，还原文件即可）</li><li>注册机Product项选中你的对应版本</li><li>点击<code>P</code> 按钮选择你的SecureCRT安装路径</li><li>点击<code>G</code> 生成注册码</li><li>打开SecureCRT软件，选择Enter License Data</li><li>不要输入任何字符，点击下一步</li><li>选择Enter License Manually</li><li>按照对应项输入注册机中的注册码即可</li></ol><h2 id="常用小技巧"><a class="markdownIt-Anchor" href="#常用小技巧"></a> 常用小技巧</h2><ol><li>设置标签显示Session Name： Options -&gt; Edit Default -&gt; Terminal -&gt; Emulation - Advanced -&gt; 勾选Ignore windows title change requests</li><li>选中自动复制： Options -&gt; Global Options -&gt; Terminal -&gt; 勾选Copy on select</li><li>右键自动粘贴： Options -&gt; Global Options -&gt; Terminal -&gt; Paste on right button</li></ol><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><p>破解教程仅供研究参考，请勿用于商业用途。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 软件安装与破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SecureCRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText3破解</title>
      <link href="posts/b96f/"/>
      <url>posts/b96f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="添加host"><a class="markdownIt-Anchor" href="#添加host"></a> 添加Host</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       www.sublimetext.com</span><br><span class="line">127.0.0.1       sublimetext.com</span><br><span class="line">127.0.0.1       sublimehq.com</span><br><span class="line">127.0.0.1       license.sublimehq.com</span><br><span class="line">127.0.0.1       45.55.255.55</span><br><span class="line">127.0.0.1       45.55.41.223</span><br><span class="line">0.0.0.0         license.sublimehq.com</span><br></pre></td></tr></table></figure><h1 id="输入注册码"><a class="markdownIt-Anchor" href="#输入注册码"></a> 输入注册码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">Member J2TeaM</span><br><span class="line">Single User License</span><br><span class="line">EA7E-1011316</span><br><span class="line">D7DA350E 1B8B0760 972F8B60 F3E64036</span><br><span class="line">B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD</span><br><span class="line">FA0A2ABE 25F65BD8 D51458E5 3923CE80</span><br><span class="line">87428428 79079A01 AA69F319 A1AF29A4</span><br><span class="line">A684C2DC 0B1583D4 19CBD290 217618CD</span><br><span class="line">5653E0A0 BACE3948 BB2EE45E 422D2C87</span><br><span class="line">DD9AF44B 99C49590 D2DBDEE1 75860FD2</span><br><span class="line">8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 软件安装与破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SublimeText </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub-jsDelivr搭建自己的CDN</title>
      <link href="posts/35e5/"/>
      <url>posts/35e5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>利用GitHub仓库+jsDelivr实现免费CDN，用来存储博客文件完美</p></blockquote><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>使用Hexo+GitHub搭建自己的博客之后，发现没有可用的图床，七牛云之类的都要收费，某些又需要实名认证，所以想到使用GitHub的仓库作为资源文件存储位置。</p><h1 id="创建github仓库"><a class="markdownIt-Anchor" href="#创建github仓库"></a> 创建GitHub仓库</h1><p><em>这里默认都已经注册过GitHub账号了，没有注册的话自行百度</em></p><p>新建一个仓库，我这边取名为CDN，这个可以随自己心意制定<br /><img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200415155952.png" alt="创建截图" /></p><h1 id="初始化并测试仓库"><a class="markdownIt-Anchor" href="#初始化并测试仓库"></a> 初始化并测试仓库</h1><ol><li>在本地的任意文件夹下使用<code>git clone git@github.com:&#123;GitHub用户名&#125;/&#123;仓库名&#125;.git</code> 将CDN仓库下载到本地</li><li>创建images文件夹并复制进去几张测试图片</li><li>使用git命令将仓库提交到GitHub<ol><li><code>cd 本地CDN仓库文件夹</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;init&quot;</code></li><li><code>git push</code></li></ol></li><li>检查GitHub上的文件 <img src="https://cdn.jsdelivr.net/gh/kthirty/CDN/images/20200415161001.png" alt="成功效果图" /></li><li>使用<code>https://raw.githubusercontent.com/&#123;GitHub用户名&#125;/&#123;仓库名&#125;/&#123;分支名&#125;/&#123;文件夹&#125;/&#123;图片名称&#125;</code> 测试是否可以访问到图片</li></ol><h1 id="使用jsdelivr加速"><a class="markdownIt-Anchor" href="#使用jsdelivr加速"></a> 使用jsDelivr加速</h1><p>将上一个步骤中的<br /><code>https://raw.githubusercontent.com/&#123;GitHub用户名&#125;/&#123;仓库名&#125;/&#123;分支名&#125;/&#123;文件夹&#125;/&#123;图片名称&#125;</code><br />连接修改为<br /><code>https://cdn.jsdelivr.net/gh/&#123;Github用户名&#125;/&#123;仓库名&#125;/&#123;文件夹&#125;/图片名称</code></p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>推荐一个图床工具<a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 安装<a href="https://github.com/zWingz/picgo-plugin-github-plus">GitHub-Plus</a>插件后完美配合本篇使用</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> KTHIRTY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建并更换主题</title>
      <link href="posts/241e/"/>
      <url>posts/241e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hexo博客框架搭建记录</p><h1 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Nodejs</h1><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p><a href="http://nodejs.cn/">官网地址</a></p><h2 id="检查安装结果"><a class="markdownIt-Anchor" href="#检查安装结果"></a> 检查安装结果</h2><p><code>npm -v</code></p><h1 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h1><p>使用npm全局安装<code>npm install hexo-cli -g</code><br />附上官网链接<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h1 id="初始化博客"><a class="markdownIt-Anchor" href="#初始化博客"></a> 初始化博客</h1><ol><li>命令行进入（你希望）博客存储目录</li><li>hexo init BlogName(此处为目录名称)</li><li>hexo s 运行</li></ol><h1 id="更换主题"><a class="markdownIt-Anchor" href="#更换主题"></a> 更换主题</h1><h2 id="下载主题"><a class="markdownIt-Anchor" href="#下载主题"></a> 下载主题</h2><p>此处选择<a href="https://jerryc.me/posts/21cfbf15/">Butterfly主题</a>，更多主题请查看<a href="https://hexo.io/themes/">Hexo官网</a><br />在博客根目录执行 <code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</code></p><h2 id="更换主题-2"><a class="markdownIt-Anchor" href="#更换主题-2"></a> 更换主题</h2><p>修改 HexoRoot/_config.yml 中的theme项为Butterfly</p><h1 id="配置博客"><a class="markdownIt-Anchor" href="#配置博客"></a> 配置博客</h1><h2 id="page-front-matter"><a class="markdownIt-Anchor" href="#page-front-matter"></a> Page Front-matter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">type: (tags,link,categories這三個頁面需要配置)</span><br><span class="line">comments: (是否需要顯示評論，默認true)</span><br><span class="line">description:</span><br><span class="line">top_img: (設置頂部圖)</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="post-front-matter"><a class="markdownIt-Anchor" href="#post-front-matter"></a> Post Front-matter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img: (除非特定需要，可以不寫)</span><br><span class="line">comments  是否显示评论，默认true</span><br><span class="line">cover:  缩略图</span><br><span class="line">toc:  是否顯示toc (除非特定文章設置，可以不寫)</span><br><span class="line">toc_number: 是否顯示toc數字 (除非特定文章設置，可以不寫)</span><br><span class="line">copyright: 是否顯示版權 (除非特定文章設置，可以不寫)</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">hide:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="创建标签页"><a class="markdownIt-Anchor" href="#创建标签页"></a> 创建标签页</h2><ol><li>前往HexoRoot</li><li>输入hexo new page tags</li><li>会生成source/tags/index.md文件</li><li>修改这个文件为</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-04-09 16:13:50</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="创建分类页"><a class="markdownIt-Anchor" href="#创建分类页"></a> 创建分类页</h2><ol><li>前往HexoRoot</li><li>输入hexo new page categories</li><li>会生成source/categories/index.md文件</li><li>修改这个文件为</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-04-09 16:13:50</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="创建友链页"><a class="markdownIt-Anchor" href="#创建友链页"></a> 创建友链页</h2><ol><li>前往HexoRoot</li><li>输入hexo new page link</li><li>会生成source/link/index.md文件</li><li>修改这个文件为</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-04-09 16:13:50</span><br><span class="line">type: &quot;link&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="5"><li>友情链接配置<ol><li>创建source/_data目录</li><li>创建link.yml 文件</li><li>修改link.yml 文件内容</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class:</span><br><span class="line">  class_name: 友情鏈接</span><br><span class="line">  link_list:</span><br><span class="line">    1:</span><br><span class="line">      name: xxx</span><br><span class="line">      link: https:&#x2F;&#x2F;blog.xxx.com</span><br><span class="line">      avatar: https:&#x2F;&#x2F;cdn.xxxxx.top&#x2F;avatar.png</span><br><span class="line">      descr: xxxxxxx</span><br><span class="line">    2:</span><br><span class="line">      name: xxxxxx</span><br><span class="line">      link: https:&#x2F;&#x2F;www.xxxxxxcn&#x2F;</span><br><span class="line">      avatar: https:&#x2F;&#x2F;xxxxx&#x2F;avatar.png</span><br><span class="line">      descr: xxxxxxx  </span><br><span class="line"></span><br><span class="line"> class2:</span><br><span class="line">   class_name: 鏈接無效</span><br><span class="line">   link_list:</span><br><span class="line">     1:</span><br><span class="line">       name: 夢xxx</span><br><span class="line">       link: https:&#x2F;&#x2F;blog.xxx.com</span><br><span class="line">       avatar: https:&#x2F;&#x2F;xxxx&#x2F;avatar.png</span><br><span class="line">       descr: xxxx</span><br><span class="line">     2:</span><br><span class="line">       name: xx</span><br><span class="line">       link: https:&#x2F;&#x2F;www.axxxx.cn&#x2F;</span><br><span class="line">       avatar: https:&#x2F;&#x2F;x</span><br><span class="line">       descr: xx</span><br></pre></td></tr></table></figure><h2 id="创建音乐页"><a class="markdownIt-Anchor" href="#创建音乐页"></a> 创建音乐页</h2><p>音乐界面使用了插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>。<br />使用方法請參考插件的文档。<br />音乐页面只是普通的 page 頁，按普通页面操作生成就行。</p><p>注意：此处可能会出现错误<br />extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial<br />原因为hexo-tag-aplayer缺少依赖<br />执行npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br />可以解决</p><h2 id="创建电影页"><a class="markdownIt-Anchor" href="#创建电影页"></a> 创建电影页</h2><p>电影界面使用了插件 hexo-douban。<br />使用方法请参考插件的文档。</p><p>注意：hexo-douban 会自动生成頁面，所以不需要自己创建。对应页面的 top_img 可以 butterfly.yml 修改。</p><h2 id="优化文章链接过长问题"><a class="markdownIt-Anchor" href="#优化文章链接过长问题"></a> 优化文章链接过长问题</h2><p>使用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件<br />修改_config.yml <code>permalink: :abbrlink.html</code><br />添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Other</span><br><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc16  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure><h2 id="修改自定义域名"><a class="markdownIt-Anchor" href="#修改自定义域名"></a> 修改自定义域名</h2><ol><li>在项目source文件夹下创建CNAME文件，内容写域名</li><li>将域名解析到{username}.github.io</li></ol><h1 id="部署到github"><a class="markdownIt-Anchor" href="#部署到github"></a> 部署到Github</h1><h2 id="修改配置文件_configyml"><a class="markdownIt-Anchor" href="#修改配置文件_configyml"></a> 修改配置文件（_config.yml）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname&#x2F;youname.github.io.git #根据具体情况输入</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="配置github"><a class="markdownIt-Anchor" href="#配置github"></a> 配置GitHub</h2><ol><li>打开GitHub new repository 创建一个你的项目，项目名<em><a href="http://yourname.github.io">yourname.github.io</a></em> (yourname需要跟GitHub用户名一致)</li><li>打开Setting -&gt; GitHub Pages 开启你的pages</li><li>配置本地Git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxxx&quot;</span><br><span class="line">$ git config --global user.email &quot;xxxxx@xx.com&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h2><p>HexoRoot 下执行 <code>hexo g -d</code><br />注意： 此处可能会出现error deployer not found:git，原因为缺少hexo-deployer-git插件，<br />执行<code>npm install hexo-deployer-git --save</code>可以解决</p><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><ol><li>文中<code>HexoRoot</code>表示博客根目录</li><li>简要信息过短 可以使用 <code>&lt;!-- more --&gt;</code> 占位</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7-Mysql5</title>
      <link href="posts/6064/"/>
      <url>posts/6064/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在Centos7配置MySQL主从同步</p><h1 id="本次配置使用的服务器"><a class="markdownIt-Anchor" href="#本次配置使用的服务器"></a> 本次配置使用的服务器</h1><p>master 192.168.3.30<br />salve  192.168.3.31</p><h1 id="master配置"><a class="markdownIt-Anchor" href="#master配置"></a> Master配置</h1><p>修改配置文件<br />vim /etc/my.cnf</p><p>加入以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind-address &#x3D; 192.168.33.22 #your master ip 开启访问权限</span><br><span class="line">server-id &#x3D; 1 #在master-slave架构中，每台机器节点都需要有唯一的server-id</span><br><span class="line">log-bin&#x3D;mysql-bin </span><br></pre></td></tr></table></figure><p>重启mysql<br />/etc/init.d/mysqld restart</p><p>创建主从同步的mysql user (在Mysql命令行操作)</p><p>CREATE USER ‘slave1’@‘192.168.3.31’ IDENTIFIED BY ‘slave1’;<br />赋权<br />GRANT REPLICATION SLAVE ON <em>.</em> TO ‘slave1’@‘192.168.3.31’;</p><p>为了保证主从数据库数据同步，暂时加入读锁，防止数据同步时期数据变动导致主从不一致<br />FLUSH TABLES WITH READ LOCK;</p><p>记录下来MASTER REPLICATION LOG 的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>导出主库数据<br />mysqldump -u root -p --all-databases --master-data &gt; dbdump.sql<br />发现mysqldump 命令不存在<br />ln -s /usr/local/mysql/bin/mysqldump /usr/bin/mysqldump<br />加入链接</p><p>解除读锁<br />UNLOCK TABLES;</p><p>将导出文件传输到salve<br />scp dbdump.sql <a href="mailto:root@192.168.3.31">root@192.168.3.31</a>:/root/</p><h1 id="salve配置"><a class="markdownIt-Anchor" href="#salve配置"></a> Salve配置</h1><p>更改/etc/my.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind-address &#x3D; 192.168.3.30 # 授权访问地址</span><br><span class="line">server-id &#x3D; 2 #master-slave结构中，唯一的server-id</span><br><span class="line">log_bin &#x3D; mysql-bin</span><br></pre></td></tr></table></figure><p>重启mysql是配置生效<br />/etc/init.d/mysqld restart</p><p>导入数据</p><p>mysql -u root -p &lt; /root/dbdump.sql</p><p>使slave与master建立连接，从而同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stop slave; # 先停止</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">CHANGE MASTER TO </span><br><span class="line">  MASTER_HOST&#x3D;&#39;192.168.3.30&#39;, # 主库IP</span><br><span class="line">  MASTER_USER&#x3D;&#39;slave1&#39;, # 主库用户名</span><br><span class="line">  MASTER_PASSWORD&#x3D;&#39;slave1&#39;,# 主库密码</span><br><span class="line">  MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000003&#39;,</span><br><span class="line">  MASTER_LOG_POS&#x3D;333;</span><br><span class="line">后面两项可以在主库中使用&#96;show master status&#96;命令查看</span><br><span class="line"></span><br><span class="line">&gt;mysql&gt; show master status;</span><br><span class="line">&gt;+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">&gt;| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">&gt;+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">&gt;| mysql-bin.000003 |      333 |              |                  |                   |</span><br><span class="line">&gt;+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">start slave ; # 启动同步</span><br></pre></td></tr></table></figure><p>到这里应该已经可以同步了，如果不行，在从库使用show slave status\G 查看详细原因<br />主要查看 <code>Slave_IO_Running: Yes</code> <code>Slave_SQL_Running: Yes</code>两项</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> Mysql </tag>
            
            <tag> Centos </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7-Mysql5</title>
      <link href="posts/568a/"/>
      <url>posts/568a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Centos7下已tar包形式安装MySQL5.6</p><h1 id="删除centos7-自带的mariadb如果没有直接跳过"><a class="markdownIt-Anchor" href="#删除centos7-自带的mariadb如果没有直接跳过"></a> 删除Centos7 自带的Mariadb（如果没有直接跳过）</h1><p>rpm -qa|grep mariadb<br />rpm -e --nodeps mariadb-libs-5.5.44-2.el7.centos.x86_64</p><h1 id="删除etc目录下的mycnf文件"><a class="markdownIt-Anchor" href="#删除etc目录下的mycnf文件"></a> #删除etc目录下的my.cnf文件</h1><p>rm /etc/my.cnf</p><p>#检查mysql是否存在<br />rpm -qa | grep mysql</p><p>#检查mysql组和用户是否存在，如无创建<br />cat /etc/group | grep mysql<br />cat /etc/passwd | grep mysql</p><h1 id="创建mysql-组"><a class="markdownIt-Anchor" href="#创建mysql-组"></a> 创建mysql 组</h1><p>groupadd mysql<br />#创建一个用户名为mysql的用户并加入mysql用户组<br />useradd -g mysql mysql</p><h1 id="下载mysql安装包"><a class="markdownIt-Anchor" href="#下载mysql安装包"></a> 下载mysql安装包</h1><p>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.6/">https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.6/</a></p><h1 id="解压并修改名称安装到usrlocal目录下"><a class="markdownIt-Anchor" href="#解压并修改名称安装到usrlocal目录下"></a> 解压并修改名称（安装到/usr/local/目录下）</h1><p>tar -zxvf mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz<br />mv mysql-5.6.46-linux-glibc2.12-x86_64 mysql</p><h1 id="创建data目录如果有就不用了"><a class="markdownIt-Anchor" href="#创建data目录如果有就不用了"></a> 创建data目录（如果有就不用了）</h1><p>cd /usr/local/mysql<br />mkdir data</p><h1 id="更改文件权限到mysqlmysql-下"><a class="markdownIt-Anchor" href="#更改文件权限到mysqlmysql-下"></a> 更改文件权限到mysql:mysql 下</h1><p>chown -R mysql:mysql /usr/local/mysql</p><h1 id="在etc下创建mycnf-文件内容如下"><a class="markdownIt-Anchor" href="#在etc下创建mycnf-文件内容如下"></a> 在/etc下创建my.cnf 文件(内容如下)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8 </span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">#设置3306端口</span><br><span class="line">port &#x3D; 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;&#x2F;var&#x2F;mysql57</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;mysql57&#x2F;data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB </span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">max_allowed_packet&#x3D;16M</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装并初始化"><a class="markdownIt-Anchor" href="#安装并初始化"></a> 安装并初始化</h1><p>cd /usr/local/mysql<br />./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data<br />cp ./support-files/mysql.server /etc/init.d/mysqld<br />chown 777 /etc/my.cnf<br />chmod +x /etc/init.d/mysqld</p><h1 id="启动mysql"><a class="markdownIt-Anchor" href="#启动mysql"></a> 启动mysql</h1><p>/etc/init.d/mysqld restart</p><h1 id="修改密码在mysql命令行执行"><a class="markdownIt-Anchor" href="#修改密码在mysql命令行执行"></a> 修改密码（在mysql命令行执行）</h1><p>set PASSWORD = PASSWORD(‘111111’);<br />flush privileges;</p><h1 id="添加远程访问权限mysql命令行执行"><a class="markdownIt-Anchor" href="#添加远程访问权限mysql命令行执行"></a> 添加远程访问权限（Mysql命令行执行）</h1><p>use mysql<br />update user set host=’%’ where user=‘root’;<br />/bin/systemctl restart  mysql.service</p><h1 id="将mysql添加到bin中方便使用"><a class="markdownIt-Anchor" href="#将mysql添加到bin中方便使用"></a> 将mysql添加到bin中，方便使用</h1><p>ln -s /usr/local/mysql/bin/mysql   /usr/bin/mysql</p><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><p>安装方式没有初始密码，mysql -u root -p 不需要输入密码，直接回车</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 环境搭建 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
            <tag> Centos </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
